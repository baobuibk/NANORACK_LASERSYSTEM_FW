
LaserDiode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000228  00800200  000027ee  00002882  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000155  00800428  00800428  00002aaa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002aaa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000440  00000000  00000000  00002b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000046d3  00000000  00000000  00002f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e9a  00000000  00000000  0000765b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005225  00000000  00000000  000094f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ac4  00000000  00000000  0000e71c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000e83a  00000000  00000000  0000f1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000276d  00000000  00000000  0001da1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  00020187  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001da6  00000000  00000000  000204ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f6 c2       	rjmp	.+1516   	; 0x5ee <__ctors_end>
       2:	00 00       	nop
       4:	14 c3       	rjmp	.+1576   	; 0x62e <__bad_interrupt>
       6:	00 00       	nop
       8:	12 c3       	rjmp	.+1572   	; 0x62e <__bad_interrupt>
       a:	00 00       	nop
       c:	10 c3       	rjmp	.+1568   	; 0x62e <__bad_interrupt>
       e:	00 00       	nop
      10:	0e c3       	rjmp	.+1564   	; 0x62e <__bad_interrupt>
      12:	00 00       	nop
      14:	0c c3       	rjmp	.+1560   	; 0x62e <__bad_interrupt>
      16:	00 00       	nop
      18:	0a c3       	rjmp	.+1556   	; 0x62e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	08 c3       	rjmp	.+1552   	; 0x62e <__bad_interrupt>
      1e:	00 00       	nop
      20:	06 c3       	rjmp	.+1548   	; 0x62e <__bad_interrupt>
      22:	00 00       	nop
      24:	04 c3       	rjmp	.+1544   	; 0x62e <__bad_interrupt>
      26:	00 00       	nop
      28:	02 c3       	rjmp	.+1540   	; 0x62e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	00 c3       	rjmp	.+1536   	; 0x62e <__bad_interrupt>
      2e:	00 00       	nop
      30:	fe c2       	rjmp	.+1532   	; 0x62e <__bad_interrupt>
      32:	00 00       	nop
      34:	fc c2       	rjmp	.+1528   	; 0x62e <__bad_interrupt>
      36:	00 00       	nop
      38:	fa c2       	rjmp	.+1524   	; 0x62e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f8 c2       	rjmp	.+1520   	; 0x62e <__bad_interrupt>
      3e:	00 00       	nop
      40:	f6 c2       	rjmp	.+1516   	; 0x62e <__bad_interrupt>
      42:	00 00       	nop
      44:	f4 c2       	rjmp	.+1512   	; 0x62e <__bad_interrupt>
      46:	00 00       	nop
      48:	f2 c2       	rjmp	.+1508   	; 0x62e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f0 c2       	rjmp	.+1504   	; 0x62e <__bad_interrupt>
      4e:	00 00       	nop
      50:	ee c2       	rjmp	.+1500   	; 0x62e <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 e0 0f 	jmp	0x1fc0	; 0x1fc0 <__vector_21>
      58:	ea c2       	rjmp	.+1492   	; 0x62e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e8 c2       	rjmp	.+1488   	; 0x62e <__bad_interrupt>
      5e:	00 00       	nop
      60:	e6 c2       	rjmp	.+1484   	; 0x62e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 27 0a 	jmp	0x144e	; 0x144e <__vector_25>
      68:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <__vector_26>
      6c:	e0 c2       	rjmp	.+1472   	; 0x62e <__bad_interrupt>
      6e:	00 00       	nop
      70:	de c2       	rjmp	.+1468   	; 0x62e <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__vector_29>
      78:	da c2       	rjmp	.+1460   	; 0x62e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d8 c2       	rjmp	.+1456   	; 0x62e <__bad_interrupt>
      7e:	00 00       	nop
      80:	d6 c2       	rjmp	.+1452   	; 0x62e <__bad_interrupt>
      82:	00 00       	nop
      84:	d4 c2       	rjmp	.+1448   	; 0x62e <__bad_interrupt>
      86:	00 00       	nop
      88:	d2 c2       	rjmp	.+1444   	; 0x62e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d0 c2       	rjmp	.+1440   	; 0x62e <__bad_interrupt>
      8e:	00 00       	nop
      90:	ce c2       	rjmp	.+1436   	; 0x62e <__bad_interrupt>
      92:	00 00       	nop
      94:	cc c2       	rjmp	.+1432   	; 0x62e <__bad_interrupt>
      96:	00 00       	nop
      98:	ca c2       	rjmp	.+1428   	; 0x62e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 df 08 	jmp	0x11be	; 0x11be <__vector_39>
      a0:	c6 c2       	rjmp	.+1420   	; 0x62e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c4 c2       	rjmp	.+1416   	; 0x62e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c2 c2       	rjmp	.+1412   	; 0x62e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c0 c2       	rjmp	.+1408   	; 0x62e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	be c2       	rjmp	.+1404   	; 0x62e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	bc c2       	rjmp	.+1400   	; 0x62e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ba c2       	rjmp	.+1396   	; 0x62e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b8 c2       	rjmp	.+1392   	; 0x62e <__bad_interrupt>
      be:	00 00       	nop
      c0:	b6 c2       	rjmp	.+1388   	; 0x62e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b4 c2       	rjmp	.+1384   	; 0x62e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b2 c2       	rjmp	.+1380   	; 0x62e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	b0 c2       	rjmp	.+1376   	; 0x62e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ae c2       	rjmp	.+1372   	; 0x62e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	ac c2       	rjmp	.+1368   	; 0x62e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	aa c2       	rjmp	.+1364   	; 0x62e <__bad_interrupt>
      da:	00 00       	nop
      dc:	a8 c2       	rjmp	.+1360   	; 0x62e <__bad_interrupt>
      de:	00 00       	nop
      e0:	a6 c2       	rjmp	.+1356   	; 0x62e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bd 05       	cpc	r27, r13
      e6:	de 05       	cpc	r29, r14
      e8:	ff 05       	cpc	r31, r15
      ea:	20 06       	cpc	r2, r16
      ec:	41 06       	cpc	r4, r17
      ee:	62 06       	cpc	r6, r18
      f0:	83 06       	cpc	r8, r19
      f2:	a7 06       	cpc	r10, r23
      f4:	cb 06       	cpc	r12, r27
      f6:	cb 0d       	add	r28, r11
      f8:	cf 0d       	add	r28, r15
      fa:	cf 0d       	add	r28, r15
      fc:	cf 0d       	add	r28, r15
      fe:	cf 0d       	add	r28, r15
     100:	cf 0d       	add	r28, r15
     102:	cf 0d       	add	r28, r15
     104:	cf 0d       	add	r28, r15
     106:	cf 0d       	add	r28, r15
     108:	cf 0d       	add	r28, r15
     10a:	cf 0d       	add	r28, r15
     10c:	35 0b       	sbc	r19, r21
     10e:	35 0b       	sbc	r19, r21
     110:	35 0b       	sbc	r19, r21
     112:	35 0b       	sbc	r19, r21
     114:	35 0b       	sbc	r19, r21
     116:	35 0b       	sbc	r19, r21
     118:	35 0b       	sbc	r19, r21
     11a:	35 0b       	sbc	r19, r21
     11c:	35 0b       	sbc	r19, r21
     11e:	35 0b       	sbc	r19, r21
     120:	cf 0d       	add	r28, r15
     122:	cf 0d       	add	r28, r15
     124:	cf 0d       	add	r28, r15
     126:	cf 0d       	add	r28, r15
     128:	cf 0d       	add	r28, r15
     12a:	cf 0d       	add	r28, r15
     12c:	cf 0d       	add	r28, r15
     12e:	cf 0d       	add	r28, r15
     130:	cf 0d       	add	r28, r15
     132:	cf 0d       	add	r28, r15
     134:	cf 0d       	add	r28, r15
     136:	cf 0d       	add	r28, r15
     138:	cf 0d       	add	r28, r15
     13a:	cf 0d       	add	r28, r15
     13c:	cf 0d       	add	r28, r15
     13e:	cf 0d       	add	r28, r15
     140:	cf 0d       	add	r28, r15
     142:	cf 0d       	add	r28, r15
     144:	cf 0d       	add	r28, r15
     146:	cf 0d       	add	r28, r15
     148:	cf 0d       	add	r28, r15
     14a:	cf 0d       	add	r28, r15
     14c:	cf 0d       	add	r28, r15
     14e:	cf 0d       	add	r28, r15
     150:	cf 0d       	add	r28, r15
     152:	cf 0d       	add	r28, r15
     154:	cf 0d       	add	r28, r15
     156:	cf 0d       	add	r28, r15
     158:	cf 0d       	add	r28, r15
     15a:	cf 0d       	add	r28, r15
     15c:	64 0c       	add	r6, r4
     15e:	cf 0d       	add	r28, r15
     160:	cf 0d       	add	r28, r15
     162:	cf 0d       	add	r28, r15
     164:	cf 0d       	add	r28, r15
     166:	cf 0d       	add	r28, r15
     168:	cf 0d       	add	r28, r15
     16a:	cf 0d       	add	r28, r15
     16c:	cf 0d       	add	r28, r15
     16e:	cf 0d       	add	r28, r15
     170:	cf 0d       	add	r28, r15
     172:	74 0b       	sbc	r23, r20
     174:	8a 0b       	sbc	r24, r26
     176:	cf 0d       	add	r28, r15
     178:	cf 0d       	add	r28, r15
     17a:	cf 0d       	add	r28, r15
     17c:	cf 0d       	add	r28, r15
     17e:	8a 0b       	sbc	r24, r26
     180:	cf 0d       	add	r28, r15
     182:	cf 0d       	add	r28, r15
     184:	cf 0d       	add	r28, r15
     186:	cf 0d       	add	r28, r15
     188:	cf 0d       	add	r28, r15
     18a:	cf 0d       	add	r28, r15
     18c:	64 0c       	add	r6, r4
     18e:	cf 0d       	add	r28, r15
     190:	cf 0d       	add	r28, r15
     192:	c9 0b       	sbc	r28, r25
     194:	cf 0d       	add	r28, r15
     196:	46 0c       	add	r4, r6
     198:	cf 0d       	add	r28, r15
     19a:	cf 0d       	add	r28, r15
     19c:	64 0c       	add	r6, r4

0000019e <__trampolines_end>:
     19e:	4e 41       	sbci	r20, 0x1E	; 30
     1a0:	4e 49       	Address 0x000001a0 is out of bounds.
.word	0xffff	; ????

000001a1 <pstr_inity>:
     1a1:	49 4e 49 54 59                                      INITY

000001a6 <pstr_inf>:
     1a6:	49 4e 46                                            INF

000001a9 <pwr_m10>:
     1a9:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     1b9:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000001c1 <pwr_p10>:
     1c1:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     1d1:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000001d9 <cmd_line_18>:
     1d9:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     1e9:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     1f9:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     209:	2e 2e 2e 2e 2e 2e 2e 0d 0a 00                       ..........

00000213 <cmd_line_17>:
     213:	2e 2e 20 20 20 20 20 20 20 20 20 20 20 20 20 20     ..              
     223:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     233:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     243:	20 20 20 20 20 2e 2e 0d 0a 00                            .....

0000024d <cmd_line_16>:
     24d:	2e 2e 20 20 20 20 20 20 20 20 20 20 20 20 20 20     ..              
     25d:	20 20 20 5c 5f 2f 20 20 7c 5f 28 5f 29 5f 5f 5f        \_/  |_(_)___
     26d:	28 5f 29 5f 5f 5f 2f 20 20 20 20 20 20 20 20 20     (_)___/         
     27d:	20 20 20 20 20 2e 2e 0d 0a 00                            .....

00000287 <cmd_line_15>:
     287:	2e 2e 20 20 20 20 20 20 20 20 20 20 20 20 20 20     ..              
     297:	20 20 5c 20 56 20 2f 20 7c 20 7c 7c 20 7c 5f 7c       \ V / | || |_|
     2a7:	20 7c 20 7c 5f 7c 20 7c 20 20 20 20 20 20 20 20      | |_| |        
     2b7:	20 20 20 20 20 2e 2e 0d 0a 00                            .....

000002c1 <cmd_line_14>:
     2c1:	2e 2e 20 20 20 20 20 20 20 20 20 20 20 20 20 20     ..              
     2d1:	20 5c 20 5c 20 2f 20 2f 7c 20 7c 7c 20 7c 20 7c      \ \ / /| || | |
     2e1:	20 7c 20 7c 20 7c 20 7c 20 20 20 20 20 20 20 20      | | | |        
     2f1:	20 20 20 20 20 2e 2e 0d 0a 00                            .....

000002fb <cmd_line_13>:
     2fb:	2e 2e 20 20 20 20 20 20 20 20 20 20 20 20 20 20     ..              
     30b:	5c 20 5c 20 20 20 2f 20 2f 20 7c 20 2f 20 5f 20     \ \   / / | / _ 
     31b:	5c 20 2f 20 5f 20 5c 20 20 20 20 20 20 20 20 20     \ / _ \         
     32b:	20 20 20 20 20 2e 2e 0d 0a 00                            .....

00000335 <cmd_line_12>:
     335:	2e 2e 20 20 20 20 20 20 20 20 20 20 20 20 20 20     ..              
     345:	5f 5f 20 20 20 20 20 5f 5f 5f 20 20 20 5f 5f 5f     __     ___   ___
     355:	20 20 20 5f 5f 5f 20 20 20 20 20 20 20 20 20 20        ___          
     365:	20 20 20 20 20 2e 2e 0d 0a 00                            .....

0000036f <cmd_line_11>:
     36f:	2e 2e 20 20 20 20 20 20 20 20 20 20 20 20 20 20     ..              
     37f:	20 20 7c 5f 7c 20 20 20 7c 5f 7c 20 20 7c 5f 7c       |_|   |_|  |_|
     38f:	20 5c 5f 5f 5f 2f 20 20 20 20 20 20 20 20 20 20      \___/          
     39f:	20 20 20 20 20 2e 2e 0d 0a 00                            .....

000003a9 <cmd_line_10>:
     3a9:	2e 2e 20 20 20 20 20 20 20 20 20 20 20 20 20 20     ..              
     3b9:	20 20 7c 20 20 5f 5f 2f 7c 20 7c 20 20 7c 20 7c       |  __/| |  | |
     3c9:	7c 20 7c 5f 7c 20 7c 20 20 20 20 20 20 20 20 20     | |_| |         
     3d9:	20 20 20 20 20 2e 2e 0d 0a 00                            .....

000003e3 <cmd_line_9>:
     3e3:	2e 2e 20 20 20 20 20 20 20 20 20 20 20 20 20 20     ..              
     3f3:	20 20 7c 20 7c 5f 29 20 7c 20 7c 5c 2f 7c 20 7c       | |_) | |\/| |
     403:	7c 20 7c 20 7c 20 7c 20 20 20 20 20 20 20 20 20     | | | |         
     413:	20 20 20 20 20 2e 2e 0d 0a 00                            .....

0000041d <cmd_line_8>:
     41d:	2e 2e 20 20 20 20 20 20 20 20 20 20 20 20 20 20     ..              
     42d:	20 20 7c 20 20 5f 20 5c 7c 20 20 5c 2f 20 20 7c       |  _ \|  \/  |
     43d:	7c 20 7c 20 7c 20 7c 20 20 20 20 20 20 20 20 20     | | | |         
     44d:	20 20 20 20 20 2e 2e 0d 0a 00                            .....

00000457 <cmd_line_7>:
     457:	2e 2e 20 20 20 20 20 20 20 20 20 20 7c 5f 7c 20     ..          |_| 
     467:	20 20 20 5f 5f 5f 5f 20 20 5f 5f 20 20 5f 5f 20        ____  __  __ 
     477:	20 5f 20 20 20 5f 20 20 20 20 20 20 20 20 20 20      _   _          
     487:	20 20 20 20 20 2e 2e 0d 0a 00                            .....

00000491 <cmd_line_6>:
     491:	2e 2e 20 20 20 20 7c 5f 5f 5f 5f 2f 7c 20 2e 5f     ..    |____/| ._
     4a1:	5f 2f 20 5c 5f 5f 2c 5f 7c 5c 5f 5f 5f 5c 5f 5f     _/ \__,_|\___\__
     4b1:	5f 7c 5f 5f 5f 5f 5f 7c 5f 7c 5f 7c 5f 7c 20 7c     _|_____|_|_|_| |
     4c1:	5f 7c 20 20 20 2e 2e 0d 0a 00                       _|   .....

000004cb <cmd_line_5>:
     4cb:	2e 2e 20 20 20 20 20 5f 5f 5f 29 20 7c 20 7c 5f     ..     ___) | |_
     4db:	29 20 7c 20 28 5f 7c 20 7c 20 28 5f 7c 20 20 5f     ) | (_| | (_|  _
     4eb:	5f 2f 20 7c 5f 5f 5f 7c 20 7c 20 7c 20 7c 20 7c     _/ |___| | | | |
     4fb:	20 7c 20 20 20 2e 2e 0d 0a 00                        |   .....

00000505 <cmd_line_4>:
     505:	2e 2e 20 20 20 20 5c 5f 5f 5f 20 5c 7c 20 27 5f     ..    \___ \| '_
     515:	20 5c 20 2f 20 5f 60 20 7c 2f 20 5f 5f 2f 20 5f      \ / _` |/ __/ _
     525:	20 5c 20 7c 20 20 20 7c 20 7c 20 7c 20 27 5f 20      \ |   | | | '_ 
     535:	5c 20 20 20 20 2e 2e 0d 0a 00                       \    .....

0000053f <cmd_line_3>:
     53f:	2e 2e 20 20 20 20 2f 20 5f 5f 5f 7c 20 5f 20 5f     ..    / ___| _ _
     54f:	5f 20 20 20 5f 5f 20 5f 20 20 5f 5f 5f 20 5f 5f     _   __ _  ___ __
     55f:	5f 7c 20 7c 20 20 20 28 5f 7c 5f 29 5f 20 5f 5f     _| |   (_|_)_ __
     56f:	20 20 20 20 20 2e 2e 0d 0a 00                            .....

00000579 <cmd_line_2>:
     579:	2e 2e 20 20 20 20 20 5f 5f 5f 5f 20 20 20 20 20     ..     ____     
     589:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     599:	20 20 5f 20 20 20 20 20 5f 20 5f 20 20 20 20 20       _     _ _     
     5a9:	20 20 20 20 20 2e 2e 0d 0a 00                            .....

000005b3 <cmd_line_1>:
     5b3:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     5c3:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     5d3:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
     5e3:	2e 2e 2e 2e 2e 2e 2e 0d 0a 00 00                    ...........

000005ee <__ctors_end>:
     5ee:	11 24       	eor	r1, r1
     5f0:	1f be       	out	0x3f, r1	; 63
     5f2:	cf ef       	ldi	r28, 0xFF	; 255
     5f4:	d1 e2       	ldi	r29, 0x21	; 33
     5f6:	de bf       	out	0x3e, r29	; 62
     5f8:	cd bf       	out	0x3d, r28	; 61
     5fa:	00 e0       	ldi	r16, 0x00	; 0
     5fc:	0c bf       	out	0x3c, r16	; 60

000005fe <__do_copy_data>:
     5fe:	14 e0       	ldi	r17, 0x04	; 4
     600:	a0 e0       	ldi	r26, 0x00	; 0
     602:	b2 e0       	ldi	r27, 0x02	; 2
     604:	ee ee       	ldi	r30, 0xEE	; 238
     606:	f7 e2       	ldi	r31, 0x27	; 39
     608:	00 e0       	ldi	r16, 0x00	; 0
     60a:	0b bf       	out	0x3b, r16	; 59
     60c:	02 c0       	rjmp	.+4      	; 0x612 <__do_copy_data+0x14>
     60e:	07 90       	elpm	r0, Z+
     610:	0d 92       	st	X+, r0
     612:	a8 32       	cpi	r26, 0x28	; 40
     614:	b1 07       	cpc	r27, r17
     616:	d9 f7       	brne	.-10     	; 0x60e <__do_copy_data+0x10>

00000618 <__do_clear_bss>:
     618:	25 e0       	ldi	r18, 0x05	; 5
     61a:	a8 e2       	ldi	r26, 0x28	; 40
     61c:	b4 e0       	ldi	r27, 0x04	; 4
     61e:	01 c0       	rjmp	.+2      	; 0x622 <.do_clear_bss_start>

00000620 <.do_clear_bss_loop>:
     620:	1d 92       	st	X+, r1

00000622 <.do_clear_bss_start>:
     622:	ad 37       	cpi	r26, 0x7D	; 125
     624:	b2 07       	cpc	r27, r18
     626:	e1 f7       	brne	.-8      	; 0x620 <.do_clear_bss_loop>
     628:	12 d5       	rcall	.+2596   	; 0x104e <main>
     62a:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <_exit>

0000062e <__bad_interrupt>:
     62e:	e8 cc       	rjmp	.-1584   	; 0x0 <__vectors>

00000630 <CmdLineProcess>:
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
uint8_t
CmdLineProcess(char *pcCmdLine)
{
     630:	ef 92       	push	r14
     632:	ff 92       	push	r15
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	fc 01       	movw	r30, r24
    pcChar = pcCmdLine;

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
     63c:	80 81       	ld	r24, Z
     63e:	88 23       	and	r24, r24
     640:	09 f4       	brne	.+2      	; 0x644 <CmdLineProcess+0x14>
     642:	44 c0       	rjmp	.+136    	; 0x6cc <CmdLineProcess+0x9c>
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	c0 e0       	ldi	r28, 0x00	; 0
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
                {
                    g_ppcArgv[ui8Argc] = pcChar;
                    ui8Argc++;
                    bFindArg = false;
     648:	20 e0       	ldi	r18, 0x00	; 0
        // to search for the next argument.
        //
        if(*pcChar == ' ')
        {
            *pcChar = 0;
            bFindArg = true;
     64a:	31 e0       	ldi	r19, 0x01	; 1
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
     64c:	80 32       	cpi	r24, 0x20	; 32
     64e:	19 f4       	brne	.+6      	; 0x656 <CmdLineProcess+0x26>
        {
            *pcChar = 0;
     650:	10 82       	st	Z, r1
            bFindArg = true;
     652:	93 2f       	mov	r25, r19
     654:	0e c0       	rjmp	.+28     	; 0x672 <CmdLineProcess+0x42>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
     656:	99 23       	and	r25, r25
     658:	61 f0       	breq	.+24     	; 0x672 <CmdLineProcess+0x42>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
     65a:	c8 30       	cpi	r28, 0x08	; 8
     65c:	c8 f5       	brcc	.+114    	; 0x6d0 <CmdLineProcess+0xa0>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
     65e:	ac 2f       	mov	r26, r28
     660:	b0 e0       	ldi	r27, 0x00	; 0
     662:	aa 0f       	add	r26, r26
     664:	bb 1f       	adc	r27, r27
     666:	a8 5d       	subi	r26, 0xD8	; 216
     668:	bb 4f       	sbci	r27, 0xFB	; 251
     66a:	ed 93       	st	X+, r30
     66c:	fc 93       	st	X, r31
                    ui8Argc++;
     66e:	cf 5f       	subi	r28, 0xFF	; 255
                    bFindArg = false;
     670:	92 2f       	mov	r25, r18
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
     672:	31 96       	adiw	r30, 0x01	; 1
    pcChar = pcCmdLine;

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
     674:	80 81       	ld	r24, Z
     676:	81 11       	cpse	r24, r1
     678:	e9 cf       	rjmp	.-46     	; 0x64c <CmdLineProcess+0x1c>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
     67a:	cc 23       	and	r28, r28
     67c:	59 f1       	breq	.+86     	; 0x6d4 <CmdLineProcess+0xa4>

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
     67e:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <g_psCmdTable>
     682:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <g_psCmdTable+0x1>
     686:	61 15       	cp	r22, r1
     688:	71 05       	cpc	r23, r1
     68a:	31 f1       	breq	.+76     	; 0x6d8 <CmdLineProcess+0xa8>
            //
            // If this command entry command string matches argv[0], then call
            // the function for this command, passing the command line
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
     68c:	e0 90 28 04 	lds	r14, 0x0428	; 0x800428 <__data_end>
     690:	f0 90 29 04 	lds	r15, 0x0429	; 0x800429 <__data_end+0x1>
     694:	07 e0       	ldi	r16, 0x07	; 7
     696:	12 e0       	ldi	r17, 0x02	; 2
     698:	c7 01       	movw	r24, r14
     69a:	0e 94 6e 12 	call	0x24dc	; 0x24dc <strcmp>
     69e:	89 2b       	or	r24, r25
     6a0:	59 f4       	brne	.+22     	; 0x6b8 <CmdLineProcess+0x88>
            {

                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
     6a2:	d8 01       	movw	r26, r16
     6a4:	12 96       	adiw	r26, 0x02	; 2
     6a6:	ed 91       	ld	r30, X+
     6a8:	fc 91       	ld	r31, X
     6aa:	13 97       	sbiw	r26, 0x03	; 3
     6ac:	68 e2       	ldi	r22, 0x28	; 40
     6ae:	74 e0       	ldi	r23, 0x04	; 4
     6b0:	8c 2f       	mov	r24, r28
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	19 95       	eicall
     6b6:	11 c0       	rjmp	.+34     	; 0x6da <CmdLineProcess+0xaa>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
     6b8:	0a 5f       	subi	r16, 0xFA	; 250
     6ba:	1f 4f       	sbci	r17, 0xFF	; 255

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
     6bc:	f8 01       	movw	r30, r16
     6be:	60 81       	ld	r22, Z
     6c0:	71 81       	ldd	r23, Z+1	; 0x01
     6c2:	61 15       	cp	r22, r1
     6c4:	71 05       	cpc	r23, r1
     6c6:	41 f7       	brne	.-48     	; 0x698 <CmdLineProcess+0x68>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	07 c0       	rjmp	.+14     	; 0x6da <CmdLineProcess+0xaa>
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	05 c0       	rjmp	.+10     	; 0x6da <CmdLineProcess+0xaa>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	03 c0       	rjmp	.+6      	; 0x6da <CmdLineProcess+0xaa>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <CmdLineProcess+0xaa>
     6d8:	81 e0       	ldi	r24, 0x01	; 1
}
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	08 95       	ret

000006e6 <Cmd_help>:
			f -= c;
		}
	}
	*ptr = 0;
	return buf;
}
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	84 e6       	ldi	r24, 0x64	; 100
     6ec:	92 e0       	ldi	r25, 0x02	; 2
     6ee:	73 d6       	rcall	.+3302   	; 0x13d6 <usart0_send_string>
     6f0:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <g_psCmdTable>
     6f4:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <g_psCmdTable+0x1>
     6f8:	00 97       	sbiw	r24, 0x00	; 0
     6fa:	71 f0       	breq	.+28     	; 0x718 <Cmd_help+0x32>
     6fc:	c7 e0       	ldi	r28, 0x07	; 7
     6fe:	d2 e0       	ldi	r29, 0x02	; 2
     700:	6a d6       	rcall	.+3284   	; 0x13d6 <usart0_send_string>
     702:	8c 81       	ldd	r24, Y+4	; 0x04
     704:	9d 81       	ldd	r25, Y+5	; 0x05
     706:	67 d6       	rcall	.+3278   	; 0x13d6 <usart0_send_string>
     708:	84 ed       	ldi	r24, 0xD4	; 212
     70a:	92 e0       	ldi	r25, 0x02	; 2
     70c:	64 d6       	rcall	.+3272   	; 0x13d6 <usart0_send_string>
     70e:	26 96       	adiw	r28, 0x06	; 6
     710:	88 81       	ld	r24, Y
     712:	99 81       	ldd	r25, Y+1	; 0x01
     714:	00 97       	sbiw	r24, 0x00	; 0
     716:	a1 f7       	brne	.-24     	; 0x700 <Cmd_help+0x1a>
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <Cmd_get_current>:
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	82 30       	cpi	r24, 0x02	; 2
     728:	91 05       	cpc	r25, r1
     72a:	0c f4       	brge	.+2      	; 0x72e <Cmd_get_current+0xc>
     72c:	41 c0       	rjmp	.+130    	; 0x7b0 <Cmd_get_current+0x8e>
     72e:	03 97       	sbiw	r24, 0x03	; 3
     730:	0c f0       	brlt	.+2      	; 0x734 <Cmd_get_current+0x12>
     732:	41 c0       	rjmp	.+130    	; 0x7b6 <Cmd_get_current+0x94>
     734:	fb 01       	movw	r30, r22
     736:	c2 81       	ldd	r28, Z+2	; 0x02
     738:	d3 81       	ldd	r29, Z+3	; 0x03
     73a:	6c e7       	ldi	r22, 0x7C	; 124
     73c:	72 e0       	ldi	r23, 0x02	; 2
     73e:	ce 01       	movw	r24, r28
     740:	0e 94 6e 12 	call	0x24dc	; 0x24dc <strcmp>
     744:	89 2b       	or	r24, r25
     746:	a1 f4       	brne	.+40     	; 0x770 <Cmd_get_current+0x4e>
     748:	e4 ee       	ldi	r30, 0xE4	; 228
     74a:	f4 e0       	ldi	r31, 0x04	; 4
     74c:	81 81       	ldd	r24, Z+1	; 0x01
     74e:	8f 93       	push	r24
     750:	80 81       	ld	r24, Z
     752:	8f 93       	push	r24
     754:	80 e8       	ldi	r24, 0x80	; 128
     756:	92 e0       	ldi	r25, 0x02	; 2
     758:	9f 93       	push	r25
     75a:	8f 93       	push	r24
     75c:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <UARTprintf>
     760:	86 e9       	ldi	r24, 0x96	; 150
     762:	92 e0       	ldi	r25, 0x02	; 2
     764:	38 d6       	rcall	.+3184   	; 0x13d6 <usart0_send_string>
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	1a c0       	rjmp	.+52     	; 0x7a4 <Cmd_get_current+0x82>
     770:	69 e9       	ldi	r22, 0x99	; 153
     772:	72 e0       	ldi	r23, 0x02	; 2
     774:	ce 01       	movw	r24, r28
     776:	0e 94 6e 12 	call	0x24dc	; 0x24dc <strcmp>
     77a:	89 2b       	or	r24, r25
     77c:	f9 f4       	brne	.+62     	; 0x7bc <Cmd_get_current+0x9a>
     77e:	e4 ee       	ldi	r30, 0xE4	; 228
     780:	f4 e0       	ldi	r31, 0x04	; 4
     782:	83 81       	ldd	r24, Z+3	; 0x03
     784:	8f 93       	push	r24
     786:	82 81       	ldd	r24, Z+2	; 0x02
     788:	8f 93       	push	r24
     78a:	8d e9       	ldi	r24, 0x9D	; 157
     78c:	92 e0       	ldi	r25, 0x02	; 2
     78e:	9f 93       	push	r25
     790:	8f 93       	push	r24
     792:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <UARTprintf>
     796:	86 e9       	ldi	r24, 0x96	; 150
     798:	92 e0       	ldi	r25, 0x02	; 2
     79a:	1d d6       	rcall	.+3130   	; 0x13d6 <usart0_send_string>
     79c:	0f 90       	pop	r0
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	0f 90       	pop	r0
     7a4:	84 ed       	ldi	r24, 0xD4	; 212
     7a6:	92 e0       	ldi	r25, 0x02	; 2
     7a8:	16 d6       	rcall	.+3116   	; 0x13d6 <usart0_send_string>
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	08 c0       	rjmp	.+16     	; 0x7c0 <Cmd_get_current+0x9e>
     7b0:	83 e0       	ldi	r24, 0x03	; 3
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	05 c0       	rjmp	.+10     	; 0x7c0 <Cmd_get_current+0x9e>
     7b6:	82 e0       	ldi	r24, 0x02	; 2
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <Cmd_get_current+0x9e>
     7bc:	84 e0       	ldi	r24, 0x04	; 4
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	08 95       	ret

000007c6 <Cmd_set_laser>:
     7c6:	8f 92       	push	r8
     7c8:	9f 92       	push	r9
     7ca:	af 92       	push	r10
     7cc:	bf 92       	push	r11
     7ce:	cf 92       	push	r12
     7d0:	df 92       	push	r13
     7d2:	ff 92       	push	r15
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	6c 01       	movw	r12, r24
     7de:	eb 01       	movw	r28, r22
     7e0:	8c 81       	ldd	r24, Y+4	; 0x04
     7e2:	9d 81       	ldd	r25, Y+5	; 0x05
     7e4:	0e 94 51 12 	call	0x24a2	; 0x24a2 <atoi>
     7e8:	f8 2e       	mov	r15, r24
     7ea:	8e 81       	ldd	r24, Y+6	; 0x06
     7ec:	9f 81       	ldd	r25, Y+7	; 0x07
     7ee:	0e 94 4e 12 	call	0x249c	; 0x249c <atof>
     7f2:	4b 01       	movw	r8, r22
     7f4:	5c 01       	movw	r10, r24
     7f6:	0a 81       	ldd	r16, Y+2	; 0x02
     7f8:	1b 81       	ldd	r17, Y+3	; 0x03
     7fa:	6c e7       	ldi	r22, 0x7C	; 124
     7fc:	72 e0       	ldi	r23, 0x02	; 2
     7fe:	c8 01       	movw	r24, r16
     800:	0e 94 6e 12 	call	0x24dc	; 0x24dc <strcmp>
     804:	ec 01       	movw	r28, r24
     806:	89 2b       	or	r24, r25
     808:	09 f0       	breq	.+2      	; 0x80c <Cmd_set_laser+0x46>
     80a:	49 c0       	rjmp	.+146    	; 0x89e <Cmd_set_laser+0xd8>
     80c:	f1 10       	cpse	r15, r1
     80e:	0b c0       	rjmp	.+22     	; 0x826 <Cmd_set_laser+0x60>
     810:	83 e0       	ldi	r24, 0x03	; 3
     812:	c8 16       	cp	r12, r24
     814:	d1 04       	cpc	r13, r1
     816:	0c f4       	brge	.+2      	; 0x81a <Cmd_set_laser+0x54>
     818:	93 c0       	rjmp	.+294    	; 0x940 <Cmd_set_laser+0x17a>
     81a:	84 e0       	ldi	r24, 0x04	; 4
     81c:	c8 16       	cp	r12, r24
     81e:	d1 04       	cpc	r13, r1
     820:	0c f0       	brlt	.+2      	; 0x824 <Cmd_set_laser+0x5e>
     822:	91 c0       	rjmp	.+290    	; 0x946 <Cmd_set_laser+0x180>
     824:	36 c0       	rjmp	.+108    	; 0x892 <Cmd_set_laser+0xcc>
     826:	8f ef       	ldi	r24, 0xFF	; 255
     828:	8f 0d       	add	r24, r15
     82a:	80 33       	cpi	r24, 0x30	; 48
     82c:	70 f5       	brcc	.+92     	; 0x88a <Cmd_set_laser+0xc4>
     82e:	84 e0       	ldi	r24, 0x04	; 4
     830:	c8 16       	cp	r12, r24
     832:	d1 04       	cpc	r13, r1
     834:	0c f4       	brge	.+2      	; 0x838 <Cmd_set_laser+0x72>
     836:	8a c0       	rjmp	.+276    	; 0x94c <Cmd_set_laser+0x186>
     838:	85 e0       	ldi	r24, 0x05	; 5
     83a:	c8 16       	cp	r12, r24
     83c:	d1 04       	cpc	r13, r1
     83e:	0c f0       	brlt	.+2      	; 0x842 <Cmd_set_laser+0x7c>
     840:	88 c0       	rjmp	.+272    	; 0x952 <Cmd_set_laser+0x18c>
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	a9 01       	movw	r20, r18
     848:	c5 01       	movw	r24, r10
     84a:	b4 01       	movw	r22, r8
     84c:	0e 94 4b 10 	call	0x2096	; 0x2096 <__cmpsf2>
     850:	88 23       	and	r24, r24
     852:	0c f4       	brge	.+2      	; 0x856 <Cmd_set_laser+0x90>
     854:	81 c0       	rjmp	.+258    	; 0x958 <Cmd_set_laser+0x192>
     856:	2d ec       	ldi	r18, 0xCD	; 205
     858:	3c ec       	ldi	r19, 0xCC	; 204
     85a:	4c e9       	ldi	r20, 0x9C	; 156
     85c:	50 e4       	ldi	r21, 0x40	; 64
     85e:	c5 01       	movw	r24, r10
     860:	b4 01       	movw	r22, r8
     862:	0e 94 95 11 	call	0x232a	; 0x232a <__gesf2>
     866:	18 16       	cp	r1, r24
     868:	0c f4       	brge	.+2      	; 0x86c <Cmd_set_laser+0xa6>
     86a:	79 c0       	rjmp	.+242    	; 0x95e <Cmd_set_laser+0x198>
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	48 ec       	ldi	r20, 0xC8	; 200
     872:	52 e4       	ldi	r21, 0x42	; 66
     874:	c5 01       	movw	r24, r10
     876:	b4 01       	movw	r22, r8
     878:	0e 94 99 11 	call	0x2332	; 0x2332 <__mulsf3>
     87c:	0e 94 b7 10 	call	0x216e	; 0x216e <__fixunssfsi>
     880:	70 93 b3 04 	sts	0x04B3, r23	; 0x8004b3 <s_Command+0x4>
     884:	60 93 b2 04 	sts	0x04B2, r22	; 0x8004b2 <s_Command+0x3>
     888:	04 c0       	rjmp	.+8      	; 0x892 <Cmd_set_laser+0xcc>
     88a:	80 e3       	ldi	r24, 0x30	; 48
     88c:	8f 15       	cp	r24, r15
     88e:	08 f4       	brcc	.+2      	; 0x892 <Cmd_set_laser+0xcc>
     890:	69 c0       	rjmp	.+210    	; 0x964 <Cmd_set_laser+0x19e>
     892:	ef ea       	ldi	r30, 0xAF	; 175
     894:	f4 e0       	ldi	r31, 0x04	; 4
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	81 83       	std	Z+1, r24	; 0x01
     89a:	f0 82       	st	Z, r15
     89c:	7d c0       	rjmp	.+250    	; 0x998 <Cmd_set_laser+0x1d2>
     89e:	69 e9       	ldi	r22, 0x99	; 153
     8a0:	72 e0       	ldi	r23, 0x02	; 2
     8a2:	c8 01       	movw	r24, r16
     8a4:	0e 94 6e 12 	call	0x24dc	; 0x24dc <strcmp>
     8a8:	ec 01       	movw	r28, r24
     8aa:	89 2b       	or	r24, r25
     8ac:	09 f0       	breq	.+2      	; 0x8b0 <Cmd_set_laser+0xea>
     8ae:	5d c0       	rjmp	.+186    	; 0x96a <Cmd_set_laser+0x1a4>
     8b0:	f1 10       	cpse	r15, r1
     8b2:	0b c0       	rjmp	.+22     	; 0x8ca <Cmd_set_laser+0x104>
     8b4:	83 e0       	ldi	r24, 0x03	; 3
     8b6:	c8 16       	cp	r12, r24
     8b8:	d1 04       	cpc	r13, r1
     8ba:	0c f4       	brge	.+2      	; 0x8be <Cmd_set_laser+0xf8>
     8bc:	59 c0       	rjmp	.+178    	; 0x970 <Cmd_set_laser+0x1aa>
     8be:	84 e0       	ldi	r24, 0x04	; 4
     8c0:	c8 16       	cp	r12, r24
     8c2:	d1 04       	cpc	r13, r1
     8c4:	0c f0       	brlt	.+2      	; 0x8c8 <Cmd_set_laser+0x102>
     8c6:	57 c0       	rjmp	.+174    	; 0x976 <Cmd_set_laser+0x1b0>
     8c8:	35 c0       	rjmp	.+106    	; 0x934 <Cmd_set_laser+0x16e>
     8ca:	8f ef       	ldi	r24, 0xFF	; 255
     8cc:	8f 0d       	add	r24, r15
     8ce:	84 30       	cpi	r24, 0x04	; 4
     8d0:	70 f5       	brcc	.+92     	; 0x92e <Cmd_set_laser+0x168>
     8d2:	84 e0       	ldi	r24, 0x04	; 4
     8d4:	c8 16       	cp	r12, r24
     8d6:	d1 04       	cpc	r13, r1
     8d8:	0c f4       	brge	.+2      	; 0x8dc <Cmd_set_laser+0x116>
     8da:	50 c0       	rjmp	.+160    	; 0x97c <Cmd_set_laser+0x1b6>
     8dc:	85 e0       	ldi	r24, 0x05	; 5
     8de:	c8 16       	cp	r12, r24
     8e0:	d1 04       	cpc	r13, r1
     8e2:	0c f0       	brlt	.+2      	; 0x8e6 <Cmd_set_laser+0x120>
     8e4:	4e c0       	rjmp	.+156    	; 0x982 <Cmd_set_laser+0x1bc>
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	a9 01       	movw	r20, r18
     8ec:	c5 01       	movw	r24, r10
     8ee:	b4 01       	movw	r22, r8
     8f0:	0e 94 4b 10 	call	0x2096	; 0x2096 <__cmpsf2>
     8f4:	88 23       	and	r24, r24
     8f6:	0c f4       	brge	.+2      	; 0x8fa <Cmd_set_laser+0x134>
     8f8:	47 c0       	rjmp	.+142    	; 0x988 <Cmd_set_laser+0x1c2>
     8fa:	2d ec       	ldi	r18, 0xCD	; 205
     8fc:	3c ec       	ldi	r19, 0xCC	; 204
     8fe:	4c e9       	ldi	r20, 0x9C	; 156
     900:	50 e4       	ldi	r21, 0x40	; 64
     902:	c5 01       	movw	r24, r10
     904:	b4 01       	movw	r22, r8
     906:	0e 94 95 11 	call	0x232a	; 0x232a <__gesf2>
     90a:	18 16       	cp	r1, r24
     90c:	0c f4       	brge	.+2      	; 0x910 <Cmd_set_laser+0x14a>
     90e:	3f c0       	rjmp	.+126    	; 0x98e <Cmd_set_laser+0x1c8>
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	48 ec       	ldi	r20, 0xC8	; 200
     916:	52 e4       	ldi	r21, 0x42	; 66
     918:	c5 01       	movw	r24, r10
     91a:	b4 01       	movw	r22, r8
     91c:	0e 94 99 11 	call	0x2332	; 0x2332 <__mulsf3>
     920:	0e 94 b7 10 	call	0x216e	; 0x216e <__fixunssfsi>
     924:	70 93 b8 04 	sts	0x04B8, r23	; 0x8004b8 <s_Command+0x9>
     928:	60 93 b7 04 	sts	0x04B7, r22	; 0x8004b7 <s_Command+0x8>
     92c:	03 c0       	rjmp	.+6      	; 0x934 <Cmd_set_laser+0x16e>
     92e:	84 e0       	ldi	r24, 0x04	; 4
     930:	8f 15       	cp	r24, r15
     932:	80 f1       	brcs	.+96     	; 0x994 <Cmd_set_laser+0x1ce>
     934:	ef ea       	ldi	r30, 0xAF	; 175
     936:	f4 e0       	ldi	r31, 0x04	; 4
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	86 83       	std	Z+6, r24	; 0x06
     93c:	f5 82       	std	Z+5, r15	; 0x05
     93e:	2c c0       	rjmp	.+88     	; 0x998 <Cmd_set_laser+0x1d2>
     940:	c3 e0       	ldi	r28, 0x03	; 3
     942:	d0 e0       	ldi	r29, 0x00	; 0
     944:	29 c0       	rjmp	.+82     	; 0x998 <Cmd_set_laser+0x1d2>
     946:	c2 e0       	ldi	r28, 0x02	; 2
     948:	d0 e0       	ldi	r29, 0x00	; 0
     94a:	26 c0       	rjmp	.+76     	; 0x998 <Cmd_set_laser+0x1d2>
     94c:	c3 e0       	ldi	r28, 0x03	; 3
     94e:	d0 e0       	ldi	r29, 0x00	; 0
     950:	23 c0       	rjmp	.+70     	; 0x998 <Cmd_set_laser+0x1d2>
     952:	c2 e0       	ldi	r28, 0x02	; 2
     954:	d0 e0       	ldi	r29, 0x00	; 0
     956:	20 c0       	rjmp	.+64     	; 0x998 <Cmd_set_laser+0x1d2>
     958:	c4 e0       	ldi	r28, 0x04	; 4
     95a:	d0 e0       	ldi	r29, 0x00	; 0
     95c:	1d c0       	rjmp	.+58     	; 0x998 <Cmd_set_laser+0x1d2>
     95e:	c4 e0       	ldi	r28, 0x04	; 4
     960:	d0 e0       	ldi	r29, 0x00	; 0
     962:	1a c0       	rjmp	.+52     	; 0x998 <Cmd_set_laser+0x1d2>
     964:	c4 e0       	ldi	r28, 0x04	; 4
     966:	d0 e0       	ldi	r29, 0x00	; 0
     968:	17 c0       	rjmp	.+46     	; 0x998 <Cmd_set_laser+0x1d2>
     96a:	c4 e0       	ldi	r28, 0x04	; 4
     96c:	d0 e0       	ldi	r29, 0x00	; 0
     96e:	14 c0       	rjmp	.+40     	; 0x998 <Cmd_set_laser+0x1d2>
     970:	c3 e0       	ldi	r28, 0x03	; 3
     972:	d0 e0       	ldi	r29, 0x00	; 0
     974:	11 c0       	rjmp	.+34     	; 0x998 <Cmd_set_laser+0x1d2>
     976:	c2 e0       	ldi	r28, 0x02	; 2
     978:	d0 e0       	ldi	r29, 0x00	; 0
     97a:	0e c0       	rjmp	.+28     	; 0x998 <Cmd_set_laser+0x1d2>
     97c:	c3 e0       	ldi	r28, 0x03	; 3
     97e:	d0 e0       	ldi	r29, 0x00	; 0
     980:	0b c0       	rjmp	.+22     	; 0x998 <Cmd_set_laser+0x1d2>
     982:	c2 e0       	ldi	r28, 0x02	; 2
     984:	d0 e0       	ldi	r29, 0x00	; 0
     986:	08 c0       	rjmp	.+16     	; 0x998 <Cmd_set_laser+0x1d2>
     988:	c4 e0       	ldi	r28, 0x04	; 4
     98a:	d0 e0       	ldi	r29, 0x00	; 0
     98c:	05 c0       	rjmp	.+10     	; 0x998 <Cmd_set_laser+0x1d2>
     98e:	c4 e0       	ldi	r28, 0x04	; 4
     990:	d0 e0       	ldi	r29, 0x00	; 0
     992:	02 c0       	rjmp	.+4      	; 0x998 <Cmd_set_laser+0x1d2>
     994:	c4 e0       	ldi	r28, 0x04	; 4
     996:	d0 e0       	ldi	r29, 0x00	; 0
     998:	ce 01       	movw	r24, r28
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	1f 91       	pop	r17
     9a0:	0f 91       	pop	r16
     9a2:	ff 90       	pop	r15
     9a4:	df 90       	pop	r13
     9a6:	cf 90       	pop	r12
     9a8:	bf 90       	pop	r11
     9aa:	af 90       	pop	r10
     9ac:	9f 90       	pop	r9
     9ae:	8f 90       	pop	r8
     9b0:	08 95       	ret

000009b2 <command_task_update>:
     9b2:	cf 93       	push	r28
     9b4:	47 c0       	rjmp	.+142    	; 0xa44 <command_task_update+0x92>
     9b6:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <p_CommandRingBuffer>
     9ba:	90 91 5c 04 	lds	r25, 0x045C	; 0x80045c <p_CommandRingBuffer+0x1>
     9be:	c4 d4       	rcall	.+2440   	; 0x1348 <rbuffer_remove>
     9c0:	c8 2f       	mov	r28, r24
     9c2:	f6 d4       	rcall	.+2540   	; 0x13b0 <usart0_send_char>
     9c4:	cd 30       	cpi	r28, 0x0D	; 13
     9c6:	11 f0       	breq	.+4      	; 0x9cc <command_task_update+0x1a>
     9c8:	ca 30       	cpi	r28, 0x0A	; 10
     9ca:	09 f5       	brne	.+66     	; 0xa0e <command_task_update+0x5c>
     9cc:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <s_commandBufferIndex>
     9d0:	88 23       	and	r24, r24
     9d2:	c9 f0       	breq	.+50     	; 0xa06 <command_task_update+0x54>
     9d4:	e8 2f       	mov	r30, r24
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	e5 5c       	subi	r30, 0xC5	; 197
     9da:	fb 4f       	sbci	r31, 0xFB	; 251
     9dc:	10 82       	st	Z, r1
     9de:	8f 5f       	subi	r24, 0xFF	; 255
     9e0:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <s_commandBufferIndex>
     9e4:	8b e3       	ldi	r24, 0x3B	; 59
     9e6:	94 e0       	ldi	r25, 0x04	; 4
     9e8:	23 de       	rcall	.-954    	; 0x630 <CmdLineProcess>
     9ea:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <s_commandBufferIndex>
     9ee:	88 0f       	add	r24, r24
     9f0:	99 0b       	sbc	r25, r25
     9f2:	fc 01       	movw	r30, r24
     9f4:	e1 5e       	subi	r30, 0xE1	; 225
     9f6:	fd 4f       	sbci	r31, 0xFD	; 253
     9f8:	80 81       	ld	r24, Z
     9fa:	91 81       	ldd	r25, Z+1	; 0x01
     9fc:	ec d4       	rcall	.+2520   	; 0x13d6 <usart0_send_string>
     9fe:	85 eb       	ldi	r24, 0xB5	; 181
     a00:	92 e0       	ldi	r25, 0x02	; 2
     a02:	e9 d4       	rcall	.+2514   	; 0x13d6 <usart0_send_string>
     a04:	1f c0       	rjmp	.+62     	; 0xa44 <command_task_update+0x92>
     a06:	85 eb       	ldi	r24, 0xB5	; 181
     a08:	92 e0       	ldi	r25, 0x02	; 2
     a0a:	e5 d4       	rcall	.+2506   	; 0x13d6 <usart0_send_string>
     a0c:	1b c0       	rjmp	.+54     	; 0xa44 <command_task_update+0x92>
     a0e:	c8 30       	cpi	r28, 0x08	; 8
     a10:	11 f0       	breq	.+4      	; 0xa16 <command_task_update+0x64>
     a12:	cf 37       	cpi	r28, 0x7F	; 127
     a14:	41 f4       	brne	.+16     	; 0xa26 <command_task_update+0x74>
     a16:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <s_commandBufferIndex>
     a1a:	88 23       	and	r24, r24
     a1c:	99 f0       	breq	.+38     	; 0xa44 <command_task_update+0x92>
     a1e:	81 50       	subi	r24, 0x01	; 1
     a20:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <s_commandBufferIndex>
     a24:	0f c0       	rjmp	.+30     	; 0xa44 <command_task_update+0x92>
     a26:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <s_commandBufferIndex>
     a2a:	e8 2f       	mov	r30, r24
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	e5 5c       	subi	r30, 0xC5	; 197
     a30:	fb 4f       	sbci	r31, 0xFB	; 251
     a32:	c0 83       	st	Z, r28
     a34:	8f 5f       	subi	r24, 0xFF	; 255
     a36:	80 32       	cpi	r24, 0x20	; 32
     a38:	18 f4       	brcc	.+6      	; 0xa40 <command_task_update+0x8e>
     a3a:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <s_commandBufferIndex>
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <command_task_update+0x92>
     a40:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <s_commandBufferIndex>
     a44:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <p_CommandRingBuffer>
     a48:	90 91 5c 04 	lds	r25, 0x045C	; 0x80045c <p_CommandRingBuffer+0x1>
     a4c:	61 d4       	rcall	.+2242   	; 0x1310 <rbuffer_empty>
     a4e:	88 23       	and	r24, r24
     a50:	09 f4       	brne	.+2      	; 0xa54 <command_task_update+0xa2>
     a52:	b1 cf       	rjmp	.-158    	; 0x9b6 <command_task_update+0x4>
     a54:	cf 91       	pop	r28
     a56:	08 95       	ret

00000a58 <command_send_splash>:
}



void	command_send_splash(void)
{
     a58:	ef 92       	push	r14
     a5a:	ff 92       	push	r15
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
     a68:	a4 97       	sbiw	r28, 0x24	; 36
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	f8 94       	cli
     a6e:	de bf       	out	0x3e, r29	; 62
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	cd bf       	out	0x3d, r28	; 61
	PGM_P cmd_line_table[] PROGMEM =
     a74:	84 e2       	ldi	r24, 0x24	; 36
     a76:	e0 e4       	ldi	r30, 0x40	; 64
     a78:	f2 e0       	ldi	r31, 0x02	; 2
     a7a:	de 01       	movw	r26, r28
     a7c:	11 96       	adiw	r26, 0x01	; 1
     a7e:	01 90       	ld	r0, Z+
     a80:	0d 92       	st	X+, r0
     a82:	8a 95       	dec	r24
     a84:	e1 f7       	brne	.-8      	; 0xa7e <command_send_splash+0x26>
		cmd_line_1, cmd_line_2, cmd_line_3, cmd_line_4, cmd_line_5, cmd_line_6,
		cmd_line_7, cmd_line_8, cmd_line_9, cmd_line_10, cmd_line_11, cmd_line_12,
		cmd_line_13, cmd_line_14, cmd_line_15, cmd_line_16, cmd_line_17, cmd_line_18
	};
	
	usart0_send_string("\r\n");
     a86:	84 ed       	ldi	r24, 0xD4	; 212
     a88:	92 e0       	ldi	r25, 0x02	; 2
     a8a:	a5 d4       	rcall	.+2378   	; 0x13d6 <usart0_send_string>
     a8c:	8e 01       	movw	r16, r28
     a8e:	0f 5f       	subi	r16, 0xFF	; 255
     a90:	1f 4f       	sbci	r17, 0xFF	; 255
     a92:	7e 01       	movw	r14, r28
     a94:	85 e2       	ldi	r24, 0x25	; 37
     a96:	e8 0e       	add	r14, r24
     a98:	f1 1c       	adc	r15, r1
	
	for (unsigned char i = 0; i < 18; i++)	usart0_send_string_P(cmd_line_table[i]);
     a9a:	f8 01       	movw	r30, r16
     a9c:	81 91       	ld	r24, Z+
     a9e:	91 91       	ld	r25, Z+
     aa0:	8f 01       	movw	r16, r30
     aa2:	bf d4       	rcall	.+2430   	; 0x1422 <usart0_send_string_P>
     aa4:	0e 15       	cp	r16, r14
     aa6:	1f 05       	cpc	r17, r15
     aa8:	c1 f7       	brne	.-16     	; 0xa9a <command_send_splash+0x42>
	usart0_send_string("\r\n> ");
     aaa:	83 eb       	ldi	r24, 0xB3	; 179
     aac:	92 e0       	ldi	r25, 0x02	; 2
     aae:	93 d4       	rcall	.+2342   	; 0x13d6 <usart0_send_string>
     ab0:	a4 96       	adiw	r28, 0x24	; 36
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	f8 94       	cli
     ab6:	de bf       	out	0x3e, r29	; 62
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	cd bf       	out	0x3d, r28	; 61
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	08 95       	ret

00000aca <command_init>:
	}
};

void	command_init(void)
{
	usart0_init();
     aca:	53 d4       	rcall	.+2214   	; 0x1372 <usart0_init>
	p_CommandRingBuffer = uart_get_uart0_rx_buffer_address();
     acc:	bb d4       	rcall	.+2422   	; 0x1444 <uart_get_uart0_rx_buffer_address>
     ace:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <p_CommandRingBuffer+0x1>
     ad2:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <p_CommandRingBuffer>
     ad6:	80 e2       	ldi	r24, 0x20	; 32
	memset((void *)s_commandBuffer, 0, sizeof(s_commandBuffer));
     ad8:	eb e3       	ldi	r30, 0x3B	; 59
     ada:	f4 e0       	ldi	r31, 0x04	; 4
     adc:	df 01       	movw	r26, r30
     ade:	1d 92       	st	X+, r1
     ae0:	8a 95       	dec	r24
     ae2:	e9 f7       	brne	.-6      	; 0xade <command_init+0x14>
     ae4:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <s_commandBufferIndex>
	s_commandBufferIndex = 0;
     ae8:	88 eb       	ldi	r24, 0xB8	; 184
	usart0_send_string("LASER DIODE FIRMWARE V1.0.0 \r\n");
     aea:	92 e0       	ldi	r25, 0x02	; 2
     aec:	74 d4       	rcall	.+2280   	; 0x13d6 <usart0_send_string>
	command_send_splash();
     aee:	b4 cf       	rjmp	.-152    	; 0xa58 <command_send_splash>
     af0:	08 95       	ret

00000af2 <command_create_task>:
     af2:	eb df       	rcall	.-42     	; 0xaca <command_init>


void	command_create_task(void)
{
	command_init();
	SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle, &s_CommandTaskContext.taskProperty);
     af4:	61 e0       	ldi	r22, 0x01	; 1
     af6:	72 e0       	ldi	r23, 0x02	; 2
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	92 e0       	ldi	r25, 0x02	; 2
     afc:	0c 94 c3 0e 	jmp	0x1d86	; 0x1d86 <SCH_TASK_CreateTask>
     b00:	08 95       	ret

00000b02 <control_init>:


void control_init(void)
{
	// Internal Laser
	DDRA |= (1<<SW7_PIN);
     b02:	0f 9a       	sbi	0x01, 7	; 1
	DDRB |= (1<<SW2_PIN)|(1<<SW10_PIN)|(1<<SW18_PIN)|(1<<SW35_PIN)|(1<<SW43_PIN);
     b04:	84 b1       	in	r24, 0x04	; 4
     b06:	81 6f       	ori	r24, 0xF1	; 241
     b08:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1<<SW30_PIN)|(1<<SW37_PIN)|(1<<SW38_PIN)|(1<<SW45_PIN)|(1<<SW46_PIN);
     b0a:	87 b1       	in	r24, 0x07	; 7
     b0c:	88 6f       	ori	r24, 0xF8	; 248
     b0e:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1<<SW8_PIN)|(1<<SW24_PIN)|(1<<SW32_PIN)|(1<<SW40_PIN)|(1<<SW41_PIN);
     b10:	8a b1       	in	r24, 0x0a	; 10
     b12:	88 6f       	ori	r24, 0xF8	; 248
     b14:	8a b9       	out	0x0a, r24	; 10
	DDRE |= (1<<SW4_PIN)|(1<<SW5_PIN)|(1<<SW12_PIN)|(1<<SW13_PIN)|(1<<SW20_PIN)|(1<<SW21_PIN);
     b16:	8d b1       	in	r24, 0x0d	; 13
     b18:	8c 6f       	ori	r24, 0xFC	; 252
     b1a:	8d b9       	out	0x0d, r24	; 13
	DDRG |= (1<<SW15_PIN)|(1<<SW16_PIN)|(1<<SW29_PIN)|(1<<SW34_PIN)|(1<<SW42_PIN);
     b1c:	83 b3       	in	r24, 0x13	; 19
     b1e:	8d 63       	ori	r24, 0x3D	; 61
     b20:	83 bb       	out	0x13, r24	; 19
	DDRH |= (1<<SW3_PIN)|(1<<SW11_PIN)|(1<<SW19_PIN)|(1<<SW26_PIN)|(1<<SW27_PIN)|(1<<SW28_PIN)|(1<<SW36_PIN)|(1<<SW44_PIN);
     b22:	e1 e0       	ldi	r30, 0x01	; 1
     b24:	f1 e0       	ldi	r31, 0x01	; 1
     b26:	80 81       	ld	r24, Z
     b28:	8f ef       	ldi	r24, 0xFF	; 255
     b2a:	80 83       	st	Z, r24
	DDRJ |= (1<<SW6_PIN)|(1<<SW14_PIN)|(1<<SW22_PIN)|(1<<SW23_PIN)|(1<<SW31_PIN)|(1<<SW39_PIN)|(1<<SW47_PIN);
     b2c:	e4 e0       	ldi	r30, 0x04	; 4
     b2e:	f1 e0       	ldi	r31, 0x01	; 1
     b30:	80 81       	ld	r24, Z
     b32:	8f 67       	ori	r24, 0x7F	; 127
     b34:	80 83       	st	Z, r24
	DDRL |= (1<<SW0_PIN)|(1<<SW1_PIN)|(1<<SW9_PIN)|(1<<SW17_PIN)|(1<<SW25_PIN)|(1<<SW33_PIN);
     b36:	ea e0       	ldi	r30, 0x0A	; 10
     b38:	f1 e0       	ldi	r31, 0x01	; 1
     b3a:	80 81       	ld	r24, Z
     b3c:	83 6f       	ori	r24, 0xF3	; 243
     b3e:	80 83       	st	Z, r24
	
	// External Laser
	DDRC |= (1<<SWEXT1_PIN)|(1<<SWEXT2_PIN)|(1<<SWEXT3_PIN);
     b40:	87 b1       	in	r24, 0x07	; 7
     b42:	87 60       	ori	r24, 0x07	; 7
     b44:	87 b9       	out	0x07, r24	; 7
	DDRG |= (1<<SWEXT0_PIN);
     b46:	99 9a       	sbi	0x13, 1	; 19
	
	DAC_Init();
     b48:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <DAC_Init>
     b4c:	08 95       	ret

00000b4e <sw_int_handle>:
}

void sw_int_handle(uint8_t sw, sw_state_t sw_state)
{
	if(!sw) return;
     b4e:	88 23       	and	r24, r24
     b50:	09 f4       	brne	.+2      	; 0xb54 <sw_int_handle+0x6>
     b52:	45 c1       	rjmp	.+650    	; 0xdde <sw_int_handle+0x290>
	sw--;
	switch(PortMap[sw])
     b54:	81 50       	subi	r24, 0x01	; 1
     b56:	28 2f       	mov	r18, r24
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	f9 01       	movw	r30, r18
     b5c:	ef 51       	subi	r30, 0x1F	; 31
     b5e:	fc 4f       	sbci	r31, 0xFC	; 252
     b60:	80 81       	ld	r24, Z
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	89 30       	cpi	r24, 0x09	; 9
     b66:	91 05       	cpc	r25, r1
     b68:	08 f0       	brcs	.+2      	; 0xb6c <sw_int_handle+0x1e>
     b6a:	39 c1       	rjmp	.+626    	; 0xdde <sw_int_handle+0x290>
     b6c:	fc 01       	movw	r30, r24
     b6e:	88 27       	eor	r24, r24
     b70:	ee 58       	subi	r30, 0x8E	; 142
     b72:	ff 4f       	sbci	r31, 0xFF	; 255
     b74:	8f 4f       	sbci	r24, 0xFF	; 255
     b76:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__tablejump2__>
	{
		case PORT_A: PORTA = (sw_state)? (PORTA|(1<<PinMap[sw])):(PORTA&~(1<<PinMap[sw]));break;
     b7a:	66 23       	and	r22, r22
     b7c:	71 f0       	breq	.+28     	; 0xb9a <sw_int_handle+0x4c>
     b7e:	42 b1       	in	r20, 0x02	; 2
     b80:	f9 01       	movw	r30, r18
     b82:	ef 54       	subi	r30, 0x4F	; 79
     b84:	fc 4f       	sbci	r31, 0xFC	; 252
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	00 80       	ld	r0, Z
     b8c:	02 c0       	rjmp	.+4      	; 0xb92 <sw_int_handle+0x44>
     b8e:	88 0f       	add	r24, r24
     b90:	99 1f       	adc	r25, r25
     b92:	0a 94       	dec	r0
     b94:	e2 f7       	brpl	.-8      	; 0xb8e <sw_int_handle+0x40>
     b96:	84 2b       	or	r24, r20
     b98:	0f c0       	rjmp	.+30     	; 0xbb8 <sw_int_handle+0x6a>
     b9a:	92 b1       	in	r25, 0x02	; 2
     b9c:	f9 01       	movw	r30, r18
     b9e:	ef 54       	subi	r30, 0x4F	; 79
     ba0:	fc 4f       	sbci	r31, 0xFC	; 252
     ba2:	21 e0       	ldi	r18, 0x01	; 1
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	00 80       	ld	r0, Z
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <sw_int_handle+0x60>
     baa:	22 0f       	add	r18, r18
     bac:	33 1f       	adc	r19, r19
     bae:	0a 94       	dec	r0
     bb0:	e2 f7       	brpl	.-8      	; 0xbaa <sw_int_handle+0x5c>
     bb2:	82 2f       	mov	r24, r18
     bb4:	80 95       	com	r24
     bb6:	89 23       	and	r24, r25
     bb8:	82 b9       	out	0x02, r24	; 2
     bba:	08 95       	ret
		case PORT_B: PORTB = (sw_state)? (PORTB|(1<<PinMap[sw])):(PORTB&~(1<<PinMap[sw]));break;
     bbc:	66 23       	and	r22, r22
     bbe:	71 f0       	breq	.+28     	; 0xbdc <sw_int_handle+0x8e>
     bc0:	45 b1       	in	r20, 0x05	; 5
     bc2:	f9 01       	movw	r30, r18
     bc4:	ef 54       	subi	r30, 0x4F	; 79
     bc6:	fc 4f       	sbci	r31, 0xFC	; 252
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	00 80       	ld	r0, Z
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <sw_int_handle+0x86>
     bd0:	88 0f       	add	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	0a 94       	dec	r0
     bd6:	e2 f7       	brpl	.-8      	; 0xbd0 <sw_int_handle+0x82>
     bd8:	84 2b       	or	r24, r20
     bda:	0f c0       	rjmp	.+30     	; 0xbfa <sw_int_handle+0xac>
     bdc:	95 b1       	in	r25, 0x05	; 5
     bde:	f9 01       	movw	r30, r18
     be0:	ef 54       	subi	r30, 0x4F	; 79
     be2:	fc 4f       	sbci	r31, 0xFC	; 252
     be4:	21 e0       	ldi	r18, 0x01	; 1
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	00 80       	ld	r0, Z
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <sw_int_handle+0xa2>
     bec:	22 0f       	add	r18, r18
     bee:	33 1f       	adc	r19, r19
     bf0:	0a 94       	dec	r0
     bf2:	e2 f7       	brpl	.-8      	; 0xbec <sw_int_handle+0x9e>
     bf4:	82 2f       	mov	r24, r18
     bf6:	80 95       	com	r24
     bf8:	89 23       	and	r24, r25
     bfa:	85 b9       	out	0x05, r24	; 5
     bfc:	08 95       	ret
		case PORT_C: PORTC = (sw_state)? (PORTC|(1<<PinMap[sw])):(PORTC&~(1<<PinMap[sw]));break;
     bfe:	66 23       	and	r22, r22
     c00:	71 f0       	breq	.+28     	; 0xc1e <sw_int_handle+0xd0>
     c02:	48 b1       	in	r20, 0x08	; 8
     c04:	f9 01       	movw	r30, r18
     c06:	ef 54       	subi	r30, 0x4F	; 79
     c08:	fc 4f       	sbci	r31, 0xFC	; 252
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	00 80       	ld	r0, Z
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <sw_int_handle+0xc8>
     c12:	88 0f       	add	r24, r24
     c14:	99 1f       	adc	r25, r25
     c16:	0a 94       	dec	r0
     c18:	e2 f7       	brpl	.-8      	; 0xc12 <sw_int_handle+0xc4>
     c1a:	84 2b       	or	r24, r20
     c1c:	0f c0       	rjmp	.+30     	; 0xc3c <sw_int_handle+0xee>
     c1e:	98 b1       	in	r25, 0x08	; 8
     c20:	f9 01       	movw	r30, r18
     c22:	ef 54       	subi	r30, 0x4F	; 79
     c24:	fc 4f       	sbci	r31, 0xFC	; 252
     c26:	21 e0       	ldi	r18, 0x01	; 1
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	00 80       	ld	r0, Z
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <sw_int_handle+0xe4>
     c2e:	22 0f       	add	r18, r18
     c30:	33 1f       	adc	r19, r19
     c32:	0a 94       	dec	r0
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <sw_int_handle+0xe0>
     c36:	82 2f       	mov	r24, r18
     c38:	80 95       	com	r24
     c3a:	89 23       	and	r24, r25
     c3c:	88 b9       	out	0x08, r24	; 8
     c3e:	08 95       	ret
		case PORT_D: PORTD = (sw_state)? (PORTD|(1<<PinMap[sw])):(PORTD&~(1<<PinMap[sw]));break;
     c40:	66 23       	and	r22, r22
     c42:	71 f0       	breq	.+28     	; 0xc60 <sw_int_handle+0x112>
     c44:	4b b1       	in	r20, 0x0b	; 11
     c46:	f9 01       	movw	r30, r18
     c48:	ef 54       	subi	r30, 0x4F	; 79
     c4a:	fc 4f       	sbci	r31, 0xFC	; 252
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	00 80       	ld	r0, Z
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <sw_int_handle+0x10a>
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	0a 94       	dec	r0
     c5a:	e2 f7       	brpl	.-8      	; 0xc54 <sw_int_handle+0x106>
     c5c:	84 2b       	or	r24, r20
     c5e:	0f c0       	rjmp	.+30     	; 0xc7e <sw_int_handle+0x130>
     c60:	9b b1       	in	r25, 0x0b	; 11
     c62:	f9 01       	movw	r30, r18
     c64:	ef 54       	subi	r30, 0x4F	; 79
     c66:	fc 4f       	sbci	r31, 0xFC	; 252
     c68:	21 e0       	ldi	r18, 0x01	; 1
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	00 80       	ld	r0, Z
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <sw_int_handle+0x126>
     c70:	22 0f       	add	r18, r18
     c72:	33 1f       	adc	r19, r19
     c74:	0a 94       	dec	r0
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <sw_int_handle+0x122>
     c78:	82 2f       	mov	r24, r18
     c7a:	80 95       	com	r24
     c7c:	89 23       	and	r24, r25
     c7e:	8b b9       	out	0x0b, r24	; 11
     c80:	08 95       	ret
		case PORT_E: PORTE = (sw_state)? (PORTE|(1<<PinMap[sw])):(PORTE&~(1<<PinMap[sw]));break;
     c82:	66 23       	and	r22, r22
     c84:	71 f0       	breq	.+28     	; 0xca2 <sw_int_handle+0x154>
     c86:	4e b1       	in	r20, 0x0e	; 14
     c88:	f9 01       	movw	r30, r18
     c8a:	ef 54       	subi	r30, 0x4F	; 79
     c8c:	fc 4f       	sbci	r31, 0xFC	; 252
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	00 80       	ld	r0, Z
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <sw_int_handle+0x14c>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	0a 94       	dec	r0
     c9c:	e2 f7       	brpl	.-8      	; 0xc96 <sw_int_handle+0x148>
     c9e:	84 2b       	or	r24, r20
     ca0:	0f c0       	rjmp	.+30     	; 0xcc0 <sw_int_handle+0x172>
     ca2:	9e b1       	in	r25, 0x0e	; 14
     ca4:	f9 01       	movw	r30, r18
     ca6:	ef 54       	subi	r30, 0x4F	; 79
     ca8:	fc 4f       	sbci	r31, 0xFC	; 252
     caa:	21 e0       	ldi	r18, 0x01	; 1
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	00 80       	ld	r0, Z
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <sw_int_handle+0x168>
     cb2:	22 0f       	add	r18, r18
     cb4:	33 1f       	adc	r19, r19
     cb6:	0a 94       	dec	r0
     cb8:	e2 f7       	brpl	.-8      	; 0xcb2 <sw_int_handle+0x164>
     cba:	82 2f       	mov	r24, r18
     cbc:	80 95       	com	r24
     cbe:	89 23       	and	r24, r25
     cc0:	8e b9       	out	0x0e, r24	; 14
     cc2:	08 95       	ret
		case PORT_G: PORTG = (sw_state)? (PORTG|(1<<PinMap[sw])):(PORTG&~(1<<PinMap[sw]));break;
     cc4:	66 23       	and	r22, r22
     cc6:	71 f0       	breq	.+28     	; 0xce4 <sw_int_handle+0x196>
     cc8:	44 b3       	in	r20, 0x14	; 20
     cca:	f9 01       	movw	r30, r18
     ccc:	ef 54       	subi	r30, 0x4F	; 79
     cce:	fc 4f       	sbci	r31, 0xFC	; 252
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	00 80       	ld	r0, Z
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <sw_int_handle+0x18e>
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	0a 94       	dec	r0
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <sw_int_handle+0x18a>
     ce0:	84 2b       	or	r24, r20
     ce2:	0f c0       	rjmp	.+30     	; 0xd02 <sw_int_handle+0x1b4>
     ce4:	94 b3       	in	r25, 0x14	; 20
     ce6:	f9 01       	movw	r30, r18
     ce8:	ef 54       	subi	r30, 0x4F	; 79
     cea:	fc 4f       	sbci	r31, 0xFC	; 252
     cec:	21 e0       	ldi	r18, 0x01	; 1
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	00 80       	ld	r0, Z
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <sw_int_handle+0x1aa>
     cf4:	22 0f       	add	r18, r18
     cf6:	33 1f       	adc	r19, r19
     cf8:	0a 94       	dec	r0
     cfa:	e2 f7       	brpl	.-8      	; 0xcf4 <sw_int_handle+0x1a6>
     cfc:	82 2f       	mov	r24, r18
     cfe:	80 95       	com	r24
     d00:	89 23       	and	r24, r25
     d02:	84 bb       	out	0x14, r24	; 20
     d04:	08 95       	ret
		case PORT_H: PORTH = (sw_state)? (PORTH|(1<<PinMap[sw])):(PORTH&~(1<<PinMap[sw]));break;
     d06:	66 23       	and	r22, r22
     d08:	79 f0       	breq	.+30     	; 0xd28 <sw_int_handle+0x1da>
     d0a:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
     d0e:	f9 01       	movw	r30, r18
     d10:	ef 54       	subi	r30, 0x4F	; 79
     d12:	fc 4f       	sbci	r31, 0xFC	; 252
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	00 80       	ld	r0, Z
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <sw_int_handle+0x1d2>
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	0a 94       	dec	r0
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <sw_int_handle+0x1ce>
     d24:	84 2b       	or	r24, r20
     d26:	10 c0       	rjmp	.+32     	; 0xd48 <sw_int_handle+0x1fa>
     d28:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
     d2c:	f9 01       	movw	r30, r18
     d2e:	ef 54       	subi	r30, 0x4F	; 79
     d30:	fc 4f       	sbci	r31, 0xFC	; 252
     d32:	21 e0       	ldi	r18, 0x01	; 1
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	00 80       	ld	r0, Z
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <sw_int_handle+0x1f0>
     d3a:	22 0f       	add	r18, r18
     d3c:	33 1f       	adc	r19, r19
     d3e:	0a 94       	dec	r0
     d40:	e2 f7       	brpl	.-8      	; 0xd3a <sw_int_handle+0x1ec>
     d42:	82 2f       	mov	r24, r18
     d44:	80 95       	com	r24
     d46:	89 23       	and	r24, r25
     d48:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
     d4c:	08 95       	ret
		case PORT_J: PORTJ = (sw_state)? (PORTJ|(1<<PinMap[sw])):(PORTJ&~(1<<PinMap[sw]));break;
     d4e:	66 23       	and	r22, r22
     d50:	79 f0       	breq	.+30     	; 0xd70 <sw_int_handle+0x222>
     d52:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
     d56:	f9 01       	movw	r30, r18
     d58:	ef 54       	subi	r30, 0x4F	; 79
     d5a:	fc 4f       	sbci	r31, 0xFC	; 252
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	00 80       	ld	r0, Z
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <sw_int_handle+0x21a>
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	0a 94       	dec	r0
     d6a:	e2 f7       	brpl	.-8      	; 0xd64 <sw_int_handle+0x216>
     d6c:	84 2b       	or	r24, r20
     d6e:	10 c0       	rjmp	.+32     	; 0xd90 <sw_int_handle+0x242>
     d70:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
     d74:	f9 01       	movw	r30, r18
     d76:	ef 54       	subi	r30, 0x4F	; 79
     d78:	fc 4f       	sbci	r31, 0xFC	; 252
     d7a:	21 e0       	ldi	r18, 0x01	; 1
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	00 80       	ld	r0, Z
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <sw_int_handle+0x238>
     d82:	22 0f       	add	r18, r18
     d84:	33 1f       	adc	r19, r19
     d86:	0a 94       	dec	r0
     d88:	e2 f7       	brpl	.-8      	; 0xd82 <sw_int_handle+0x234>
     d8a:	82 2f       	mov	r24, r18
     d8c:	80 95       	com	r24
     d8e:	89 23       	and	r24, r25
     d90:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
     d94:	08 95       	ret
		case PORT_L: PORTL = (sw_state)? (PORTL|(1<<PinMap[sw])):(PORTL&~(1<<PinMap[sw]));break;	
     d96:	66 23       	and	r22, r22
     d98:	79 f0       	breq	.+30     	; 0xdb8 <sw_int_handle+0x26a>
     d9a:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
     d9e:	f9 01       	movw	r30, r18
     da0:	ef 54       	subi	r30, 0x4F	; 79
     da2:	fc 4f       	sbci	r31, 0xFC	; 252
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	00 80       	ld	r0, Z
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <sw_int_handle+0x262>
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	0a 94       	dec	r0
     db2:	e2 f7       	brpl	.-8      	; 0xdac <sw_int_handle+0x25e>
     db4:	84 2b       	or	r24, r20
     db6:	11 c0       	rjmp	.+34     	; 0xdda <sw_int_handle+0x28c>
     db8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
     dbc:	f9 01       	movw	r30, r18
     dbe:	ef 54       	subi	r30, 0x4F	; 79
     dc0:	fc 4f       	sbci	r31, 0xFC	; 252
     dc2:	41 e0       	ldi	r20, 0x01	; 1
     dc4:	50 e0       	ldi	r21, 0x00	; 0
     dc6:	9a 01       	movw	r18, r20
     dc8:	00 80       	ld	r0, Z
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <sw_int_handle+0x282>
     dcc:	22 0f       	add	r18, r18
     dce:	33 1f       	adc	r19, r19
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <sw_int_handle+0x27e>
     dd4:	82 2f       	mov	r24, r18
     dd6:	80 95       	com	r24
     dd8:	89 23       	and	r24, r25
     dda:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
     dde:	08 95       	ret

00000de0 <sw_ext_handle>:
	}
}

void sw_ext_handle(uint8_t sw, sw_state_t sw_state)
{
	if(!sw) return;
     de0:	88 23       	and	r24, r24
     de2:	39 f1       	breq	.+78     	; 0xe32 <sw_ext_handle+0x52>
	sw--;
     de4:	81 50       	subi	r24, 0x01	; 1
	if(!sw)
     de6:	49 f4       	brne	.+18     	; 0xdfa <sw_ext_handle+0x1a>
	{
		PORTG = (sw_state)? (PORTG|(1<<SWEXT0_PIN)):(PORTG&~(1<<SWEXT0_PIN));
     de8:	66 23       	and	r22, r22
     dea:	19 f0       	breq	.+6      	; 0xdf2 <sw_ext_handle+0x12>
     dec:	84 b3       	in	r24, 0x14	; 20
     dee:	82 60       	ori	r24, 0x02	; 2
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <sw_ext_handle+0x16>
     df2:	84 b3       	in	r24, 0x14	; 20
     df4:	8d 7f       	andi	r24, 0xFD	; 253
     df6:	84 bb       	out	0x14, r24	; 20
     df8:	08 95       	ret
	}
	else
	{
		PORTC = (sw_state)? (PORTC|(1<<(sw-1))):(PORTC&~(1<<(sw-1)));
     dfa:	66 23       	and	r22, r22
     dfc:	69 f0       	breq	.+26     	; 0xe18 <sw_ext_handle+0x38>
     dfe:	48 b1       	in	r20, 0x08	; 8
     e00:	81 50       	subi	r24, 0x01	; 1
     e02:	21 e0       	ldi	r18, 0x01	; 1
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	b9 01       	movw	r22, r18
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <sw_ext_handle+0x2e>
     e0a:	66 0f       	add	r22, r22
     e0c:	77 1f       	adc	r23, r23
     e0e:	8a 95       	dec	r24
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <sw_ext_handle+0x2a>
     e12:	cb 01       	movw	r24, r22
     e14:	84 2b       	or	r24, r20
     e16:	0c c0       	rjmp	.+24     	; 0xe30 <sw_ext_handle+0x50>
     e18:	98 b1       	in	r25, 0x08	; 8
     e1a:	81 50       	subi	r24, 0x01	; 1
     e1c:	21 e0       	ldi	r18, 0x01	; 1
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <sw_ext_handle+0x46>
     e22:	22 0f       	add	r18, r18
     e24:	33 1f       	adc	r19, r19
     e26:	8a 95       	dec	r24
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <sw_ext_handle+0x42>
     e2a:	82 2f       	mov	r24, r18
     e2c:	80 95       	com	r24
     e2e:	89 23       	and	r24, r25
     e30:	88 b9       	out	0x08, r24	; 8
     e32:	08 95       	ret

00000e34 <control_task_update>:
}


uint8_t abc;
static	void	control_task_update(void)
{
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29

	if(s_Command.sw_int_rqt||i2c_write_rqt)
     e38:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <s_Command+0x1>
     e3c:	81 11       	cpse	r24, r1
     e3e:	80 c0       	rjmp	.+256    	; 0xf40 <control_task_update+0x10c>
     e40:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <i2c_write_rqt>
     e44:	81 11       	cpse	r24, r1
     e46:	82 c0       	rjmp	.+260    	; 0xf4c <control_task_update+0x118>
     e48:	34 c0       	rjmp	.+104    	; 0xeb2 <control_task_update+0x7e>
	{
		if(i2c_write_rqt)
		{
			s_Control.sw_int = rxbuffer[I2C_SW_INT_ADDR];
     e4a:	e9 eb       	ldi	r30, 0xB9	; 185
     e4c:	f4 e0       	ldi	r31, 0x04	; 4
     e4e:	80 81       	ld	r24, Z
     e50:	c9 ed       	ldi	r28, 0xD9	; 217
     e52:	d4 e0       	ldi	r29, 0x04	; 4
     e54:	88 83       	st	Y, r24
			s_Control.dac_volt_int = dac2v(rxbuffer[I2C_DAC_INT_ADDR]);
     e56:	81 81       	ldd	r24, Z+1	; 0x01
     e58:	f6 d6       	rcall	.+3564   	; 0x1c46 <dac2v>
     e5a:	9c 83       	std	Y+4, r25	; 0x04
     e5c:	8b 83       	std	Y+3, r24	; 0x03
     e5e:	0d c0       	rjmp	.+26     	; 0xe7a <control_task_update+0x46>
		}
		else if(s_Command.sw_int_rqt)
		{
			s_Control.sw_int = s_Command.sw_int;
     e60:	a9 ed       	ldi	r26, 0xD9	; 217
     e62:	b4 e0       	ldi	r27, 0x04	; 4
     e64:	ef ea       	ldi	r30, 0xAF	; 175
     e66:	f4 e0       	ldi	r31, 0x04	; 4
     e68:	80 81       	ld	r24, Z
     e6a:	8c 93       	st	X, r24
			s_Control.dac_volt_int = s_Command.dac_volt_int;
     e6c:	83 81       	ldd	r24, Z+3	; 0x03
     e6e:	94 81       	ldd	r25, Z+4	; 0x04
     e70:	14 96       	adiw	r26, 0x04	; 4
     e72:	9c 93       	st	X, r25
     e74:	8e 93       	st	-X, r24
     e76:	13 97       	sbiw	r26, 0x03	; 3
			s_Command.sw_int_rqt = false;
     e78:	11 82       	std	Z+1, r1	; 0x01
		}
		
		sw_int_handle(s_Control.sw_int_last_on, STATE_OFF);
     e7a:	c9 ed       	ldi	r28, 0xD9	; 217
     e7c:	d4 e0       	ldi	r29, 0x04	; 4
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	65 de       	rcall	.-822    	; 0xb4e <sw_int_handle>
		
		if(!s_Control.sw_int)
     e84:	88 81       	ld	r24, Y
     e86:	81 11       	cpse	r24, r1
		{
			DAC_Off(DAC_CHA);
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <control_task_update+0x5a>
     e8a:	0f d7       	rcall	.+3614   	; 0x1caa <DAC_Off>
     e8c:	0b c0       	rjmp	.+22     	; 0xea4 <control_task_update+0x70>
			//abc  = 1;
		}
		else
		{
			DAC_Write(DAC_CHA, v2dac(s_Control.dac_volt_int));
     e8e:	c9 ed       	ldi	r28, 0xD9	; 217
     e90:	d4 e0       	ldi	r29, 0x04	; 4
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	9c 81       	ldd	r25, Y+4	; 0x04
     e96:	c6 d6       	rcall	.+3468   	; 0x1c24 <v2dac>
     e98:	68 2f       	mov	r22, r24
     e9a:	80 e0       	ldi	r24, 0x00	; 0
			//abc  = 1;
			//sw_int_handle(s_Control.sw_int_last_on, STATE_OFF);
			sw_int_handle(s_Control.sw_int, STATE_ON);
     e9c:	e6 d6       	rcall	.+3532   	; 0x1c6a <DAC_Write>
     e9e:	61 e0       	ldi	r22, 0x01	; 1
     ea0:	88 81       	ld	r24, Y
     ea2:	55 de       	rcall	.-854    	; 0xb4e <sw_int_handle>
		}
//		s_Command.sw_int_rqt = false;
		if(s_Control.sw_int_last_on != s_Control.sw_int)	s_Control.sw_int_last_on = s_Control.sw_int;
     ea4:	e9 ed       	ldi	r30, 0xD9	; 217
     ea6:	f4 e0       	ldi	r31, 0x04	; 4
     ea8:	80 81       	ld	r24, Z
     eaa:	92 81       	ldd	r25, Z+2	; 0x02
     eac:	98 13       	cpse	r25, r24
     eae:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <s_Control+0x2>
	}
	
	if(s_Command.sw_ext_rqt||i2c_write_rqt)
     eb2:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <s_Command+0x6>
     eb6:	81 11       	cpse	r24, r1
     eb8:	4f c0       	rjmp	.+158    	; 0xf58 <control_task_update+0x124>
     eba:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <i2c_write_rqt>
     ebe:	81 11       	cpse	r24, r1
     ec0:	51 c0       	rjmp	.+162    	; 0xf64 <control_task_update+0x130>
     ec2:	56 c0       	rjmp	.+172    	; 0xf70 <control_task_update+0x13c>
	{
		if(i2c_write_rqt)
		{
			s_Control.sw_ext = rxbuffer[I2C_SW_EXT_ADDR];
     ec4:	e9 eb       	ldi	r30, 0xB9	; 185
     ec6:	f4 e0       	ldi	r31, 0x04	; 4
     ec8:	82 81       	ldd	r24, Z+2	; 0x02
     eca:	c9 ed       	ldi	r28, 0xD9	; 217
     ecc:	d4 e0       	ldi	r29, 0x04	; 4
			s_Control.dac_volt_ext = dac2v(rxbuffer[I2C_DAC_EXT_ADDR]);
     ece:	8d 83       	std	Y+5, r24	; 0x05
     ed0:	83 81       	ldd	r24, Z+3	; 0x03
     ed2:	b9 d6       	rcall	.+3442   	; 0x1c46 <dac2v>
     ed4:	99 87       	std	Y+9, r25	; 0x09
     ed6:	88 87       	std	Y+8, r24	; 0x08
     ed8:	0f c0       	rjmp	.+30     	; 0xef8 <control_task_update+0xc4>
		}
		else if(s_Command.sw_ext_rqt)
		{
			s_Control.sw_ext = s_Command.sw_ext;
     eda:	a9 ed       	ldi	r26, 0xD9	; 217
     edc:	b4 e0       	ldi	r27, 0x04	; 4
     ede:	ef ea       	ldi	r30, 0xAF	; 175
     ee0:	f4 e0       	ldi	r31, 0x04	; 4
     ee2:	85 81       	ldd	r24, Z+5	; 0x05
     ee4:	15 96       	adiw	r26, 0x05	; 5
     ee6:	8c 93       	st	X, r24
     ee8:	15 97       	sbiw	r26, 0x05	; 5
			s_Control.dac_volt_ext = s_Command.dac_volt_ext;
     eea:	80 85       	ldd	r24, Z+8	; 0x08
     eec:	91 85       	ldd	r25, Z+9	; 0x09
     eee:	19 96       	adiw	r26, 0x09	; 9
     ef0:	9c 93       	st	X, r25
     ef2:	8e 93       	st	-X, r24
			s_Command.sw_ext_rqt = false;
     ef4:	18 97       	sbiw	r26, 0x08	; 8
		}
		
		sw_ext_handle(s_Control.sw_ext_last_on, STATE_OFF);
     ef6:	16 82       	std	Z+6, r1	; 0x06
     ef8:	c9 ed       	ldi	r28, 0xD9	; 217
     efa:	d4 e0       	ldi	r29, 0x04	; 4
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	8f 81       	ldd	r24, Y+7	; 0x07
		
		if(!s_Control.sw_ext)
     f00:	6f df       	rcall	.-290    	; 0xde0 <sw_ext_handle>
     f02:	8d 81       	ldd	r24, Y+5	; 0x05
		{
			DAC_Off(DAC_CHB);
     f04:	81 11       	cpse	r24, r1
     f06:	03 c0       	rjmp	.+6      	; 0xf0e <control_task_update+0xda>
     f08:	81 e0       	ldi	r24, 0x01	; 1
			//abc  = 1;
		}
		else
		{
			DAC_Write(DAC_CHB, v2dac(s_Control.dac_volt_ext));
     f0a:	cf d6       	rcall	.+3486   	; 0x1caa <DAC_Off>
     f0c:	0b c0       	rjmp	.+22     	; 0xf24 <control_task_update+0xf0>
     f0e:	c9 ed       	ldi	r28, 0xD9	; 217
     f10:	d4 e0       	ldi	r29, 0x04	; 4
     f12:	88 85       	ldd	r24, Y+8	; 0x08
     f14:	99 85       	ldd	r25, Y+9	; 0x09
     f16:	86 d6       	rcall	.+3340   	; 0x1c24 <v2dac>
     f18:	68 2f       	mov	r22, r24
     f1a:	81 e0       	ldi	r24, 0x01	; 1
			//abc  = 1;
			//sw_int_handle(s_Control.sw_int_last_on, STATE_OFF);
			sw_ext_handle(s_Control.sw_ext, STATE_ON);
     f1c:	a6 d6       	rcall	.+3404   	; 0x1c6a <DAC_Write>
     f1e:	61 e0       	ldi	r22, 0x01	; 1
     f20:	8d 81       	ldd	r24, Y+5	; 0x05
     f22:	5e df       	rcall	.-324    	; 0xde0 <sw_ext_handle>
		}
//		s_Command.sw_ext_rqt = false;
		if(s_Control.sw_ext_last_on != s_Control.sw_ext)	s_Control.sw_ext_last_on = s_Control.sw_ext;
     f24:	e9 ed       	ldi	r30, 0xD9	; 217
     f26:	f4 e0       	ldi	r31, 0x04	; 4
     f28:	85 81       	ldd	r24, Z+5	; 0x05
     f2a:	97 81       	ldd	r25, Z+7	; 0x07
     f2c:	98 13       	cpse	r25, r24
     f2e:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <s_Control+0x7>
		if(i2c_write_rqt) i2c_write_rqt = false;
     f32:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <i2c_write_rqt>
     f36:	88 23       	and	r24, r24
     f38:	d9 f0       	breq	.+54     	; 0xf70 <control_task_update+0x13c>
     f3a:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <i2c_write_rqt>
	}
	
	
}
     f3e:	18 c0       	rjmp	.+48     	; 0xf70 <control_task_update+0x13c>
static	void	control_task_update(void)
{

	if(s_Command.sw_int_rqt||i2c_write_rqt)
	{
		if(i2c_write_rqt)
     f40:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <i2c_write_rqt>
     f44:	88 23       	and	r24, r24
     f46:	09 f4       	brne	.+2      	; 0xf4a <control_task_update+0x116>
     f48:	8b cf       	rjmp	.-234    	; 0xe60 <control_task_update+0x2c>
     f4a:	7f cf       	rjmp	.-258    	; 0xe4a <control_task_update+0x16>
     f4c:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <i2c_write_rqt>
     f50:	88 23       	and	r24, r24
     f52:	09 f4       	brne	.+2      	; 0xf56 <control_task_update+0x122>
     f54:	92 cf       	rjmp	.-220    	; 0xe7a <control_task_update+0x46>
     f56:	79 cf       	rjmp	.-270    	; 0xe4a <control_task_update+0x16>
		if(s_Control.sw_int_last_on != s_Control.sw_int)	s_Control.sw_int_last_on = s_Control.sw_int;
	}
	
	if(s_Command.sw_ext_rqt||i2c_write_rqt)
	{
		if(i2c_write_rqt)
     f58:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <i2c_write_rqt>
     f5c:	88 23       	and	r24, r24
     f5e:	09 f4       	brne	.+2      	; 0xf62 <control_task_update+0x12e>
     f60:	bc cf       	rjmp	.-136    	; 0xeda <control_task_update+0xa6>
     f62:	b0 cf       	rjmp	.-160    	; 0xec4 <control_task_update+0x90>
     f64:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <i2c_write_rqt>
     f68:	88 23       	and	r24, r24
     f6a:	09 f4       	brne	.+2      	; 0xf6e <control_task_update+0x13a>
     f6c:	c5 cf       	rjmp	.-118    	; 0xef8 <control_task_update+0xc4>
     f6e:	aa cf       	rjmp	.-172    	; 0xec4 <control_task_update+0x90>
		if(s_Control.sw_ext_last_on != s_Control.sw_ext)	s_Control.sw_ext_last_on = s_Control.sw_ext;
		if(i2c_write_rqt) i2c_write_rqt = false;
	}
	
	
}
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	08 95       	ret

00000f76 <control_create_task>:

void control_create_task(void)
{
	control_init();
     f76:	c5 dd       	rcall	.-1142   	; 0xb02 <control_init>
	SCH_TASK_CreateTask(&s_control_task_context .taskHandle, &s_control_task_context .taskProperty);
     f78:	6a e2       	ldi	r22, 0x2A	; 42
     f7a:	72 e0       	ldi	r23, 0x02	; 2
     f7c:	89 e2       	ldi	r24, 0x29	; 41
     f7e:	92 e0       	ldi	r25, 0x02	; 2
     f80:	02 c7       	rjmp	.+3588   	; 0x1d86 <SCH_TASK_CreateTask>
     f82:	08 95       	ret

00000f84 <status_led_led1_off>:
static void status_led_led1_on(void);
static void status_led_led1_off(void);
static	void	status_led_powerup(void);
void	status_led_set_status(Led_DisplayStateTypedef status)
{
	s_led_display_status.state = status;
     f84:	e8 e0       	ldi	r30, 0x08	; 8
     f86:	f1 e0       	ldi	r31, 0x01	; 1
     f88:	80 81       	ld	r24, Z
     f8a:	80 68       	ori	r24, 0x80	; 128
     f8c:	80 83       	st	Z, r24
     f8e:	08 95       	ret

00000f90 <status_led_update>:
     f90:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <s_led_display_status>
     f94:	86 95       	lsr	r24
     f96:	8f 73       	andi	r24, 0x3F	; 63
     f98:	19 f0       	breq	.+6      	; 0xfa0 <status_led_update+0x10>
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	59 f1       	breq	.+86     	; 0xff4 <status_led_update+0x64>
     f9e:	08 95       	ret
     fa0:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <s_led_display_status>
     fa4:	80 ff       	sbrs	r24, 0
     fa6:	11 c0       	rjmp	.+34     	; 0xfca <status_led_update+0x3a>
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	e0 d6       	rcall	.+3520   	; 0x1d6c <SCH_TIM_HasCompleted>
     fac:	88 23       	and	r24, r24
     fae:	b1 f1       	breq	.+108    	; 0x101c <__EEPROM_REGION_LENGTH__+0x1c>
     fb0:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <s_led_display_status>
     fb4:	8e 7f       	andi	r24, 0xFE	; 254
     fb6:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <s_led_display_status>
     fba:	e4 df       	rcall	.-56     	; 0xf84 <status_led_led1_off>
     fbc:	44 ef       	ldi	r20, 0xF4	; 244
     fbe:	51 e0       	ldi	r21, 0x01	; 1
     fc0:	60 e0       	ldi	r22, 0x00	; 0
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	cb c6       	rjmp	.+3478   	; 0x1d5e <SCH_TIM_Start>
     fc8:	08 95       	ret
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	cf d6       	rcall	.+3486   	; 0x1d6c <SCH_TIM_HasCompleted>
     fce:	88 23       	and	r24, r24
     fd0:	29 f1       	breq	.+74     	; 0x101c <__EEPROM_REGION_LENGTH__+0x1c>
     fd2:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <s_led_display_status>
     fd6:	81 60       	ori	r24, 0x01	; 1
     fd8:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <s_led_display_status>
     fdc:	e8 e0       	ldi	r30, 0x08	; 8
     fde:	f1 e0       	ldi	r31, 0x01	; 1
     fe0:	80 81       	ld	r24, Z
     fe2:	8f 77       	andi	r24, 0x7F	; 127
     fe4:	80 83       	st	Z, r24
     fe6:	44 ef       	ldi	r20, 0xF4	; 244
     fe8:	51 e0       	ldi	r21, 0x01	; 1
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	b6 c6       	rjmp	.+3436   	; 0x1d5e <SCH_TIM_Start>
     ff2:	08 95       	ret
     ff4:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <s_led_display_status>
     ff8:	80 ff       	sbrs	r24, 0
     ffa:	10 c0       	rjmp	.+32     	; 0x101c <__EEPROM_REGION_LENGTH__+0x1c>
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	b6 d6       	rcall	.+3436   	; 0x1d6c <SCH_TIM_HasCompleted>
    1000:	88 23       	and	r24, r24
    1002:	61 f0       	breq	.+24     	; 0x101c <__EEPROM_REGION_LENGTH__+0x1c>
    1004:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <s_led_display_status>
    1008:	8e 7f       	andi	r24, 0xFE	; 254
    100a:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <s_led_display_status>
    100e:	ba df       	rcall	.-140    	; 0xf84 <status_led_led1_off>
    1010:	48 eb       	ldi	r20, 0xB8	; 184
    1012:	5b e0       	ldi	r21, 0x0B	; 11
    1014:	60 e0       	ldi	r22, 0x00	; 0
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	a1 c6       	rjmp	.+3394   	; 0x1d5e <SCH_TIM_Start>
    101c:	08 95       	ret

0000101e <status_led_init>:
}

void status_led_init(void)
{
	LED1_DDR |= (1 << LED1_PIN);
    101e:	e7 e0       	ldi	r30, 0x07	; 7
    1020:	f1 e0       	ldi	r31, 0x01	; 1
    1022:	80 81       	ld	r24, Z
    1024:	80 68       	ori	r24, 0x80	; 128
    1026:	80 83       	st	Z, r24
	LED1_PORT &= ~((1 << LED1_PIN));
    1028:	e8 e0       	ldi	r30, 0x08	; 8
    102a:	f1 e0       	ldi	r31, 0x01	; 1
    102c:	80 81       	ld	r24, Z
    102e:	8f 77       	andi	r24, 0x7F	; 127
    1030:	80 83       	st	Z, r24
	s_led_display_status.led1 = 0;
    1032:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <s_led_display_status>
	s_led_display_status.state = POWERUP;
    1036:	80 78       	andi	r24, 0x80	; 128
    1038:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <s_led_display_status>
	status_led_led1_off();	
    103c:	a3 cf       	rjmp	.-186    	; 0xf84 <status_led_led1_off>
    103e:	08 95       	ret

00001040 <status_led_create_task>:

}

void	status_led_create_task(void)
{
	status_led_init();
    1040:	ee df       	rcall	.-36     	; 0x101e <status_led_init>
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
    1042:	61 e3       	ldi	r22, 0x31	; 49
    1044:	72 e0       	ldi	r23, 0x02	; 2
    1046:	80 e3       	ldi	r24, 0x30	; 48
    1048:	92 e0       	ldi	r25, 0x02	; 2
    104a:	9d c6       	rjmp	.+3386   	; 0x1d86 <SCH_TASK_CreateTask>
    104c:	08 95       	ret

0000104e <main>:
#include "measurement.h"
#include "i2c.h"

int main(void)
{
	i2c_slave_init(I2C_SLAVE_ADDRESS);
    104e:	86 e2       	ldi	r24, 0x26	; 38
    1050:	ae d0       	rcall	.+348    	; 0x11ae <i2c_slave_init>
	SPI_Init();
    1052:	8e d0       	rcall	.+284    	; 0x1170 <SPI_Init>
 	TPL5010_init();
    1054:	3d d6       	rcall	.+3194   	; 0x1cd0 <TPL5010_init>
 	SCH_Initialize();
    1056:	6b d6       	rcall	.+3286   	; 0x1d2e <SCH_Initialize>
 	status_led_create_task();
    1058:	f3 df       	rcall	.-26     	; 0x1040 <status_led_create_task>
 	measure_create_task();
    105a:	26 d0       	rcall	.+76     	; 0x10a8 <measure_create_task>
    105c:	8c df       	rcall	.-232    	; 0xf76 <control_create_task>
	control_create_task();
    105e:	49 dd       	rcall	.-1390   	; 0xaf2 <command_create_task>
    1060:	40 d7       	rcall	.+3712   	; 0x1ee2 <SCH_StartSchedular>
 	command_create_task();
    1062:	41 d7       	rcall	.+3714   	; 0x1ee6 <SCH_HandleScheduledTask>
    1064:	fe cf       	rjmp	.-4      	; 0x1062 <main+0x14>

00001066 <measure_task_update>:
	//slave_create_task();
	SCH_StartSchedular();
    1066:	0f 93       	push	r16
    1068:	1f 93       	push	r17
	
	while (1)
	{
		SCH_HandleScheduledTask();
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	08 ee       	ldi	r16, 0xE8	; 232
};


void measure_init(void)
{
	ADC_Init();
    1070:	14 e0       	ldi	r17, 0x04	; 4
    1072:	f8 01       	movw	r30, r16
    1074:	80 81       	ld	r24, Z
    1076:	91 81       	ldd	r25, Z+1	; 0x01
    1078:	56 d6       	rcall	.+3244   	; 0x1d26 <get_current_100times>
    107a:	c4 ee       	ldi	r28, 0xE4	; 228
    107c:	d4 e0       	ldi	r29, 0x04	; 4
    107e:	99 83       	std	Y+1, r25	; 0x01
    1080:	88 83       	st	Y, r24
    1082:	f8 01       	movw	r30, r16
    1084:	82 81       	ldd	r24, Z+2	; 0x02
    1086:	93 81       	ldd	r25, Z+3	; 0x03
    1088:	4e d6       	rcall	.+3228   	; 0x1d26 <get_current_100times>
    108a:	8a 83       	std	Y+2, r24	; 0x02
    108c:	9b 83       	std	Y+3, r25	; 0x03
    108e:	28 81       	ld	r18, Y
    1090:	39 81       	ldd	r19, Y+1	; 0x01
    1092:	ef e8       	ldi	r30, 0x8F	; 143
    1094:	f4 e0       	ldi	r31, 0x04	; 4
    1096:	34 83       	std	Z+4, r19	; 0x04
    1098:	25 83       	std	Z+5, r18	; 0x05
    109a:	96 83       	std	Z+6, r25	; 0x06
    109c:	87 83       	std	Z+7, r24	; 0x07
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	08 95       	ret

000010a8 <measure_create_task>:
    10a8:	06 d0       	rcall	.+12     	; 0x10b6 <ADC_Init>
}

void measure_create_task(void)
{
	measure_init();
	SCH_TASK_CreateTask(&s_measure_task_context .taskHandle, &s_measure_task_context .taskProperty);
    10aa:	68 e3       	ldi	r22, 0x38	; 56
    10ac:	72 e0       	ldi	r23, 0x02	; 2
    10ae:	87 e3       	ldi	r24, 0x37	; 55
    10b0:	92 e0       	ldi	r25, 0x02	; 2
    10b2:	69 c6       	rjmp	.+3282   	; 0x1d86 <SCH_TASK_CreateTask>
    10b4:	08 95       	ret

000010b6 <ADC_Init>:

ADC_CurrentDataTypedef ADC_Data;

void ADC_Init(void)
{
	ADMUX = (1<<REFS0);
    10b6:	80 e4       	ldi	r24, 0x40	; 64
    10b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
    10bc:	ea e7       	ldi	r30, 0x7A	; 122
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	87 68       	ori	r24, 0x87	; 135
    10c4:	80 83       	st	Z, r24
	MONITOR_DDR &= ~((1<<I_MO_EXT)|(1<<I_MO_INT));
    10c6:	80 b3       	in	r24, 0x10	; 16
    10c8:	8c 7f       	andi	r24, 0xFC	; 252
    10ca:	80 bb       	out	0x10, r24	; 16
	MONITOR_PORT &= ~((1<<I_MO_EXT)|(1<<I_MO_INT));
    10cc:	81 b3       	in	r24, 0x11	; 17
    10ce:	8c 7f       	andi	r24, 0xFC	; 252
    10d0:	81 bb       	out	0x11, r24	; 17
	ADCSRA |= (1<<ADIE);
    10d2:	80 81       	ld	r24, Z
    10d4:	88 60       	ori	r24, 0x08	; 8
    10d6:	80 83       	st	Z, r24
	sei();
    10d8:	78 94       	sei
    10da:	08 95       	ret

000010dc <Set_Channel>:
}


void Set_Channel(uint8_t channel)
{
	ADMUX &= 0xE0;
    10dc:	ec e7       	ldi	r30, 0x7C	; 124
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	90 81       	ld	r25, Z
    10e2:	90 7e       	andi	r25, 0xE0	; 224
    10e4:	90 83       	st	Z, r25
	ADMUX |= channel;
    10e6:	90 81       	ld	r25, Z
    10e8:	89 2b       	or	r24, r25
    10ea:	80 83       	st	Z, r24
    10ec:	08 95       	ret

000010ee <__vector_29>:
};

ISR(ADC_vect)
{
    10ee:	1f 92       	push	r1
    10f0:	0f 92       	push	r0
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	0f 92       	push	r0
    10f6:	11 24       	eor	r1, r1
    10f8:	0b b6       	in	r0, 0x3b	; 59
    10fa:	0f 92       	push	r0
    10fc:	2f 93       	push	r18
    10fe:	3f 93       	push	r19
    1100:	4f 93       	push	r20
    1102:	5f 93       	push	r21
    1104:	6f 93       	push	r22
    1106:	7f 93       	push	r23
    1108:	8f 93       	push	r24
    110a:	9f 93       	push	r25
    110c:	af 93       	push	r26
    110e:	bf 93       	push	r27
    1110:	cf 93       	push	r28
    1112:	ef 93       	push	r30
    1114:	ff 93       	push	r31
	uint8_t channel = ADC_Data.Channel;
    1116:	c0 91 ec 04 	lds	r28, 0x04EC	; 0x8004ec <ADC_Data+0x4>
	ADC_Data.Data[channel] = ADCW;
    111a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
    111e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
    1122:	ec 2f       	mov	r30, r28
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	ee 0f       	add	r30, r30
    1128:	ff 1f       	adc	r31, r31
    112a:	e8 51       	subi	r30, 0x18	; 24
    112c:	fb 4f       	sbci	r31, 0xFB	; 251
    112e:	91 83       	std	Z+1, r25	; 0x01
    1130:	80 83       	st	Z, r24
	channel++;
    1132:	cf 5f       	subi	r28, 0xFF	; 255
	if(channel > 1) channel = 0;
    1134:	c2 30       	cpi	r28, 0x02	; 2
    1136:	08 f0       	brcs	.+2      	; 0x113a <__vector_29+0x4c>
    1138:	c0 e0       	ldi	r28, 0x00	; 0
	Set_Channel(channel);
    113a:	8c 2f       	mov	r24, r28
    113c:	cf df       	rcall	.-98     	; 0x10dc <Set_Channel>
	ADC_Data.Channel = channel;
    113e:	e8 ee       	ldi	r30, 0xE8	; 232
    1140:	f4 e0       	ldi	r31, 0x04	; 4
    1142:	c4 83       	std	Z+4, r28	; 0x04
	ADC_Data.Wait = MUX_WAIT_FOR_STABLE;
    1144:	85 e0       	ldi	r24, 0x05	; 5
    1146:	85 83       	std	Z+5, r24	; 0x05
    1148:	ff 91       	pop	r31
    114a:	ef 91       	pop	r30
    114c:	cf 91       	pop	r28
    114e:	bf 91       	pop	r27
    1150:	af 91       	pop	r26
    1152:	9f 91       	pop	r25
    1154:	8f 91       	pop	r24
    1156:	7f 91       	pop	r23
    1158:	6f 91       	pop	r22
    115a:	5f 91       	pop	r21
    115c:	4f 91       	pop	r20
    115e:	3f 91       	pop	r19
    1160:	2f 91       	pop	r18
    1162:	0f 90       	pop	r0
    1164:	0b be       	out	0x3b, r0	; 59
    1166:	0f 90       	pop	r0
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	0f 90       	pop	r0
    116c:	1f 90       	pop	r1
    116e:	18 95       	reti

00001170 <SPI_Init>:
#include "spi.h"

// Initialize the SPI as master
void SPI_Init(void)
{
	SPI_PORT |= (1<<SPI_MOSI_PIN)|(1<<SPI_SCK_PIN);
    1170:	85 b1       	in	r24, 0x05	; 5
    1172:	86 60       	ori	r24, 0x06	; 6
    1174:	85 b9       	out	0x05, r24	; 5
	SPI_DDR |= (1<<SPI_MOSI_PIN)|(1<<SPI_SCK_PIN)|(1<<SW35_PIN);
    1176:	84 b1       	in	r24, 0x04	; 4
    1178:	87 60       	ori	r24, 0x07	; 7
    117a:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR);
    117c:	80 e5       	ldi	r24, 0x50	; 80
    117e:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0;
    1180:	1d bc       	out	0x2d, r1	; 45
    1182:	08 95       	ret

00001184 <SPI_SendByte>:

// Transfer a byte of data
uint8_t SPI_SendByte( uint8_t data )
{
	// Start transmission
	SPDR = data;
    1184:	8e bd       	out	0x2e, r24	; 46
	
	while (!(SPSR & (1 << SPIF)));
    1186:	0d b4       	in	r0, 0x2d	; 45
    1188:	07 fe       	sbrs	r0, 7
    118a:	fd cf       	rjmp	.-6      	; 0x1186 <SPI_SendByte+0x2>
	return SPDR;
    118c:	8e b5       	in	r24, 0x2e	; 46
}
    118e:	08 95       	ret

00001190 <timer_start_timer0>:
	TIMSK0 |= (1<<OCIE0A);
	sei();
}
void timer_stop_timer0(void)
{
	TCCR0B &= ~((1 << CS02) | (1 << CS01) | (1 << CS00));
    1190:	83 e0       	ldi	r24, 0x03	; 3
    1192:	85 bd       	out	0x25, r24	; 37
    1194:	ee e6       	ldi	r30, 0x6E	; 110
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	82 60       	ori	r24, 0x02	; 2
    119c:	80 83       	st	Z, r24
    119e:	78 94       	sei
    11a0:	08 95       	ret

000011a2 <timer_timer0_init>:
}
void timer_timer0_init(void)
{
	TCCR0A = (1<<WGM01);
    11a2:	82 e0       	ldi	r24, 0x02	; 2
    11a4:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0;
    11a6:	16 bc       	out	0x26, r1	; 38
	OCR0A = 125 - 1;
    11a8:	8c e7       	ldi	r24, 0x7C	; 124
    11aa:	87 bd       	out	0x27, r24	; 39
    11ac:	08 95       	ret

000011ae <i2c_slave_init>:
/************************************************  Slave  ********************************************************/

void i2c_slave_init(uint8_t address)
{
	//cli();
	TWAR = address<<1;
    11ae:	88 0f       	add	r24, r24
    11b0:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
	TWCR = (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWEN);
    11b4:	85 ec       	ldi	r24, 0xC5	; 197
    11b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	sei();
    11ba:	78 94       	sei
    11bc:	08 95       	ret

000011be <__vector_39>:
}

uint8_t tesst;
ISR(TWI_vect){
    11be:	1f 92       	push	r1
    11c0:	0f 92       	push	r0
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	0f 92       	push	r0
    11c6:	11 24       	eor	r1, r1
    11c8:	0b b6       	in	r0, 0x3b	; 59
    11ca:	0f 92       	push	r0
    11cc:	8f 93       	push	r24
    11ce:	9f 93       	push	r25
    11d0:	ef 93       	push	r30
    11d2:	ff 93       	push	r31
	
	uint8_t data;
	tesst = 0;
    11d4:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <tesst>
	switch(TW_STATUS)
    11d8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    11dc:	88 7f       	andi	r24, 0xF8	; 248
    11de:	80 3a       	cpi	r24, 0xA0	; 160
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <__vector_39+0x26>
    11e2:	43 c0       	rjmp	.+134    	; 0x126a <__vector_39+0xac>
    11e4:	28 f4       	brcc	.+10     	; 0x11f0 <__vector_39+0x32>
    11e6:	80 36       	cpi	r24, 0x60	; 96
    11e8:	69 f0       	breq	.+26     	; 0x1204 <__vector_39+0x46>
    11ea:	80 38       	cpi	r24, 0x80	; 128
    11ec:	b1 f0       	breq	.+44     	; 0x121a <__vector_39+0x5c>
    11ee:	74 c0       	rjmp	.+232    	; 0x12d8 <__vector_39+0x11a>
    11f0:	88 3b       	cpi	r24, 0xB8	; 184
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <__vector_39+0x38>
    11f4:	59 c0       	rjmp	.+178    	; 0x12a8 <__vector_39+0xea>
    11f6:	80 3c       	cpi	r24, 0xC0	; 192
    11f8:	09 f4       	brne	.+2      	; 0x11fc <__vector_39+0x3e>
    11fa:	68 c0       	rjmp	.+208    	; 0x12cc <__vector_39+0x10e>
    11fc:	88 3a       	cpi	r24, 0xA8	; 168
    11fe:	09 f0       	breq	.+2      	; 0x1202 <__vector_39+0x44>
    1200:	6b c0       	rjmp	.+214    	; 0x12d8 <__vector_39+0x11a>
    1202:	40 c0       	rjmp	.+128    	; 0x1284 <__vector_39+0xc6>
		/* ################################# SLAVE RECEIVE ################################# */
		/* ################################################################################# */
		
		/************************ Master start write ************************/
		case TW_SR_SLA_ACK:
			buffer_address = 0xFF;
    1204:	8f ef       	ldi	r24, 0xFF	; 255
    1206:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <buffer_address>
			status_count = 0;
    120a:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <status_count>
			TWCR |=  (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
    120e:	ec eb       	ldi	r30, 0xBC	; 188
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	85 6c       	ori	r24, 0xC5	; 197
    1216:	80 83       	st	Z, r24
		break;
    1218:	64 c0       	rjmp	.+200    	; 0x12e2 <__vector_39+0x124>
		
		/************************ Slave received data and then sent ack ************************/
		case TW_SR_DATA_ACK:
			data = TWDR;
    121a:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
			status_count++;
    121e:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <status_count>
    1222:	8f 5f       	subi	r24, 0xFF	; 255
    1224:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <status_count>
			if(buffer_address == 0xFF)			// First byte write is address
    1228:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <buffer_address>
    122c:	8f 3f       	cpi	r24, 0xFF	; 255
    122e:	19 f4       	brne	.+6      	; 0x1236 <__vector_39+0x78>
			{
				buffer_address = data;
    1230:	90 93 8e 04 	sts	0x048E, r25	; 0x80048e <buffer_address>
    1234:	0a c0       	rjmp	.+20     	; 0x124a <__vector_39+0x8c>
			}
			else
			{
				rxbuffer[buffer_address++] = data;
    1236:	e0 91 8e 04 	lds	r30, 0x048E	; 0x80048e <buffer_address>
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	8e 0f       	add	r24, r30
    123e:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <buffer_address>
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	e7 54       	subi	r30, 0x47	; 71
    1246:	fb 4f       	sbci	r31, 0xFB	; 251
    1248:	90 83       	st	Z, r25
			}
			
			if(buffer_address > I2C_RX_BUFFER_MAX - 1)
    124a:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <buffer_address>
    124e:	80 32       	cpi	r24, 0x20	; 32
    1250:	30 f0       	brcs	.+12     	; 0x125e <__vector_39+0xa0>
				TWCR |=  (1<<TWIE) | (1<<TWINT) | (1<<TWEN);
    1252:	ec eb       	ldi	r30, 0xBC	; 188
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	85 68       	ori	r24, 0x85	; 133
    125a:	80 83       	st	Z, r24
    125c:	42 c0       	rjmp	.+132    	; 0x12e2 <__vector_39+0x124>
			else
				TWCR |=  (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
    125e:	ec eb       	ldi	r30, 0xBC	; 188
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	85 6c       	ori	r24, 0xC5	; 197
    1266:	80 83       	st	Z, r24
    1268:	3c c0       	rjmp	.+120    	; 0x12e2 <__vector_39+0x124>
		break;
		
		/************************ Slave stop ************************/
		case TW_SR_STOP:
			if(status_count > 1)	i2c_write_rqt = true;
    126a:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <status_count>
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	18 f0       	brcs	.+6      	; 0x1278 <__vector_39+0xba>
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <i2c_write_rqt>
			TWCR |=  (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);			
    1278:	ec eb       	ldi	r30, 0xBC	; 188
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	85 6c       	ori	r24, 0xC5	; 197
    1280:	80 83       	st	Z, r24
		break;
    1282:	2f c0       	rjmp	.+94     	; 0x12e2 <__vector_39+0x124>
		/* ################################# SLAVE TRANSMIT ################################# */
		/* ################################################################################## */
		
		/************************ Master start read ************************/
		case TW_ST_SLA_ACK:
			TWDR = txbuffer[buffer_address++];
    1284:	e0 91 8e 04 	lds	r30, 0x048E	; 0x80048e <buffer_address>
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	8e 0f       	add	r24, r30
    128c:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <buffer_address>
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	e1 57       	subi	r30, 0x71	; 113
    1294:	fb 4f       	sbci	r31, 0xFB	; 251
    1296:	80 81       	ld	r24, Z
    1298:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
			TWCR |=  (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
    129c:	ec eb       	ldi	r30, 0xBC	; 188
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	85 6c       	ori	r24, 0xC5	; 197
    12a4:	80 83       	st	Z, r24
		break;
    12a6:	1d c0       	rjmp	.+58     	; 0x12e2 <__vector_39+0x124>
		
		/************************ Master received and sent ack ************************/
		case TW_ST_DATA_ACK:
			TWDR = txbuffer[buffer_address++];
    12a8:	e0 91 8e 04 	lds	r30, 0x048E	; 0x80048e <buffer_address>
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	8e 0f       	add	r24, r30
    12b0:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <buffer_address>
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	e1 57       	subi	r30, 0x71	; 113
    12b8:	fb 4f       	sbci	r31, 0xFB	; 251
    12ba:	80 81       	ld	r24, Z
    12bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
			TWCR |=  (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
    12c0:	ec eb       	ldi	r30, 0xBC	; 188
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	85 6c       	ori	r24, 0xC5	; 197
    12c8:	80 83       	st	Z, r24
		break;
    12ca:	0b c0       	rjmp	.+22     	; 0x12e2 <__vector_39+0x124>
		
		/************************ Slave stop ************************/
		case TW_ST_DATA_NACK:
			TWCR |=  (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
    12cc:	ec eb       	ldi	r30, 0xBC	; 188
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	85 6c       	ori	r24, 0xC5	; 197
    12d4:	80 83       	st	Z, r24
		break;
    12d6:	05 c0       	rjmp	.+10     	; 0x12e2 <__vector_39+0x124>
		
		default:
			TWCR |=  (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
    12d8:	ec eb       	ldi	r30, 0xBC	; 188
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	85 6c       	ori	r24, 0xC5	; 197
    12e0:	80 83       	st	Z, r24
	}

	//TW_STATUS_LAST = TW_STATUS;


}
    12e2:	ff 91       	pop	r31
    12e4:	ef 91       	pop	r30
    12e6:	9f 91       	pop	r25
    12e8:	8f 91       	pop	r24
    12ea:	0f 90       	pop	r0
    12ec:	0b be       	out	0x3b, r0	; 59
    12ee:	0f 90       	pop	r0
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	0f 90       	pop	r0
    12f4:	1f 90       	pop	r1
    12f6:	18 95       	reti

000012f8 <rbuffer_init>:
    while(!(UCSR0A & (1 << TXC0)));										// Wait for Tx unit to transmit the LAST character of ringbuffer

    _delay_ms(200);                                             // Extra safety for Tx to finish!

	UCSR0B &= ~( (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0) | (1<<UDRIE0));					//disable TX, RX, RX interrupt
	UCSR0C &= (1<<UCSZ10) | (1<<UCSZ00);
    12f8:	2f b7       	in	r18, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	fc 01       	movw	r30, r24
    12fe:	e0 5c       	subi	r30, 0xC0	; 192
    1300:	ff 4f       	sbci	r31, 0xFF	; 255
    1302:	10 82       	st	Z, r1
    1304:	31 96       	adiw	r30, 0x01	; 1
    1306:	10 82       	st	Z, r1
    1308:	31 96       	adiw	r30, 0x01	; 1
    130a:	10 82       	st	Z, r1
    130c:	2f bf       	out	0x3f, r18	; 63
    130e:	08 95       	ret

00001310 <rbuffer_empty>:
    1310:	8e 5b       	subi	r24, 0xBE	; 190
    1312:	9f 4f       	sbci	r25, 0xFF	; 255
    1314:	fc 01       	movw	r30, r24
    1316:	90 81       	ld	r25, Z
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	91 11       	cpse	r25, r1
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	08 95       	ret

00001320 <rbuffer_insert>:
    1320:	fb 01       	movw	r30, r22
    1322:	e0 5c       	subi	r30, 0xC0	; 192
    1324:	ff 4f       	sbci	r31, 0xFF	; 255
    1326:	90 81       	ld	r25, Z
    1328:	db 01       	movw	r26, r22
    132a:	a9 0f       	add	r26, r25
    132c:	b1 1d       	adc	r27, r1
    132e:	8c 93       	st	X, r24
    1330:	9f b7       	in	r25, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	80 81       	ld	r24, Z
    1336:	8f 5f       	subi	r24, 0xFF	; 255
    1338:	8f 73       	andi	r24, 0x3F	; 63
    133a:	80 83       	st	Z, r24
    133c:	32 96       	adiw	r30, 0x02	; 2
    133e:	80 81       	ld	r24, Z
    1340:	8f 5f       	subi	r24, 0xFF	; 255
    1342:	80 83       	st	Z, r24
    1344:	9f bf       	out	0x3f, r25	; 63
    1346:	08 95       	ret

00001348 <rbuffer_remove>:
    1348:	fc 01       	movw	r30, r24
    134a:	ef 5b       	subi	r30, 0xBF	; 191
    134c:	ff 4f       	sbci	r31, 0xFF	; 255
    134e:	20 81       	ld	r18, Z
    1350:	dc 01       	movw	r26, r24
    1352:	a2 0f       	add	r26, r18
    1354:	b1 1d       	adc	r27, r1
    1356:	3c 91       	ld	r19, X
    1358:	4f b7       	in	r20, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	20 81       	ld	r18, Z
    135e:	2f 5f       	subi	r18, 0xFF	; 255
    1360:	2f 73       	andi	r18, 0x3F	; 63
    1362:	20 83       	st	Z, r18
    1364:	31 96       	adiw	r30, 0x01	; 1
    1366:	90 81       	ld	r25, Z
    1368:	91 50       	subi	r25, 0x01	; 1
    136a:	90 83       	st	Z, r25
    136c:	4f bf       	out	0x3f, r20	; 63
    136e:	83 2f       	mov	r24, r19
    1370:	08 95       	ret

00001372 <usart0_init>:
    1372:	68 98       	cbi	0x0d, 0	; 13
    1374:	70 9a       	sbi	0x0e, 0	; 14
    1376:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <p_UART0_meta>
    137a:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <p_UART0_meta+0x1>
    137e:	8d 5b       	subi	r24, 0xBD	; 189
    1380:	9f 4f       	sbci	r25, 0xFF	; 255
    1382:	ba df       	rcall	.-140    	; 0x12f8 <rbuffer_init>
    1384:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <p_UART0_meta>
    1388:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <p_UART0_meta+0x1>
    138c:	b5 df       	rcall	.-150    	; 0x12f8 <rbuffer_init>
    138e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
    1392:	83 e3       	ldi	r24, 0x33	; 51
    1394:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
    1398:	e1 ec       	ldi	r30, 0xC1	; 193
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	88 69       	ori	r24, 0x98	; 152
    13a0:	80 83       	st	Z, r24
    13a2:	e2 ec       	ldi	r30, 0xC2	; 194
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	82 60       	ori	r24, 0x02	; 2
    13aa:	80 83       	st	Z, r24
    13ac:	78 94       	sei
    13ae:	08 95       	ret

000013b0 <usart0_send_char>:
    13b0:	60 91 3e 02 	lds	r22, 0x023E	; 0x80023e <p_UART0_meta>
    13b4:	70 91 3f 02 	lds	r23, 0x023F	; 0x80023f <p_UART0_meta+0x1>
    13b8:	fb 01       	movw	r30, r22
    13ba:	eb 57       	subi	r30, 0x7B	; 123
    13bc:	ff 4f       	sbci	r31, 0xFF	; 255
    13be:	90 81       	ld	r25, Z
    13c0:	90 34       	cpi	r25, 0x40	; 64
    13c2:	e9 f3       	breq	.-6      	; 0x13be <usart0_send_char+0xe>
    13c4:	6d 5b       	subi	r22, 0xBD	; 189
    13c6:	7f 4f       	sbci	r23, 0xFF	; 255
    13c8:	ab df       	rcall	.-170    	; 0x1320 <rbuffer_insert>
    13ca:	e1 ec       	ldi	r30, 0xC1	; 193
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	80 62       	ori	r24, 0x20	; 32
    13d2:	80 83       	st	Z, r24
    13d4:	08 95       	ret

000013d6 <usart0_send_string>:
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	ec 01       	movw	r28, r24
    13dc:	88 81       	ld	r24, Y
    13de:	88 23       	and	r24, r24
    13e0:	29 f0       	breq	.+10     	; 0x13ec <usart0_send_string+0x16>
    13e2:	21 96       	adiw	r28, 0x01	; 1
    13e4:	e5 df       	rcall	.-54     	; 0x13b0 <usart0_send_char>
    13e6:	89 91       	ld	r24, Y+
    13e8:	81 11       	cpse	r24, r1
    13ea:	fc cf       	rjmp	.-8      	; 0x13e4 <usart0_send_string+0xe>
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	08 95       	ret

000013f2 <usart0_send_array>:
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	66 23       	and	r22, r22
    13fc:	69 f0       	breq	.+26     	; 0x1418 <usart0_send_array+0x26>
    13fe:	ec 01       	movw	r28, r24
    1400:	61 50       	subi	r22, 0x01	; 1
    1402:	06 2f       	mov	r16, r22
    1404:	10 e0       	ldi	r17, 0x00	; 0
    1406:	0f 5f       	subi	r16, 0xFF	; 255
    1408:	1f 4f       	sbci	r17, 0xFF	; 255
    140a:	08 0f       	add	r16, r24
    140c:	19 1f       	adc	r17, r25
    140e:	89 91       	ld	r24, Y+
    1410:	cf df       	rcall	.-98     	; 0x13b0 <usart0_send_char>
    1412:	c0 17       	cp	r28, r16
    1414:	d1 07       	cpc	r29, r17
    1416:	d9 f7       	brne	.-10     	; 0x140e <usart0_send_array+0x1c>
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	1f 91       	pop	r17
    141e:	0f 91       	pop	r16
    1420:	08 95       	ret

00001422 <usart0_send_string_P>:
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	ec 01       	movw	r28, r24
    1428:	21 96       	adiw	r28, 0x01	; 1
    142a:	fc 01       	movw	r30, r24
    142c:	84 91       	lpm	r24, Z
    142e:	88 23       	and	r24, r24
    1430:	31 f0       	breq	.+12     	; 0x143e <usart0_send_string_P+0x1c>
    1432:	be df       	rcall	.-132    	; 0x13b0 <usart0_send_char>
    1434:	fe 01       	movw	r30, r28
    1436:	84 91       	lpm	r24, Z
    1438:	21 96       	adiw	r28, 0x01	; 1
    143a:	81 11       	cpse	r24, r1
    143c:	fa cf       	rjmp	.-12     	; 0x1432 <usart0_send_string_P+0x10>
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	08 95       	ret

00001444 <uart_get_uart0_rx_buffer_address>:
}

volatile ringbuffer_t * uart_get_uart0_rx_buffer_address(void)
{
	return &(p_UART0_meta->rb_rx);
}
    1444:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <p_UART0_meta>
    1448:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <p_UART0_meta+0x1>
    144c:	08 95       	ret

0000144e <__vector_25>:

// ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
// ISR FUNCTIONS
#ifdef USART0_ENABLE

ISR(USART0_RX_vect) {
    144e:	1f 92       	push	r1
    1450:	0f 92       	push	r0
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	0f 92       	push	r0
    1456:	11 24       	eor	r1, r1
    1458:	0b b6       	in	r0, 0x3b	; 59
    145a:	0f 92       	push	r0
    145c:	2f 93       	push	r18
    145e:	3f 93       	push	r19
    1460:	4f 93       	push	r20
    1462:	5f 93       	push	r21
    1464:	6f 93       	push	r22
    1466:	7f 93       	push	r23
    1468:	8f 93       	push	r24
    146a:	9f 93       	push	r25
    146c:	af 93       	push	r26
    146e:	bf 93       	push	r27
    1470:	ef 93       	push	r30
    1472:	ff 93       	push	r31
	
   char	data = UDR0;
    1474:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>

    if(!rbuffer_full(&p_UART0_meta->rb_rx)) {
    1478:	60 91 3e 02 	lds	r22, 0x023E	; 0x80023e <p_UART0_meta>
    147c:	70 91 3f 02 	lds	r23, 0x023F	; 0x80023f <p_UART0_meta+0x1>
uint8_t rbuffer_count(volatile ringbuffer_t* rb) {
    return rb->count;
}

bool rbuffer_full(volatile ringbuffer_t* rb) {
    return (rb->count == (uint8_t)RBUFFER_SIZE);
    1480:	fb 01       	movw	r30, r22
    1482:	ee 5b       	subi	r30, 0xBE	; 190
    1484:	ff 4f       	sbci	r31, 0xFF	; 255
    1486:	90 81       	ld	r25, Z

ISR(USART0_RX_vect) {
	
   char	data = UDR0;

    if(!rbuffer_full(&p_UART0_meta->rb_rx)) {
    1488:	90 34       	cpi	r25, 0x40	; 64
    148a:	71 f0       	breq	.+28     	; 0x14a8 <__vector_25+0x5a>
	    rbuffer_insert(data, &p_UART0_meta->rb_rx);
    148c:	49 df       	rcall	.-366    	; 0x1320 <rbuffer_insert>
	    p_UART0_meta->usart_error = UCSR0A & USART_RX_ERROR_MASK ;
    148e:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <p_UART0_meta>
    1492:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <p_UART0_meta+0x1>
    1496:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    149a:	8c 71       	andi	r24, 0x1C	; 28
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	ea 57       	subi	r30, 0x7A	; 122
    14a0:	ff 4f       	sbci	r31, 0xFF	; 255
    14a2:	91 83       	std	Z+1, r25	; 0x01
    14a4:	80 83       	st	Z, r24
    14a6:	0a c0       	rjmp	.+20     	; 0x14bc <__vector_25+0x6e>

    }
    else {
	    p_UART0_meta->usart_error = ((UCSR0A & USART_RX_ERROR_MASK) | USART_BUFFER_OVERFLOW>>8);
    14a8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    14ac:	8c 71       	andi	r24, 0x1C	; 28
    14ae:	81 60       	ori	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	fb 01       	movw	r30, r22
    14b4:	ea 57       	subi	r30, 0x7A	; 122
    14b6:	ff 4f       	sbci	r31, 0xFF	; 255
    14b8:	91 83       	std	Z+1, r25	; 0x01
    14ba:	80 83       	st	Z, r24
    }   
}
    14bc:	ff 91       	pop	r31
    14be:	ef 91       	pop	r30
    14c0:	bf 91       	pop	r27
    14c2:	af 91       	pop	r26
    14c4:	9f 91       	pop	r25
    14c6:	8f 91       	pop	r24
    14c8:	7f 91       	pop	r23
    14ca:	6f 91       	pop	r22
    14cc:	5f 91       	pop	r21
    14ce:	4f 91       	pop	r20
    14d0:	3f 91       	pop	r19
    14d2:	2f 91       	pop	r18
    14d4:	0f 90       	pop	r0
    14d6:	0b be       	out	0x3b, r0	; 59
    14d8:	0f 90       	pop	r0
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	0f 90       	pop	r0
    14de:	1f 90       	pop	r1
    14e0:	18 95       	reti

000014e2 <__vector_26>:
ISR(USART0_UDRE_vect) {
    14e2:	1f 92       	push	r1
    14e4:	0f 92       	push	r0
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	0f 92       	push	r0
    14ea:	11 24       	eor	r1, r1
    14ec:	0b b6       	in	r0, 0x3b	; 59
    14ee:	0f 92       	push	r0
    14f0:	2f 93       	push	r18
    14f2:	3f 93       	push	r19
    14f4:	4f 93       	push	r20
    14f6:	5f 93       	push	r21
    14f8:	6f 93       	push	r22
    14fa:	7f 93       	push	r23
    14fc:	8f 93       	push	r24
    14fe:	9f 93       	push	r25
    1500:	af 93       	push	r26
    1502:	bf 93       	push	r27
    1504:	ef 93       	push	r30
    1506:	ff 93       	push	r31
    if(!rbuffer_empty(&p_UART0_meta->rb_tx)) {
    1508:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <p_UART0_meta>
    150c:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <p_UART0_meta+0x1>
bool rbuffer_full(volatile ringbuffer_t* rb) {
    return (rb->count == (uint8_t)RBUFFER_SIZE);
}

bool rbuffer_empty(volatile ringbuffer_t* rb) {
    return (rb->count == 0);
    1510:	fc 01       	movw	r30, r24
    1512:	eb 57       	subi	r30, 0x7B	; 123
    1514:	ff 4f       	sbci	r31, 0xFF	; 255
    1516:	20 81       	ld	r18, Z
    else {
	    p_UART0_meta->usart_error = ((UCSR0A & USART_RX_ERROR_MASK) | USART_BUFFER_OVERFLOW>>8);
    }   
}
ISR(USART0_UDRE_vect) {
    if(!rbuffer_empty(&p_UART0_meta->rb_tx)) {
    1518:	22 23       	and	r18, r18
    151a:	31 f0       	breq	.+12     	; 0x1528 <__vector_26+0x46>
	    UDR0 = rbuffer_remove(&p_UART0_meta->rb_tx);
    151c:	8d 5b       	subi	r24, 0xBD	; 189
    151e:	9f 4f       	sbci	r25, 0xFF	; 255
    1520:	13 df       	rcall	.-474    	; 0x1348 <rbuffer_remove>
    1522:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    1526:	05 c0       	rjmp	.+10     	; 0x1532 <__vector_26+0x50>
    }
    else {
	    UCSR0B &= ~(1 << UDRE0);                   // Enable Tx buffer empty interrupt 
    1528:	e1 ec       	ldi	r30, 0xC1	; 193
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	8f 7d       	andi	r24, 0xDF	; 223
    1530:	80 83       	st	Z, r24
    }
}
    1532:	ff 91       	pop	r31
    1534:	ef 91       	pop	r30
    1536:	bf 91       	pop	r27
    1538:	af 91       	pop	r26
    153a:	9f 91       	pop	r25
    153c:	8f 91       	pop	r24
    153e:	7f 91       	pop	r23
    1540:	6f 91       	pop	r22
    1542:	5f 91       	pop	r21
    1544:	4f 91       	pop	r20
    1546:	3f 91       	pop	r19
    1548:	2f 91       	pop	r18
    154a:	0f 90       	pop	r0
    154c:	0b be       	out	0x3b, r0	; 59
    154e:	0f 90       	pop	r0
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	0f 90       	pop	r0
    1554:	1f 90       	pop	r1
    1556:	18 95       	reti

00001558 <UARTvprintf>:
//! \return None.
//
//*****************************************************************************
void
UARTvprintf(const char *pcString, va_list vaArgP)
{
    1558:	2f 92       	push	r2
    155a:	3f 92       	push	r3
    155c:	4f 92       	push	r4
    155e:	5f 92       	push	r5
    1560:	6f 92       	push	r6
    1562:	7f 92       	push	r7
    1564:	8f 92       	push	r8
    1566:	9f 92       	push	r9
    1568:	af 92       	push	r10
    156a:	bf 92       	push	r11
    156c:	cf 92       	push	r12
    156e:	df 92       	push	r13
    1570:	ef 92       	push	r14
    1572:	ff 92       	push	r15
    1574:	0f 93       	push	r16
    1576:	1f 93       	push	r17
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	aa 97       	sbiw	r28, 0x2a	; 42
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	8c 01       	movw	r16, r24
    158e:	7a a7       	std	Y+42, r23	; 0x2a
    1590:	69 a7       	std	Y+41, r22	; 0x29
                    //
                    // Convert the value into a string.
                    //
                    for(; ui32Idx; ui32Idx /= ui32Base)
                    {
                        pcBuf[ui32Pos++] =
    1592:	6e 01       	movw	r12, r28
    1594:	89 e1       	ldi	r24, 0x19	; 25
    1596:	c8 0e       	add	r12, r24
    1598:	d1 1c       	adc	r13, r1
    159a:	2c 2c       	mov	r2, r12
    159c:	3d 2c       	mov	r3, r13
    char *pcStr, pcBuf[16], cFill;

    //
    // Loop while there are more characters in the string.
    //
    while(*pcString)
    159e:	09 c3       	rjmp	.+1554   	; 0x1bb2 <UARTvprintf+0x65a>
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui32Idx = 0;
    15a0:	19 82       	std	Y+1, r1	; 0x01
    15a2:	1a 82       	std	Y+2, r1	; 0x02
    15a4:	1b 82       	std	Y+3, r1	; 0x03
    15a6:	1c 82       	std	Y+4, r1	; 0x04
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	9a 81       	ldd	r25, Y+2	; 0x02
    15ac:	ab 81       	ldd	r26, Y+3	; 0x03
    15ae:	bc 81       	ldd	r27, Y+4	; 0x04
    15b0:	f8 01       	movw	r30, r16
    15b2:	e8 0f       	add	r30, r24
    15b4:	f9 1f       	adc	r31, r25
    while(*pcString)
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui32Idx = 0;
    15b6:	80 81       	ld	r24, Z
    15b8:	85 32       	cpi	r24, 0x25	; 37
    15ba:	49 f1       	breq	.+82     	; 0x160e <UARTvprintf+0xb6>
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	9a 81       	ldd	r25, Y+2	; 0x02
    15c0:	ab 81       	ldd	r26, Y+3	; 0x03
    15c2:	bc 81       	ldd	r27, Y+4	; 0x04
    15c4:	f8 01       	movw	r30, r16
    15c6:	e8 0f       	add	r30, r24
    15c8:	f9 1f       	adc	r31, r25
    15ca:	80 81       	ld	r24, Z
    15cc:	88 23       	and	r24, r24
    15ce:	f9 f0       	breq	.+62     	; 0x160e <UARTvprintf+0xb6>
            ui32Idx++)
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	9a 81       	ldd	r25, Y+2	; 0x02
    15d4:	ab 81       	ldd	r26, Y+3	; 0x03
    15d6:	bc 81       	ldd	r27, Y+4	; 0x04
    15d8:	01 96       	adiw	r24, 0x01	; 1
    15da:	a1 1d       	adc	r26, r1
    15dc:	b1 1d       	adc	r27, r1
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	9a 83       	std	Y+2, r25	; 0x02
    15e2:	ab 83       	std	Y+3, r26	; 0x03
    15e4:	bc 83       	std	Y+4, r27	; 0x04
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui32Idx = 0;
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ea:	ab 81       	ldd	r26, Y+3	; 0x03
    15ec:	bc 81       	ldd	r27, Y+4	; 0x04
    15ee:	f8 01       	movw	r30, r16
    15f0:	e8 0f       	add	r30, r24
    15f2:	f9 1f       	adc	r31, r25
    while(*pcString)
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui32Idx = 0;
    15f4:	80 81       	ld	r24, Z
    15f6:	85 32       	cpi	r24, 0x25	; 37
    15f8:	51 f0       	breq	.+20     	; 0x160e <UARTvprintf+0xb6>
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	9a 81       	ldd	r25, Y+2	; 0x02
    15fe:	ab 81       	ldd	r26, Y+3	; 0x03
    1600:	bc 81       	ldd	r27, Y+4	; 0x04
    1602:	f8 01       	movw	r30, r16
    1604:	e8 0f       	add	r30, r24
    1606:	f9 1f       	adc	r31, r25
    1608:	80 81       	ld	r24, Z
    160a:	81 11       	cpse	r24, r1
    160c:	e1 cf       	rjmp	.-62     	; 0x15d0 <UARTvprintf+0x78>
        }

        //
        // Write this portion of the string.
        //
        CONSOLE_UART_WRITE(pcString, ui32Idx);
    160e:	69 81       	ldd	r22, Y+1	; 0x01
    1610:	7a 81       	ldd	r23, Y+2	; 0x02
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	9c 81       	ldd	r25, Y+4	; 0x04
    1616:	c8 01       	movw	r24, r16
    1618:	ec de       	rcall	.-552    	; 0x13f2 <usart0_send_array>

        //
        // Skip the portion of the string that was written.
        //
        pcString += ui32Idx;
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	9a 81       	ldd	r25, Y+2	; 0x02
    161e:	ab 81       	ldd	r26, Y+3	; 0x03
    1620:	bc 81       	ldd	r27, Y+4	; 0x04
    1622:	08 0f       	add	r16, r24
    1624:	19 1f       	adc	r17, r25

        //
        // See if the next character is a %.
        //
        if(*pcString == '%')
    1626:	d8 01       	movw	r26, r16
    1628:	8c 91       	ld	r24, X
    162a:	85 32       	cpi	r24, 0x25	; 37
    162c:	09 f0       	breq	.+2      	; 0x1630 <UARTvprintf+0xd8>
    162e:	c1 c2       	rjmp	.+1410   	; 0x1bb2 <UARTvprintf+0x65a>
        {
            //
            // Skip the %.
            //
            pcString++;
    1630:	11 96       	adiw	r26, 0x01	; 1

            //
            // Set the digit count to zero, and the fill character to space
            // (in other words, to the defaults).
            //
            ui32Count = 0;
    1632:	1d 86       	std	Y+13, r1	; 0x0d
    1634:	1e 86       	std	Y+14, r1	; 0x0e
    1636:	1f 86       	std	Y+15, r1	; 0x0f
    1638:	18 8a       	std	Y+16, r1	; 0x10
            cFill = ' ';
    163a:	68 94       	set
    163c:	ff 24       	eor	r15, r15
    163e:	f5 f8       	bld	r15, 5
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pcString++)
    1640:	8d 01       	movw	r16, r26
    1642:	0f 5f       	subi	r16, 0xFF	; 255
    1644:	1f 4f       	sbci	r17, 0xFF	; 255
    1646:	2c 91       	ld	r18, X
    1648:	42 2f       	mov	r20, r18
    164a:	02 2e       	mov	r0, r18
    164c:	00 0c       	add	r0, r0
    164e:	55 0b       	sbc	r21, r21
    1650:	66 0b       	sbc	r22, r22
    1652:	77 0b       	sbc	r23, r23
    1654:	fa 01       	movw	r30, r20
    1656:	b5 97       	sbiw	r30, 0x25	; 37
    1658:	e4 35       	cpi	r30, 0x54	; 84
    165a:	f1 05       	cpc	r31, r1
    165c:	08 f0       	brcs	.+2      	; 0x1660 <UARTvprintf+0x108>
    165e:	9f c2       	rjmp	.+1342   	; 0x1b9e <UARTvprintf+0x646>
    1660:	88 27       	eor	r24, r24
    1662:	e5 58       	subi	r30, 0x85	; 133
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	8f 4f       	sbci	r24, 0xFF	; 255
    1668:	f8 c6       	rjmp	.+3568   	; 0x245a <__tablejump2__>
                {
                    //
                    // If this is a zero, and it is the first digit, then the
                    // fill character is a zero instead of a space.
                    //
                    if((pcString[-1] == '0') && (ui32Count == 0))
    166a:	20 33       	cpi	r18, 0x30	; 48
    166c:	61 f4       	brne	.+24     	; 0x1686 <UARTvprintf+0x12e>
    166e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1670:	9e 85       	ldd	r25, Y+14	; 0x0e
    1672:	af 85       	ldd	r26, Y+15	; 0x0f
    1674:	b8 89       	ldd	r27, Y+16	; 0x10
    1676:	89 2b       	or	r24, r25
    1678:	8a 2b       	or	r24, r26
    167a:	8b 2b       	or	r24, r27
    167c:	21 f4       	brne	.+8      	; 0x1686 <UARTvprintf+0x12e>
                    {
                        cFill = '0';
    167e:	0f 2e       	mov	r0, r31
    1680:	f0 e3       	ldi	r31, 0x30	; 48
    1682:	ff 2e       	mov	r15, r31
    1684:	f0 2d       	mov	r31, r0
                    }

                    //
                    // Update the digit count.
                    //
                    ui32Count *= 10;
    1686:	8d 85       	ldd	r24, Y+13	; 0x0d
    1688:	9e 85       	ldd	r25, Y+14	; 0x0e
    168a:	af 85       	ldd	r26, Y+15	; 0x0f
    168c:	b8 89       	ldd	r27, Y+16	; 0x10
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	aa 1f       	adc	r26, r26
    1694:	bb 1f       	adc	r27, r27
    1696:	ac 01       	movw	r20, r24
    1698:	bd 01       	movw	r22, r26
    169a:	44 0f       	add	r20, r20
    169c:	55 1f       	adc	r21, r21
    169e:	66 1f       	adc	r22, r22
    16a0:	77 1f       	adc	r23, r23
    16a2:	44 0f       	add	r20, r20
    16a4:	55 1f       	adc	r21, r21
    16a6:	66 1f       	adc	r22, r22
    16a8:	77 1f       	adc	r23, r23
    16aa:	84 0f       	add	r24, r20
    16ac:	95 1f       	adc	r25, r21
    16ae:	a6 1f       	adc	r26, r22
    16b0:	b7 1f       	adc	r27, r23
    16b2:	8d 87       	std	Y+13, r24	; 0x0d
    16b4:	9e 87       	std	Y+14, r25	; 0x0e
    16b6:	af 87       	std	Y+15, r26	; 0x0f
    16b8:	b8 8b       	std	Y+16, r27	; 0x10
                    ui32Count += pcString[-1] - '0';
    16ba:	4d 85       	ldd	r20, Y+13	; 0x0d
    16bc:	5e 85       	ldd	r21, Y+14	; 0x0e
    16be:	6f 85       	ldd	r22, Y+15	; 0x0f
    16c0:	78 89       	ldd	r23, Y+16	; 0x10
    16c2:	02 2e       	mov	r0, r18
    16c4:	00 0c       	add	r0, r0
    16c6:	33 0b       	sbc	r19, r19
    16c8:	c9 01       	movw	r24, r18
    16ca:	c0 97       	sbiw	r24, 0x30	; 48
    16cc:	09 2e       	mov	r0, r25
    16ce:	00 0c       	add	r0, r0
    16d0:	aa 0b       	sbc	r26, r26
    16d2:	bb 0b       	sbc	r27, r27
    16d4:	84 0f       	add	r24, r20
    16d6:	95 1f       	adc	r25, r21
    16d8:	a6 1f       	adc	r26, r22
    16da:	b7 1f       	adc	r27, r23
    16dc:	8d 87       	std	Y+13, r24	; 0x0d
    16de:	9e 87       	std	Y+14, r25	; 0x0e
    16e0:	af 87       	std	Y+15, r26	; 0x0f
    16e2:	b8 8b       	std	Y+16, r27	; 0x10
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pcString++)
    16e4:	d8 01       	movw	r26, r16
                    ui32Count += pcString[-1] - '0';

                    //
                    // Get the next character.
                    //
                    goto again;
    16e6:	ac cf       	rjmp	.-168    	; 0x1640 <UARTvprintf+0xe8>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
    16e8:	e9 a4       	ldd	r14, Y+41	; 0x29
    16ea:	fa a4       	ldd	r15, Y+42	; 0x2a
    16ec:	b4 e0       	ldi	r27, 0x04	; 4
    16ee:	eb 0e       	add	r14, r27
    16f0:	f1 1c       	adc	r15, r1
    16f2:	e9 a5       	ldd	r30, Y+41	; 0x29
    16f4:	fa a5       	ldd	r31, Y+42	; 0x2a
    16f6:	80 81       	ld	r24, Z
    16f8:	91 81       	ldd	r25, Z+1	; 0x01
    16fa:	a2 81       	ldd	r26, Z+2	; 0x02
    16fc:	b3 81       	ldd	r27, Z+3	; 0x03
    16fe:	8d 83       	std	Y+5, r24	; 0x05
    1700:	9e 83       	std	Y+6, r25	; 0x06
    1702:	af 83       	std	Y+7, r26	; 0x07
    1704:	b8 87       	std	Y+8, r27	; 0x08

                    //
                    // Print out the character.
                    //
                    CONSOLE_UART_WRITE((char *)&ui32Value, 1);
    1706:	61 e0       	ldi	r22, 0x01	; 1
    1708:	ce 01       	movw	r24, r28
    170a:	05 96       	adiw	r24, 0x05	; 5
    170c:	72 de       	rcall	.-796    	; 0x13f2 <usart0_send_array>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
    170e:	fa a6       	std	Y+42, r15	; 0x2a
    1710:	e9 a6       	std	Y+41, r14	; 0x29
                    CONSOLE_UART_WRITE((char *)&ui32Value, 1);

                    //
                    // This command has been handled.
                    //
                    break;
    1712:	4f c2       	rjmp	.+1182   	; 0x1bb2 <UARTvprintf+0x65a>
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint16_t);
    1714:	29 a5       	ldd	r18, Y+41	; 0x29
    1716:	3a a5       	ldd	r19, Y+42	; 0x2a
    1718:	2e 5f       	subi	r18, 0xFE	; 254
    171a:	3f 4f       	sbci	r19, 0xFF	; 255
    171c:	a9 a5       	ldd	r26, Y+41	; 0x29
    171e:	ba a5       	ldd	r27, Y+42	; 0x2a
    1720:	8d 91       	ld	r24, X+
    1722:	9c 91       	ld	r25, X
    1724:	a0 e0       	ldi	r26, 0x00	; 0
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	8d 83       	std	Y+5, r24	; 0x05
    172a:	9e 83       	std	Y+6, r25	; 0x06
    172c:	af 83       	std	Y+7, r26	; 0x07
    172e:	b8 87       	std	Y+8, r27	; 0x08

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
    1730:	19 86       	std	Y+9, r1	; 0x09
    1732:	1a 86       	std	Y+10, r1	; 0x0a
    1734:	1b 86       	std	Y+11, r1	; 0x0b
    1736:	1c 86       	std	Y+12, r1	; 0x0c

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((int32_t)ui32Value < 0)
    1738:	8d 81       	ldd	r24, Y+5	; 0x05
    173a:	9e 81       	ldd	r25, Y+6	; 0x06
    173c:	af 81       	ldd	r26, Y+7	; 0x07
    173e:	b8 85       	ldd	r27, Y+8	; 0x08
    1740:	bb 23       	and	r27, r27
    1742:	c4 f4       	brge	.+48     	; 0x1774 <UARTvprintf+0x21c>
                    {
                        //
                        // Make the value positive.
                        //
                        ui32Value = -(int32_t)ui32Value;
    1744:	8d 81       	ldd	r24, Y+5	; 0x05
    1746:	9e 81       	ldd	r25, Y+6	; 0x06
    1748:	af 81       	ldd	r26, Y+7	; 0x07
    174a:	b8 85       	ldd	r27, Y+8	; 0x08
    174c:	b0 95       	com	r27
    174e:	a0 95       	com	r26
    1750:	90 95       	com	r25
    1752:	81 95       	neg	r24
    1754:	9f 4f       	sbci	r25, 0xFF	; 255
    1756:	af 4f       	sbci	r26, 0xFF	; 255
    1758:	bf 4f       	sbci	r27, 0xFF	; 255
    175a:	8d 83       	std	Y+5, r24	; 0x05
    175c:	9e 83       	std	Y+6, r25	; 0x06
    175e:	af 83       	std	Y+7, r26	; 0x07
    1760:	b8 87       	std	Y+8, r27	; 0x08

                        //
                        // Indicate that the value is negative.
                        //
                        ui32Neg = 1;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	a0 e0       	ldi	r26, 0x00	; 0
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	8d 8b       	std	Y+21, r24	; 0x15
    176c:	9e 8b       	std	Y+22, r25	; 0x16
    176e:	af 8b       	std	Y+23, r26	; 0x17
    1770:	b8 8f       	std	Y+24, r27	; 0x18
    1772:	04 c0       	rjmp	.+8      	; 0x177c <UARTvprintf+0x224>
                    {
                        //
                        // Indicate that the value is positive so that a minus
                        // sign isn't inserted.
                        //
                        ui32Neg = 0;
    1774:	1d 8a       	std	Y+21, r1	; 0x15
    1776:	1e 8a       	std	Y+22, r1	; 0x16
    1778:	1f 8a       	std	Y+23, r1	; 0x17
    177a:	18 8e       	std	Y+24, r1	; 0x18
                    }

                    //
                    // Set the base to 10.
                    //
                    ui32Base = 10;
    177c:	8a e0       	ldi	r24, 0x0A	; 10
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	a0 e0       	ldi	r26, 0x00	; 0
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	89 8b       	std	Y+17, r24	; 0x11
    1786:	9a 8b       	std	Y+18, r25	; 0x12
    1788:	ab 8b       	std	Y+19, r26	; 0x13
    178a:	bc 8b       	std	Y+20, r27	; 0x14
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint16_t);
    178c:	3a a7       	std	Y+42, r19	; 0x2a
    178e:	29 a7       	std	Y+41, r18	; 0x29
                    ui32Base = 10;

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
    1790:	ba c0       	rjmp	.+372    	; 0x1906 <UARTvprintf+0x3ae>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
    1792:	e9 a4       	ldd	r14, Y+41	; 0x29
    1794:	fa a4       	ldd	r15, Y+42	; 0x2a
    1796:	92 e0       	ldi	r25, 0x02	; 2
    1798:	e9 0e       	add	r14, r25
    179a:	f1 1c       	adc	r15, r1
    179c:	a9 a5       	ldd	r26, Y+41	; 0x29
    179e:	ba a5       	ldd	r27, Y+42	; 0x2a
    17a0:	8d 91       	ld	r24, X+
    17a2:	9c 91       	ld	r25, X

                    //
                    // Determine the length of the string.
                    //
                    for(ui32Idx = 0; pcStr[ui32Idx] != '\0'; ui32Idx++)
    17a4:	19 82       	std	Y+1, r1	; 0x01
    17a6:	1a 82       	std	Y+2, r1	; 0x02
    17a8:	1b 82       	std	Y+3, r1	; 0x03
    17aa:	1c 82       	std	Y+4, r1	; 0x04
    17ac:	49 81       	ldd	r20, Y+1	; 0x01
    17ae:	5a 81       	ldd	r21, Y+2	; 0x02
    17b0:	6b 81       	ldd	r22, Y+3	; 0x03
    17b2:	7c 81       	ldd	r23, Y+4	; 0x04
    17b4:	fc 01       	movw	r30, r24
    17b6:	e4 0f       	add	r30, r20
    17b8:	f5 1f       	adc	r31, r21
    17ba:	20 81       	ld	r18, Z
    17bc:	22 23       	and	r18, r18
    17be:	b1 f0       	breq	.+44     	; 0x17ec <UARTvprintf+0x294>
    17c0:	49 81       	ldd	r20, Y+1	; 0x01
    17c2:	5a 81       	ldd	r21, Y+2	; 0x02
    17c4:	6b 81       	ldd	r22, Y+3	; 0x03
    17c6:	7c 81       	ldd	r23, Y+4	; 0x04
    17c8:	4f 5f       	subi	r20, 0xFF	; 255
    17ca:	5f 4f       	sbci	r21, 0xFF	; 255
    17cc:	6f 4f       	sbci	r22, 0xFF	; 255
    17ce:	7f 4f       	sbci	r23, 0xFF	; 255
    17d0:	49 83       	std	Y+1, r20	; 0x01
    17d2:	5a 83       	std	Y+2, r21	; 0x02
    17d4:	6b 83       	std	Y+3, r22	; 0x03
    17d6:	7c 83       	std	Y+4, r23	; 0x04
    17d8:	49 81       	ldd	r20, Y+1	; 0x01
    17da:	5a 81       	ldd	r21, Y+2	; 0x02
    17dc:	6b 81       	ldd	r22, Y+3	; 0x03
    17de:	7c 81       	ldd	r23, Y+4	; 0x04
    17e0:	fc 01       	movw	r30, r24
    17e2:	e4 0f       	add	r30, r20
    17e4:	f5 1f       	adc	r31, r21
    17e6:	20 81       	ld	r18, Z
    17e8:	21 11       	cpse	r18, r1
    17ea:	ea cf       	rjmp	.-44     	; 0x17c0 <UARTvprintf+0x268>
                    }

                    //
                    // Write the string.
                    //
                    CONSOLE_UART_WRITE(pcStr, ui32Idx);
    17ec:	49 81       	ldd	r20, Y+1	; 0x01
    17ee:	5a 81       	ldd	r21, Y+2	; 0x02
    17f0:	6b 81       	ldd	r22, Y+3	; 0x03
    17f2:	7c 81       	ldd	r23, Y+4	; 0x04
    17f4:	64 2f       	mov	r22, r20
    17f6:	fd dd       	rcall	.-1030   	; 0x13f2 <usart0_send_array>

                    //
                    // Write any required padding spaces
                    //
                    if(ui32Count > ui32Idx)
    17f8:	4d 85       	ldd	r20, Y+13	; 0x0d
    17fa:	5e 85       	ldd	r21, Y+14	; 0x0e
    17fc:	6f 85       	ldd	r22, Y+15	; 0x0f
    17fe:	78 89       	ldd	r23, Y+16	; 0x10
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	9a 81       	ldd	r25, Y+2	; 0x02
    1804:	ab 81       	ldd	r26, Y+3	; 0x03
    1806:	bc 81       	ldd	r27, Y+4	; 0x04
    1808:	84 17       	cp	r24, r20
    180a:	95 07       	cpc	r25, r21
    180c:	a6 07       	cpc	r26, r22
    180e:	b7 07       	cpc	r27, r23
    1810:	08 f0       	brcs	.+2      	; 0x1814 <UARTvprintf+0x2bc>
    1812:	ca c1       	rjmp	.+916    	; 0x1ba8 <UARTvprintf+0x650>
                    {
                        ui32Count -= ui32Idx;
    1814:	49 81       	ldd	r20, Y+1	; 0x01
    1816:	5a 81       	ldd	r21, Y+2	; 0x02
    1818:	6b 81       	ldd	r22, Y+3	; 0x03
    181a:	7c 81       	ldd	r23, Y+4	; 0x04
    181c:	8d 85       	ldd	r24, Y+13	; 0x0d
    181e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1820:	af 85       	ldd	r26, Y+15	; 0x0f
    1822:	b8 89       	ldd	r27, Y+16	; 0x10
    1824:	84 1b       	sub	r24, r20
    1826:	95 0b       	sbc	r25, r21
    1828:	a6 0b       	sbc	r26, r22
    182a:	b7 0b       	sbc	r27, r23
    182c:	8d 87       	std	Y+13, r24	; 0x0d
    182e:	9e 87       	std	Y+14, r25	; 0x0e
    1830:	af 87       	std	Y+15, r26	; 0x0f
    1832:	b8 8b       	std	Y+16, r27	; 0x10
                        while(ui32Count--)
    1834:	8d 85       	ldd	r24, Y+13	; 0x0d
    1836:	9e 85       	ldd	r25, Y+14	; 0x0e
    1838:	af 85       	ldd	r26, Y+15	; 0x0f
    183a:	b8 89       	ldd	r27, Y+16	; 0x10
    183c:	ac 01       	movw	r20, r24
    183e:	bd 01       	movw	r22, r26
    1840:	41 50       	subi	r20, 0x01	; 1
    1842:	51 09       	sbc	r21, r1
    1844:	61 09       	sbc	r22, r1
    1846:	71 09       	sbc	r23, r1
    1848:	4d 87       	std	Y+13, r20	; 0x0d
    184a:	5e 87       	std	Y+14, r21	; 0x0e
    184c:	6f 87       	std	Y+15, r22	; 0x0f
    184e:	78 8b       	std	Y+16, r23	; 0x10
    1850:	89 2b       	or	r24, r25
    1852:	8a 2b       	or	r24, r26
    1854:	8b 2b       	or	r24, r27
    1856:	09 f4       	brne	.+2      	; 0x185a <UARTvprintf+0x302>
                        {
                            CONSOLE_UART_WRITE(" ", 1);
    1858:	aa c1       	rjmp	.+852    	; 0x1bae <UARTvprintf+0x656>
    185a:	61 e0       	ldi	r22, 0x01	; 1
    185c:	86 eb       	ldi	r24, 0xB6	; 182
    185e:	92 e0       	ldi	r25, 0x02	; 2
    1860:	c8 dd       	rcall	.-1136   	; 0x13f2 <usart0_send_array>
                    // Write any required padding spaces
                    //
                    if(ui32Count > ui32Idx)
                    {
                        ui32Count -= ui32Idx;
                        while(ui32Count--)
    1862:	8d 85       	ldd	r24, Y+13	; 0x0d
    1864:	9e 85       	ldd	r25, Y+14	; 0x0e
    1866:	af 85       	ldd	r26, Y+15	; 0x0f
    1868:	b8 89       	ldd	r27, Y+16	; 0x10
    186a:	ac 01       	movw	r20, r24
    186c:	bd 01       	movw	r22, r26
    186e:	41 50       	subi	r20, 0x01	; 1
    1870:	51 09       	sbc	r21, r1
    1872:	61 09       	sbc	r22, r1
    1874:	71 09       	sbc	r23, r1
    1876:	4d 87       	std	Y+13, r20	; 0x0d
    1878:	5e 87       	std	Y+14, r21	; 0x0e
    187a:	6f 87       	std	Y+15, r22	; 0x0f
    187c:	78 8b       	std	Y+16, r23	; 0x10
    187e:	89 2b       	or	r24, r25
    1880:	8a 2b       	or	r24, r26
    1882:	8b 2b       	or	r24, r27
    1884:	51 f7       	brne	.-44     	; 0x185a <UARTvprintf+0x302>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
    1886:	fa a6       	std	Y+42, r15	; 0x2a
    1888:	e9 a6       	std	Y+41, r14	; 0x29
    188a:	93 c1       	rjmp	.+806    	; 0x1bb2 <UARTvprintf+0x65a>
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint16_t);
    188c:	e9 a5       	ldd	r30, Y+41	; 0x29
    188e:	fa a5       	ldd	r31, Y+42	; 0x2a
    1890:	80 81       	ld	r24, Z
    1892:	91 81       	ldd	r25, Z+1	; 0x01
    1894:	a0 e0       	ldi	r26, 0x00	; 0
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	8d 83       	std	Y+5, r24	; 0x05
    189a:	9e 83       	std	Y+6, r25	; 0x06
    189c:	af 83       	std	Y+7, r26	; 0x07
    189e:	b8 87       	std	Y+8, r27	; 0x08

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
    18a0:	19 86       	std	Y+9, r1	; 0x09
    18a2:	1a 86       	std	Y+10, r1	; 0x0a
    18a4:	1b 86       	std	Y+11, r1	; 0x0b
    18a6:	1c 86       	std	Y+12, r1	; 0x0c

                    //
                    // Set the base to 10.
                    //
                    ui32Base = 10;
    18a8:	8a e0       	ldi	r24, 0x0A	; 10
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	a0 e0       	ldi	r26, 0x00	; 0
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	89 8b       	std	Y+17, r24	; 0x11
    18b2:	9a 8b       	std	Y+18, r25	; 0x12
    18b4:	ab 8b       	std	Y+19, r26	; 0x13
    18b6:	bc 8b       	std	Y+20, r27	; 0x14

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32Neg = 0;
    18b8:	1d 8a       	std	Y+21, r1	; 0x15
    18ba:	1e 8a       	std	Y+22, r1	; 0x16
    18bc:	1f 8a       	std	Y+23, r1	; 0x17
    18be:	18 8e       	std	Y+24, r1	; 0x18
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint16_t);
    18c0:	32 96       	adiw	r30, 0x02	; 2
    18c2:	fa a7       	std	Y+42, r31	; 0x2a
    18c4:	e9 a7       	std	Y+41, r30	; 0x29
                    ui32Neg = 0;

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
    18c6:	1f c0       	rjmp	.+62     	; 0x1906 <UARTvprintf+0x3ae>
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint16_t);
    18c8:	a9 a5       	ldd	r26, Y+41	; 0x29
    18ca:	ba a5       	ldd	r27, Y+42	; 0x2a
    18cc:	8d 91       	ld	r24, X+
    18ce:	9c 91       	ld	r25, X
    18d0:	a0 e0       	ldi	r26, 0x00	; 0
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	8d 83       	std	Y+5, r24	; 0x05
    18d6:	9e 83       	std	Y+6, r25	; 0x06
    18d8:	af 83       	std	Y+7, r26	; 0x07
    18da:	b8 87       	std	Y+8, r27	; 0x08

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
    18dc:	19 86       	std	Y+9, r1	; 0x09
    18de:	1a 86       	std	Y+10, r1	; 0x0a
    18e0:	1b 86       	std	Y+11, r1	; 0x0b
    18e2:	1c 86       	std	Y+12, r1	; 0x0c

                    //
                    // Set the base to 16.
                    //
                    ui32Base = 16;
    18e4:	80 e1       	ldi	r24, 0x10	; 16
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	a0 e0       	ldi	r26, 0x00	; 0
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	89 8b       	std	Y+17, r24	; 0x11
    18ee:	9a 8b       	std	Y+18, r25	; 0x12
    18f0:	ab 8b       	std	Y+19, r26	; 0x13
    18f2:	bc 8b       	std	Y+20, r27	; 0x14

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32Neg = 0;
    18f4:	1d 8a       	std	Y+21, r1	; 0x15
    18f6:	1e 8a       	std	Y+22, r1	; 0x16
    18f8:	1f 8a       	std	Y+23, r1	; 0x17
    18fa:	18 8e       	std	Y+24, r1	; 0x18
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint16_t);
    18fc:	a9 a5       	ldd	r26, Y+41	; 0x29
    18fe:	ba a5       	ldd	r27, Y+42	; 0x2a
    1900:	12 96       	adiw	r26, 0x02	; 2
    1902:	ba a7       	std	Y+42, r27	; 0x2a
    1904:	a9 a7       	std	Y+41, r26	; 0x29
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	a0 e0       	ldi	r26, 0x00	; 0
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	89 83       	std	Y+1, r24	; 0x01
    1910:	9a 83       	std	Y+2, r25	; 0x02
    1912:	ab 83       	std	Y+3, r26	; 0x03
    1914:	bc 83       	std	Y+4, r27	; 0x04
                        (((ui32Idx * ui32Base) <= ui32Value) &&
    1916:	29 81       	ldd	r18, Y+1	; 0x01
    1918:	3a 81       	ldd	r19, Y+2	; 0x02
    191a:	4b 81       	ldd	r20, Y+3	; 0x03
    191c:	5c 81       	ldd	r21, Y+4	; 0x04
    191e:	69 89       	ldd	r22, Y+17	; 0x11
    1920:	7a 89       	ldd	r23, Y+18	; 0x12
    1922:	8b 89       	ldd	r24, Y+19	; 0x13
    1924:	9c 89       	ldd	r25, Y+20	; 0x14
    1926:	8d 80       	ldd	r8, Y+5	; 0x05
    1928:	9e 80       	ldd	r9, Y+6	; 0x06
    192a:	af 80       	ldd	r10, Y+7	; 0x07
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
    192c:	b8 84       	ldd	r11, Y+8	; 0x08
    192e:	64 d5       	rcall	.+2760   	; 0x23f8 <__mulsi3>
    1930:	86 16       	cp	r8, r22
    1932:	97 06       	cpc	r9, r23
    1934:	a8 06       	cpc	r10, r24
    1936:	b9 06       	cpc	r11, r25
    1938:	58 f5       	brcc	.+86     	; 0x1990 <UARTvprintf+0x438>
    193a:	44 c0       	rjmp	.+136    	; 0x19c4 <UARTvprintf+0x46c>
                        (((ui32Idx * ui32Base) <= ui32Value) &&
                         (((ui32Idx * ui32Base) / ui32Base) == ui32Idx));
                        ui32Idx *= ui32Base, ui32Count--)
    193c:	29 89       	ldd	r18, Y+17	; 0x11
    193e:	3a 89       	ldd	r19, Y+18	; 0x12
    1940:	4b 89       	ldd	r20, Y+19	; 0x13
    1942:	5c 89       	ldd	r21, Y+20	; 0x14
    1944:	69 81       	ldd	r22, Y+1	; 0x01
    1946:	7a 81       	ldd	r23, Y+2	; 0x02
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	9c 81       	ldd	r25, Y+4	; 0x04
    194c:	55 d5       	rcall	.+2730   	; 0x23f8 <__mulsi3>
    194e:	69 83       	std	Y+1, r22	; 0x01
    1950:	7a 83       	std	Y+2, r23	; 0x02
    1952:	8b 83       	std	Y+3, r24	; 0x03
    1954:	9c 83       	std	Y+4, r25	; 0x04
    1956:	8d 85       	ldd	r24, Y+13	; 0x0d
    1958:	9e 85       	ldd	r25, Y+14	; 0x0e
    195a:	af 85       	ldd	r26, Y+15	; 0x0f
    195c:	b8 89       	ldd	r27, Y+16	; 0x10
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	a1 09       	sbc	r26, r1
    1962:	b1 09       	sbc	r27, r1
    1964:	8d 87       	std	Y+13, r24	; 0x0d
    1966:	9e 87       	std	Y+14, r25	; 0x0e
    1968:	af 87       	std	Y+15, r26	; 0x0f
    196a:	b8 8b       	std	Y+16, r27	; 0x10
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
                        (((ui32Idx * ui32Base) <= ui32Value) &&
    196c:	29 81       	ldd	r18, Y+1	; 0x01
    196e:	3a 81       	ldd	r19, Y+2	; 0x02
    1970:	4b 81       	ldd	r20, Y+3	; 0x03
    1972:	5c 81       	ldd	r21, Y+4	; 0x04
    1974:	69 89       	ldd	r22, Y+17	; 0x11
    1976:	7a 89       	ldd	r23, Y+18	; 0x12
    1978:	8b 89       	ldd	r24, Y+19	; 0x13
    197a:	9c 89       	ldd	r25, Y+20	; 0x14
    197c:	8d 80       	ldd	r8, Y+5	; 0x05
    197e:	9e 80       	ldd	r9, Y+6	; 0x06
    1980:	af 80       	ldd	r10, Y+7	; 0x07
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
    1982:	b8 84       	ldd	r11, Y+8	; 0x08
    1984:	39 d5       	rcall	.+2674   	; 0x23f8 <__mulsi3>
    1986:	86 16       	cp	r8, r22
    1988:	97 06       	cpc	r9, r23
    198a:	a8 06       	cpc	r10, r24
    198c:	b9 06       	cpc	r11, r25
    198e:	d0 f0       	brcs	.+52     	; 0x19c4 <UARTvprintf+0x46c>
                        (((ui32Idx * ui32Base) <= ui32Value) &&
                         (((ui32Idx * ui32Base) / ui32Base) == ui32Idx));
    1990:	29 81       	ldd	r18, Y+1	; 0x01
    1992:	3a 81       	ldd	r19, Y+2	; 0x02
    1994:	4b 81       	ldd	r20, Y+3	; 0x03
    1996:	5c 81       	ldd	r21, Y+4	; 0x04
    1998:	69 89       	ldd	r22, Y+17	; 0x11
    199a:	7a 89       	ldd	r23, Y+18	; 0x12
    199c:	8b 89       	ldd	r24, Y+19	; 0x13
    199e:	9c 89       	ldd	r25, Y+20	; 0x14
    19a0:	49 88       	ldd	r4, Y+17	; 0x11
    19a2:	5a 88       	ldd	r5, Y+18	; 0x12
    19a4:	6b 88       	ldd	r6, Y+19	; 0x13
    19a6:	7c 88       	ldd	r7, Y+20	; 0x14
    19a8:	89 80       	ldd	r8, Y+1	; 0x01
    19aa:	9a 80       	ldd	r9, Y+2	; 0x02
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
                        (((ui32Idx * ui32Base) <= ui32Value) &&
    19ac:	ab 80       	ldd	r10, Y+3	; 0x03
    19ae:	bc 80       	ldd	r11, Y+4	; 0x04
    19b0:	23 d5       	rcall	.+2630   	; 0x23f8 <__mulsi3>
    19b2:	a3 01       	movw	r20, r6
    19b4:	92 01       	movw	r18, r4
    19b6:	2f d5       	rcall	.+2654   	; 0x2416 <__udivmodsi4>
    19b8:	28 15       	cp	r18, r8
    19ba:	39 05       	cpc	r19, r9
    19bc:	4a 05       	cpc	r20, r10
    19be:	5b 05       	cpc	r21, r11
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <UARTvprintf+0x46c>
    19c2:	bc cf       	rjmp	.-136    	; 0x193c <UARTvprintf+0x3e4>

                    //
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ui32Neg)
    19c4:	8d 89       	ldd	r24, Y+21	; 0x15
    19c6:	9e 89       	ldd	r25, Y+22	; 0x16
    19c8:	af 89       	ldd	r26, Y+23	; 0x17
    19ca:	b8 8d       	ldd	r27, Y+24	; 0x18
    19cc:	89 2b       	or	r24, r25
    19ce:	8a 2b       	or	r24, r26
    19d0:	8b 2b       	or	r24, r27
    19d2:	59 f0       	breq	.+22     	; 0x19ea <UARTvprintf+0x492>
                    {
                        ui32Count--;
    19d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d8:	af 85       	ldd	r26, Y+15	; 0x0f
    19da:	b8 89       	ldd	r27, Y+16	; 0x10
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	a1 09       	sbc	r26, r1
    19e0:	b1 09       	sbc	r27, r1
    19e2:	8d 87       	std	Y+13, r24	; 0x0d
    19e4:	9e 87       	std	Y+14, r25	; 0x0e
    19e6:	af 87       	std	Y+15, r26	; 0x0f
    19e8:	b8 8b       	std	Y+16, r27	; 0x10

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ui32Neg && (cFill == '0'))
    19ea:	8d 89       	ldd	r24, Y+21	; 0x15
    19ec:	9e 89       	ldd	r25, Y+22	; 0x16
    19ee:	af 89       	ldd	r26, Y+23	; 0x17
    19f0:	b8 8d       	ldd	r27, Y+24	; 0x18
    19f2:	89 2b       	or	r24, r25
    19f4:	8a 2b       	or	r24, r26
    19f6:	8b 2b       	or	r24, r27
    19f8:	d1 f0       	breq	.+52     	; 0x1a2e <UARTvprintf+0x4d6>
    19fa:	90 e3       	ldi	r25, 0x30	; 48
    19fc:	f9 12       	cpse	r15, r25
    19fe:	17 c0       	rjmp	.+46     	; 0x1a2e <UARTvprintf+0x4d6>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui32Pos++] = '-';
    1a00:	89 85       	ldd	r24, Y+9	; 0x09
    1a02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a04:	ab 85       	ldd	r26, Y+11	; 0x0b
    1a06:	bc 85       	ldd	r27, Y+12	; 0x0c
    1a08:	ac 01       	movw	r20, r24
    1a0a:	bd 01       	movw	r22, r26
    1a0c:	4f 5f       	subi	r20, 0xFF	; 255
    1a0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a10:	6f 4f       	sbci	r22, 0xFF	; 255
    1a12:	7f 4f       	sbci	r23, 0xFF	; 255
    1a14:	49 87       	std	Y+9, r20	; 0x09
    1a16:	5a 87       	std	Y+10, r21	; 0x0a
    1a18:	6b 87       	std	Y+11, r22	; 0x0b
    1a1a:	7c 87       	std	Y+12, r23	; 0x0c
    1a1c:	f6 01       	movw	r30, r12
    1a1e:	e8 0f       	add	r30, r24
    1a20:	f9 1f       	adc	r31, r25
    1a22:	ad e2       	ldi	r26, 0x2D	; 45
    1a24:	a0 83       	st	Z, r26

                        //
                        // The minus sign has been placed, so turn off the
                        // negative flag.
                        //
                        ui32Neg = 0;
    1a26:	1d 8a       	std	Y+21, r1	; 0x15
    1a28:	1e 8a       	std	Y+22, r1	; 0x16
    1a2a:	1f 8a       	std	Y+23, r1	; 0x17
    1a2c:	18 8e       	std	Y+24, r1	; 0x18

                    //
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ui32Count > 1) && (ui32Count < 16))
    1a2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a32:	af 85       	ldd	r26, Y+15	; 0x0f
    1a34:	b8 89       	ldd	r27, Y+16	; 0x10
    1a36:	02 97       	sbiw	r24, 0x02	; 2
    1a38:	a1 05       	cpc	r26, r1
    1a3a:	b1 05       	cpc	r27, r1
    1a3c:	08 f4       	brcc	.+2      	; 0x1a40 <UARTvprintf+0x4e8>
    1a3e:	40 c0       	rjmp	.+128    	; 0x1ac0 <UARTvprintf+0x568>
    1a40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a44:	af 85       	ldd	r26, Y+15	; 0x0f
    1a46:	b8 89       	ldd	r27, Y+16	; 0x10
    1a48:	40 97       	sbiw	r24, 0x10	; 16
    1a4a:	a1 05       	cpc	r26, r1
    1a4c:	b1 05       	cpc	r27, r1
    1a4e:	c0 f5       	brcc	.+112    	; 0x1ac0 <UARTvprintf+0x568>
                    {
                        for(ui32Count--; ui32Count; ui32Count--)
    1a50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a54:	af 85       	ldd	r26, Y+15	; 0x0f
    1a56:	b8 89       	ldd	r27, Y+16	; 0x10
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	a1 09       	sbc	r26, r1
    1a5c:	b1 09       	sbc	r27, r1
    1a5e:	8d 87       	std	Y+13, r24	; 0x0d
    1a60:	9e 87       	std	Y+14, r25	; 0x0e
    1a62:	af 87       	std	Y+15, r26	; 0x0f
    1a64:	b8 8b       	std	Y+16, r27	; 0x10
    1a66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a6a:	af 85       	ldd	r26, Y+15	; 0x0f
    1a6c:	b8 89       	ldd	r27, Y+16	; 0x10
    1a6e:	89 2b       	or	r24, r25
    1a70:	8a 2b       	or	r24, r26
    1a72:	8b 2b       	or	r24, r27
    1a74:	29 f1       	breq	.+74     	; 0x1ac0 <UARTvprintf+0x568>
                        {
                            pcBuf[ui32Pos++] = cFill;
    1a76:	89 85       	ldd	r24, Y+9	; 0x09
    1a78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7a:	ab 85       	ldd	r26, Y+11	; 0x0b
    1a7c:	bc 85       	ldd	r27, Y+12	; 0x0c
    1a7e:	ac 01       	movw	r20, r24
    1a80:	bd 01       	movw	r22, r26
    1a82:	4f 5f       	subi	r20, 0xFF	; 255
    1a84:	5f 4f       	sbci	r21, 0xFF	; 255
    1a86:	6f 4f       	sbci	r22, 0xFF	; 255
    1a88:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8a:	49 87       	std	Y+9, r20	; 0x09
    1a8c:	5a 87       	std	Y+10, r21	; 0x0a
    1a8e:	6b 87       	std	Y+11, r22	; 0x0b
    1a90:	7c 87       	std	Y+12, r23	; 0x0c
    1a92:	f6 01       	movw	r30, r12
    1a94:	e8 0f       	add	r30, r24
    1a96:	f9 1f       	adc	r31, r25
    1a98:	f0 82       	st	Z, r15
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ui32Count > 1) && (ui32Count < 16))
                    {
                        for(ui32Count--; ui32Count; ui32Count--)
    1a9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a9e:	af 85       	ldd	r26, Y+15	; 0x0f
    1aa0:	b8 89       	ldd	r27, Y+16	; 0x10
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	a1 09       	sbc	r26, r1
    1aa6:	b1 09       	sbc	r27, r1
    1aa8:	8d 87       	std	Y+13, r24	; 0x0d
    1aaa:	9e 87       	std	Y+14, r25	; 0x0e
    1aac:	af 87       	std	Y+15, r26	; 0x0f
    1aae:	b8 8b       	std	Y+16, r27	; 0x10
    1ab0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab4:	af 85       	ldd	r26, Y+15	; 0x0f
    1ab6:	b8 89       	ldd	r27, Y+16	; 0x10
    1ab8:	89 2b       	or	r24, r25
    1aba:	8a 2b       	or	r24, r26
    1abc:	8b 2b       	or	r24, r27
    1abe:	d9 f6       	brne	.-74     	; 0x1a76 <UARTvprintf+0x51e>

                    //
                    // If the value is negative, then place the minus sign
                    // before the number.
                    //
                    if(ui32Neg)
    1ac0:	8d 89       	ldd	r24, Y+21	; 0x15
    1ac2:	9e 89       	ldd	r25, Y+22	; 0x16
    1ac4:	af 89       	ldd	r26, Y+23	; 0x17
    1ac6:	b8 8d       	ldd	r27, Y+24	; 0x18
    1ac8:	89 2b       	or	r24, r25
    1aca:	8a 2b       	or	r24, r26
    1acc:	8b 2b       	or	r24, r27
    1ace:	99 f0       	breq	.+38     	; 0x1af6 <UARTvprintf+0x59e>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui32Pos++] = '-';
    1ad0:	89 85       	ldd	r24, Y+9	; 0x09
    1ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad4:	ab 85       	ldd	r26, Y+11	; 0x0b
    1ad6:	bc 85       	ldd	r27, Y+12	; 0x0c
    1ad8:	ac 01       	movw	r20, r24
    1ada:	bd 01       	movw	r22, r26
    1adc:	4f 5f       	subi	r20, 0xFF	; 255
    1ade:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae0:	6f 4f       	sbci	r22, 0xFF	; 255
    1ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae4:	49 87       	std	Y+9, r20	; 0x09
    1ae6:	5a 87       	std	Y+10, r21	; 0x0a
    1ae8:	6b 87       	std	Y+11, r22	; 0x0b
    1aea:	7c 87       	std	Y+12, r23	; 0x0c
    1aec:	f6 01       	movw	r30, r12
    1aee:	e8 0f       	add	r30, r24
    1af0:	f9 1f       	adc	r31, r25
    1af2:	bd e2       	ldi	r27, 0x2D	; 45
    1af4:	b0 83       	st	Z, r27
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ui32Idx; ui32Idx /= ui32Base)
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	9a 81       	ldd	r25, Y+2	; 0x02
    1afa:	ab 81       	ldd	r26, Y+3	; 0x03
    1afc:	bc 81       	ldd	r27, Y+4	; 0x04
    1afe:	89 2b       	or	r24, r25
    1b00:	8a 2b       	or	r24, r26
    1b02:	8b 2b       	or	r24, r27
    1b04:	09 f4       	brne	.+2      	; 0x1b08 <UARTvprintf+0x5b0>
    1b06:	3f c0       	rjmp	.+126    	; 0x1b86 <UARTvprintf+0x62e>
                    {
                        pcBuf[ui32Pos++] =
    1b08:	49 84       	ldd	r4, Y+9	; 0x09
    1b0a:	5a 84       	ldd	r5, Y+10	; 0x0a
    1b0c:	6b 84       	ldd	r6, Y+11	; 0x0b
    1b0e:	7c 84       	ldd	r7, Y+12	; 0x0c
    1b10:	b3 01       	movw	r22, r6
    1b12:	a2 01       	movw	r20, r4
    1b14:	4f 5f       	subi	r20, 0xFF	; 255
    1b16:	5f 4f       	sbci	r21, 0xFF	; 255
    1b18:	6f 4f       	sbci	r22, 0xFF	; 255
    1b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1c:	49 87       	std	Y+9, r20	; 0x09
    1b1e:	5a 87       	std	Y+10, r21	; 0x0a
    1b20:	6b 87       	std	Y+11, r22	; 0x0b
    1b22:	7c 87       	std	Y+12, r23	; 0x0c
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
    1b24:	6d 81       	ldd	r22, Y+5	; 0x05
    1b26:	7e 81       	ldd	r23, Y+6	; 0x06
    1b28:	8f 81       	ldd	r24, Y+7	; 0x07
    1b2a:	98 85       	ldd	r25, Y+8	; 0x08
    1b2c:	29 81       	ldd	r18, Y+1	; 0x01
    1b2e:	3a 81       	ldd	r19, Y+2	; 0x02
    1b30:	4b 81       	ldd	r20, Y+3	; 0x03
    1b32:	5c 81       	ldd	r21, Y+4	; 0x04
    1b34:	89 88       	ldd	r8, Y+17	; 0x11
    1b36:	9a 88       	ldd	r9, Y+18	; 0x12
                    //
                    // Convert the value into a string.
                    //
                    for(; ui32Idx; ui32Idx /= ui32Base)
                    {
                        pcBuf[ui32Pos++] =
    1b38:	ab 88       	ldd	r10, Y+19	; 0x13
    1b3a:	bc 88       	ldd	r11, Y+20	; 0x14
    1b3c:	76 01       	movw	r14, r12
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
    1b3e:	e4 0c       	add	r14, r4
    1b40:	f5 1c       	adc	r15, r5
    1b42:	69 d4       	rcall	.+2258   	; 0x2416 <__udivmodsi4>
    1b44:	ca 01       	movw	r24, r20
    1b46:	b9 01       	movw	r22, r18
    1b48:	a5 01       	movw	r20, r10
    1b4a:	94 01       	movw	r18, r8
    1b4c:	64 d4       	rcall	.+2248   	; 0x2416 <__udivmodsi4>
    1b4e:	fb 01       	movw	r30, r22
    1b50:	ef 5e       	subi	r30, 0xEF	; 239
                    //
                    // Convert the value into a string.
                    //
                    for(; ui32Idx; ui32Idx /= ui32Base)
                    {
                        pcBuf[ui32Pos++] =
    1b52:	fb 4f       	sbci	r31, 0xFB	; 251
    1b54:	80 81       	ld	r24, Z
    1b56:	f7 01       	movw	r30, r14
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
                    }
    1b58:	80 83       	st	Z, r24
    1b5a:	29 89       	ldd	r18, Y+17	; 0x11
    1b5c:	3a 89       	ldd	r19, Y+18	; 0x12
    1b5e:	4b 89       	ldd	r20, Y+19	; 0x13
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ui32Idx; ui32Idx /= ui32Base)
    1b60:	5c 89       	ldd	r21, Y+20	; 0x14
    1b62:	69 81       	ldd	r22, Y+1	; 0x01
    1b64:	7a 81       	ldd	r23, Y+2	; 0x02
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6a:	55 d4       	rcall	.+2218   	; 0x2416 <__udivmodsi4>
    1b6c:	29 83       	std	Y+1, r18	; 0x01
    1b6e:	3a 83       	std	Y+2, r19	; 0x02
    1b70:	4b 83       	std	Y+3, r20	; 0x03
    1b72:	5c 83       	std	Y+4, r21	; 0x04
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	9a 81       	ldd	r25, Y+2	; 0x02
    1b78:	ab 81       	ldd	r26, Y+3	; 0x03
    1b7a:	bc 81       	ldd	r27, Y+4	; 0x04
    1b7c:	89 2b       	or	r24, r25
    1b7e:	8a 2b       	or	r24, r26
    1b80:	8b 2b       	or	r24, r27
                    }

                    //
                    // Write the string.
                    //
                    CONSOLE_UART_WRITE(pcBuf, ui32Pos);
    1b82:	09 f0       	breq	.+2      	; 0x1b86 <UARTvprintf+0x62e>
    1b84:	c1 cf       	rjmp	.-126    	; 0x1b08 <UARTvprintf+0x5b0>
    1b86:	69 85       	ldd	r22, Y+9	; 0x09
    1b88:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b8e:	82 2d       	mov	r24, r2

                    //
                    // This command has been handled.
                    //
                    break;
    1b90:	93 2d       	mov	r25, r3
                case '%':
                {
                    //
                    // Simply write a single %.
                    //
                    CONSOLE_UART_WRITE(pcString - 1, 1);
    1b92:	2f dc       	rcall	.-1954   	; 0x13f2 <usart0_send_array>
    1b94:	0e c0       	rjmp	.+28     	; 0x1bb2 <UARTvprintf+0x65a>
    1b96:	61 e0       	ldi	r22, 0x01	; 1
    1b98:	cd 01       	movw	r24, r26

                    //
                    // This command has been handled.
                    //
                    break;
    1b9a:	2b dc       	rcall	.-1962   	; 0x13f2 <usart0_send_array>
                default:
                {
                    //
                    // Indicate an error.
                    //
                    CONSOLE_UART_WRITE("ERROR", 5);
    1b9c:	0a c0       	rjmp	.+20     	; 0x1bb2 <UARTvprintf+0x65a>
    1b9e:	65 e0       	ldi	r22, 0x05	; 5
    1ba0:	82 e2       	ldi	r24, 0x22	; 34
    1ba2:	94 e0       	ldi	r25, 0x04	; 4
    1ba4:	26 dc       	rcall	.-1972   	; 0x13f2 <usart0_send_array>

                    //
                    // This command has been handled.
                    //
                    break;
    1ba6:	05 c0       	rjmp	.+10     	; 0x1bb2 <UARTvprintf+0x65a>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
    1ba8:	fa a6       	std	Y+42, r15	; 0x2a
    1baa:	e9 a6       	std	Y+41, r14	; 0x29
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <UARTvprintf+0x65a>
    1bae:	fa a6       	std	Y+42, r15	; 0x2a
    1bb0:	e9 a6       	std	Y+41, r14	; 0x29
    char *pcStr, pcBuf[16], cFill;

    //
    // Loop while there are more characters in the string.
    //
    while(*pcString)
    1bb2:	d8 01       	movw	r26, r16
    1bb4:	8c 91       	ld	r24, X
    1bb6:	81 11       	cpse	r24, r1
    1bb8:	f3 cc       	rjmp	.-1562   	; 0x15a0 <UARTvprintf+0x48>
                    break;
                }
            }
        }
    }
}
    1bba:	aa 96       	adiw	r28, 0x2a	; 42
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	ff 90       	pop	r15
    1bd0:	ef 90       	pop	r14
    1bd2:	df 90       	pop	r13
    1bd4:	cf 90       	pop	r12
    1bd6:	bf 90       	pop	r11
    1bd8:	af 90       	pop	r10
    1bda:	9f 90       	pop	r9
    1bdc:	8f 90       	pop	r8
    1bde:	7f 90       	pop	r7
    1be0:	6f 90       	pop	r6
    1be2:	5f 90       	pop	r5
    1be4:	4f 90       	pop	r4
    1be6:	3f 90       	pop	r3
    1be8:	2f 90       	pop	r2
    1bea:	08 95       	ret

00001bec <UARTprintf>:
//! \return None.
//
//*****************************************************************************
void
UARTprintf(const char *pcString, ...)
{
    1bec:	cf 93       	push	r28
    1bee:	df 93       	push	r29
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	be 01       	movw	r22, r28
    1bf6:	6a 5f       	subi	r22, 0xFA	; 250
    1bf8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfa:	fb 01       	movw	r30, r22
    1bfc:	81 91       	ld	r24, Z+
    1bfe:	91 91       	ld	r25, Z+
    1c00:	bf 01       	movw	r22, r30
    //
    // Start the varargs processing.
    //
    va_start(vaArgP, pcString);

    UARTvprintf(pcString, vaArgP);
    1c02:	aa dc       	rcall	.-1708   	; 0x1558 <UARTvprintf>

    //
    // We're finished with the varargs now.
    //
    va_end(vaArgP);
    1c04:	df 91       	pop	r29
    1c06:	cf 91       	pop	r28
    1c08:	08 95       	ret

00001c0a <DAC_Init>:
 */ 
#include "MCP4902.h"

void DAC_Init(void)
{
	DAC_CS_PORT |= (1<<DAC_CS_PIN);
    1c0a:	10 9a       	sbi	0x02, 0	; 2
	DAC_LATCH_PORT |= (1<<DAC_LATCH_PIN);
    1c0c:	e8 e0       	ldi	r30, 0x08	; 8
    1c0e:	f1 e0       	ldi	r31, 0x01	; 1
    1c10:	80 81       	ld	r24, Z
    1c12:	80 61       	ori	r24, 0x10	; 16
    1c14:	80 83       	st	Z, r24
	
	DAC_CS_DDR |= (1<<DAC_CS_PIN);
    1c16:	08 9a       	sbi	0x01, 0	; 1
	DAC_LATCH_DDR |= (1<<DAC_LATCH_PIN);
    1c18:	e7 e0       	ldi	r30, 0x07	; 7
    1c1a:	f1 e0       	ldi	r31, 0x01	; 1
    1c1c:	80 81       	ld	r24, Z
    1c1e:	80 61       	ori	r24, 0x10	; 16
    1c20:	80 83       	st	Z, r24
    1c22:	08 95       	ret

00001c24 <v2dac>:
}

uint8_t v2dac(uint16_t voltage)
{
	return (voltage * 2.55f)/_VREF_DAC;
    1c24:	bc 01       	movw	r22, r24
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	cd d2       	rcall	.+1434   	; 0x21c6 <__floatunsisf>
    1c2c:	23 e3       	ldi	r18, 0x33	; 51
    1c2e:	33 e3       	ldi	r19, 0x33	; 51
    1c30:	43 e2       	ldi	r20, 0x23	; 35
    1c32:	50 e4       	ldi	r21, 0x40	; 64
    1c34:	7e d3       	rcall	.+1788   	; 0x2332 <__mulsf3>
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	40 ea       	ldi	r20, 0xA0	; 160
    1c3c:	50 e4       	ldi	r21, 0x40	; 64
    1c3e:	2f d2       	rcall	.+1118   	; 0x209e <__divsf3>
    1c40:	96 d2       	rcall	.+1324   	; 0x216e <__fixunssfsi>
    1c42:	86 2f       	mov	r24, r22
}
    1c44:	08 95       	ret

00001c46 <dac2v>:

uint16_t dac2v(uint8_t dac)
{
	return (dac*_VREF_DAC)/2.55f;
    1c46:	68 2f       	mov	r22, r24
    1c48:	70 e0       	ldi	r23, 0x00	; 0
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	bd d2       	rcall	.+1402   	; 0x21ca <__floatsisf>
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 ea       	ldi	r20, 0xA0	; 160
    1c56:	50 e4       	ldi	r21, 0x40	; 64
    1c58:	6c d3       	rcall	.+1752   	; 0x2332 <__mulsf3>
    1c5a:	23 e3       	ldi	r18, 0x33	; 51
    1c5c:	33 e3       	ldi	r19, 0x33	; 51
    1c5e:	43 e2       	ldi	r20, 0x23	; 35
    1c60:	50 e4       	ldi	r21, 0x40	; 64
    1c62:	1d d2       	rcall	.+1082   	; 0x209e <__divsf3>
    1c64:	84 d2       	rcall	.+1288   	; 0x216e <__fixunssfsi>
}
    1c66:	cb 01       	movw	r24, r22
    1c68:	08 95       	ret

00001c6a <DAC_Write>:

void DAC_Write(uint8_t channel, uint8_t DAC_Data)
{
    1c6a:	cf 93       	push	r28
    1c6c:	df 93       	push	r29
	DAC_CS_PORT &= ~(1<<DAC_CS_PIN);
    1c6e:	10 98       	cbi	0x02, 0	; 2
	uint16_t temp = channel ? ((1<<MCP_AB_BIT)|(1<<MCP_GA_BIT)|(1<<MCP_SHDN_BIT)|(DAC_Data<<4)):((1<<MCP_GA_BIT)|(1<<MCP_SHDN_BIT)|(DAC_Data<<4));
    1c70:	88 23       	and	r24, r24
    1c72:	31 f0       	breq	.+12     	; 0x1c80 <DAC_Write+0x16>
    1c74:	80 e1       	ldi	r24, 0x10	; 16
    1c76:	68 9f       	mul	r22, r24
    1c78:	e0 01       	movw	r28, r0
    1c7a:	11 24       	eor	r1, r1
    1c7c:	d0 6b       	ori	r29, 0xB0	; 176
    1c7e:	05 c0       	rjmp	.+10     	; 0x1c8a <DAC_Write+0x20>
    1c80:	80 e1       	ldi	r24, 0x10	; 16
    1c82:	68 9f       	mul	r22, r24
    1c84:	e0 01       	movw	r28, r0
    1c86:	11 24       	eor	r1, r1
    1c88:	d0 63       	ori	r29, 0x30	; 48
	
	SPI_SendByte((uint8_t)(temp >> 8));
    1c8a:	8d 2f       	mov	r24, r29
    1c8c:	7b da       	rcall	.-2826   	; 0x1184 <SPI_SendByte>
	//asm volatile("nop");
	SPI_SendByte((uint8_t)temp);
    1c8e:	8c 2f       	mov	r24, r28
    1c90:	79 da       	rcall	.-2830   	; 0x1184 <SPI_SendByte>
	DAC_CS_PORT |= (1<<DAC_CS_PIN);
    1c92:	10 9a       	sbi	0x02, 0	; 2
	DAC_LATCH_PORT &= ~(1<<DAC_LATCH_PIN);
    1c94:	e8 e0       	ldi	r30, 0x08	; 8
    1c96:	f1 e0       	ldi	r31, 0x01	; 1
    1c98:	80 81       	ld	r24, Z
    1c9a:	8f 7e       	andi	r24, 0xEF	; 239
    1c9c:	80 83       	st	Z, r24
	//asm volatile("nop");
	DAC_LATCH_PORT |= (1<<DAC_LATCH_PIN);
    1c9e:	80 81       	ld	r24, Z
    1ca0:	80 61       	ori	r24, 0x10	; 16
    1ca2:	80 83       	st	Z, r24
}
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	08 95       	ret

00001caa <DAC_Off>:

void DAC_Off(uint8_t channel)
{
	DAC_CS_PORT &= ~(1<<DAC_CS_PIN);
    1caa:	10 98       	cbi	0x02, 0	; 2
	uint16_t temp = channel ? ((1<<MCP_AB_BIT)|(1<<MCP_GA_BIT)):(1<<MCP_GA_BIT);
    1cac:	81 11       	cpse	r24, r1
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <DAC_Off+0xa>
    1cb0:	80 e2       	ldi	r24, 0x20	; 32
    1cb2:	01 c0       	rjmp	.+2      	; 0x1cb6 <DAC_Off+0xc>
    1cb4:	80 ea       	ldi	r24, 0xA0	; 160
	SPI_SendByte((uint8_t)(temp >> 8));
    1cb6:	66 da       	rcall	.-2868   	; 0x1184 <SPI_SendByte>
	//asm volatile("nop");
	SPI_SendByte((uint8_t)temp);
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
    1cba:	64 da       	rcall	.-2872   	; 0x1184 <SPI_SendByte>
	DAC_CS_PORT |= (1<<DAC_CS_PIN);
    1cbc:	10 9a       	sbi	0x02, 0	; 2
	DAC_LATCH_PORT &= ~(1<<DAC_LATCH_PIN);
    1cbe:	e8 e0       	ldi	r30, 0x08	; 8
    1cc0:	f1 e0       	ldi	r31, 0x01	; 1
    1cc2:	80 81       	ld	r24, Z
    1cc4:	8f 7e       	andi	r24, 0xEF	; 239
    1cc6:	80 83       	st	Z, r24
	//asm volatile("nop");
	DAC_LATCH_PORT |= (1<<DAC_LATCH_PIN);
    1cc8:	80 81       	ld	r24, Z
    1cca:	80 61       	ori	r24, 0x10	; 16
    1ccc:	80 83       	st	Z, r24
    1cce:	08 95       	ret

00001cd0 <TPL5010_init>:
#include <avr/io.h>
#include "TPL5010.h"
#include "Laserboard.h"
void	TPL5010_init (void)
{
	TPL5010_DDR |= (1 << TPL5010_DONE_PIN);
    1cd0:	ea e0       	ldi	r30, 0x0A	; 10
    1cd2:	f1 e0       	ldi	r31, 0x01	; 1
    1cd4:	80 81       	ld	r24, Z
    1cd6:	88 60       	ori	r24, 0x08	; 8
    1cd8:	80 83       	st	Z, r24
    1cda:	08 95       	ret

00001cdc <TPL5010_trig_on>:
};

void TPL5010_trig_on(void)
{
	TPL5010_PORT |= (1 << TPL5010_DONE_PIN);
    1cdc:	eb e0       	ldi	r30, 0x0B	; 11
    1cde:	f1 e0       	ldi	r31, 0x01	; 1
    1ce0:	80 81       	ld	r24, Z
    1ce2:	88 60       	ori	r24, 0x08	; 8
    1ce4:	80 83       	st	Z, r24
    1ce6:	08 95       	ret

00001ce8 <TPL5010_trig_off>:
}

void TPL5010_trig_off(void)
{
	TPL5010_PORT &= ~(1 << TPL5010_DONE_PIN);
    1ce8:	eb e0       	ldi	r30, 0x0B	; 11
    1cea:	f1 e0       	ldi	r31, 0x01	; 1
    1cec:	80 81       	ld	r24, Z
    1cee:	87 7f       	andi	r24, 0xF7	; 247
    1cf0:	80 83       	st	Z, r24
    1cf2:	08 95       	ret

00001cf4 <current_cal>:


uint16_t	get_voltage_100times(uint16_t adcValue, uint16_t res_up, uint16_t res_low)
{
	return	100*voltage_cal(adcValue, res_up, res_low);
}
    1cf4:	bc 01       	movw	r22, r24
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	65 d2       	rcall	.+1226   	; 0x21c6 <__floatunsisf>
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 ea       	ldi	r20, 0xA0	; 160
    1d02:	50 e4       	ldi	r21, 0x40	; 64
    1d04:	16 d3       	rcall	.+1580   	; 0x2332 <__mulsf3>
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 ec       	ldi	r19, 0xC0	; 192
    1d0a:	4f e7       	ldi	r20, 0x7F	; 127
    1d0c:	54 e4       	ldi	r21, 0x44	; 68
    1d0e:	c7 d1       	rcall	.+910    	; 0x209e <__divsf3>
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	4a e7       	ldi	r20, 0x7A	; 122
    1d16:	54 e4       	ldi	r21, 0x44	; 68
    1d18:	0c d3       	rcall	.+1560   	; 0x2332 <__mulsf3>
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 ef       	ldi	r20, 0xF0	; 240
    1d20:	51 e4       	ldi	r21, 0x41	; 65
    1d22:	bd c1       	rjmp	.+890    	; 0x209e <__divsf3>
    1d24:	08 95       	ret

00001d26 <get_current_100times>:

uint16_t	get_current_100times(uint16_t adcValue)
{
	return	current_cal(adcValue);
    1d26:	e6 df       	rcall	.-52     	; 0x1cf4 <current_cal>
    1d28:	22 d2       	rcall	.+1092   	; 0x216e <__fixunssfsi>
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	08 95       	ret

00001d2e <SCH_Initialize>:
  * @retval system ticks
  *****************************************************************************/
uint16_t SCH_SystemTick(void)
{
  return s_SystemTick;
}
    1d2e:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <s_SystemTick+0x1>
    1d32:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <s_SystemTick>
    1d36:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <s_NumOfTaskScheduled>
    1d3a:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <s_NumOfTimers>
    1d3e:	8a e2       	ldi	r24, 0x2A	; 42
    1d40:	e2 e6       	ldi	r30, 0x62	; 98
    1d42:	f4 e0       	ldi	r31, 0x04	; 4
    1d44:	df 01       	movw	r26, r30
    1d46:	1d 92       	st	X+, r1
    1d48:	8a 95       	dec	r24
    1d4a:	e9 f7       	brne	.-6      	; 0x1d46 <SCH_Initialize+0x18>
    1d4c:	84 e0       	ldi	r24, 0x04	; 4
    1d4e:	e9 e7       	ldi	r30, 0x79	; 121
    1d50:	f5 e0       	ldi	r31, 0x05	; 5
    1d52:	df 01       	movw	r26, r30
    1d54:	1d 92       	st	X+, r1
    1d56:	8a 95       	dec	r24
    1d58:	e9 f7       	brne	.-6      	; 0x1d54 <SCH_Initialize+0x26>
    1d5a:	23 ca       	rjmp	.-3002   	; 0x11a2 <timer_timer0_init>
    1d5c:	08 95       	ret

00001d5e <SCH_TIM_Start>:
    1d5e:	81 11       	cpse	r24, r1
    1d60:	04 c0       	rjmp	.+8      	; 0x1d6a <SCH_TIM_Start+0xc>
    1d62:	50 93 7a 05 	sts	0x057A, r21	; 0x80057a <s_SoftTimers+0x1>
    1d66:	40 93 79 05 	sts	0x0579, r20	; 0x800579 <s_SoftTimers>
    1d6a:	08 95       	ret

00001d6c <SCH_TIM_HasCompleted>:
    1d6c:	e8 2f       	mov	r30, r24
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	ee 0f       	add	r30, r30
    1d72:	ff 1f       	adc	r31, r31
    1d74:	e7 58       	subi	r30, 0x87	; 135
    1d76:	fa 4f       	sbci	r31, 0xFA	; 250
    1d78:	20 81       	ld	r18, Z
    1d7a:	31 81       	ldd	r19, Z+1	; 0x01
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	23 2b       	or	r18, r19
    1d80:	09 f0       	breq	.+2      	; 0x1d84 <SCH_TIM_HasCompleted+0x18>
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	08 95       	ret

00001d86 <SCH_TASK_CreateTask>:
    1d86:	cf 93       	push	r28
    1d88:	df 93       	push	r29
    1d8a:	ec 01       	movw	r28, r24
    1d8c:	89 2b       	or	r24, r25
    1d8e:	39 f1       	breq	.+78     	; 0x1dde <SCH_TASK_CreateTask+0x58>
    1d90:	61 15       	cp	r22, r1
    1d92:	71 05       	cpc	r23, r1
    1d94:	31 f1       	breq	.+76     	; 0x1de2 <SCH_TASK_CreateTask+0x5c>
    1d96:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <s_NumOfTaskScheduled>
    1d9a:	96 30       	cpi	r25, 0x06	; 6
    1d9c:	20 f5       	brcc	.+72     	; 0x1de6 <SCH_TASK_CreateTask+0x60>
    1d9e:	29 2f       	mov	r18, r25
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	f9 01       	movw	r30, r18
    1da4:	ee 0f       	add	r30, r30
    1da6:	ff 1f       	adc	r31, r31
    1da8:	df 01       	movw	r26, r30
    1daa:	a2 0f       	add	r26, r18
    1dac:	b3 1f       	adc	r27, r19
    1dae:	aa 0f       	add	r26, r26
    1db0:	bb 1f       	adc	r27, r27
    1db2:	ae 59       	subi	r26, 0x9E	; 158
    1db4:	bb 4f       	sbci	r27, 0xFB	; 251
    1db6:	15 96       	adiw	r26, 0x05	; 5
    1db8:	7c 93       	st	X, r23
    1dba:	6e 93       	st	-X, r22
    1dbc:	14 97       	sbiw	r26, 0x04	; 4
    1dbe:	11 96       	adiw	r26, 0x01	; 1
    1dc0:	1c 92       	st	X, r1
    1dc2:	11 97       	sbiw	r26, 0x01	; 1
    1dc4:	13 96       	adiw	r26, 0x03	; 3
    1dc6:	1c 92       	st	X, r1
    1dc8:	1e 92       	st	-X, r1
    1dca:	12 97       	sbiw	r26, 0x02	; 2
    1dcc:	fd 01       	movw	r30, r26
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	80 83       	st	Z, r24
    1dd2:	98 83       	st	Y, r25
    1dd4:	9f 5f       	subi	r25, 0xFF	; 255
    1dd6:	90 93 61 04 	sts	0x0461, r25	; 0x800461 <s_NumOfTaskScheduled>
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	05 c0       	rjmp	.+10     	; 0x1de8 <SCH_TASK_CreateTask+0x62>
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	03 c0       	rjmp	.+6      	; 0x1de8 <SCH_TASK_CreateTask+0x62>
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	01 c0       	rjmp	.+2      	; 0x1de8 <SCH_TASK_CreateTask+0x62>
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	df 91       	pop	r29
    1dea:	cf 91       	pop	r28
    1dec:	08 95       	ret

00001dee <SCH_RunSystemTickTimer>:
    1dee:	cf 92       	push	r12
    1df0:	df 92       	push	r13
    1df2:	ef 92       	push	r14
    1df4:	ff 92       	push	r15
    1df6:	1f 93       	push	r17
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <s_SystemTick>
    1e00:	90 91 78 05 	lds	r25, 0x0578	; 0x800578 <s_SystemTick+0x1>
    1e04:	01 96       	adiw	r24, 0x01	; 1
    1e06:	90 93 78 05 	sts	0x0578, r25	; 0x800578 <s_SystemTick+0x1>
    1e0a:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <s_SystemTick>
    1e0e:	20 91 61 04 	lds	r18, 0x0461	; 0x800461 <s_NumOfTaskScheduled>
    1e12:	22 23       	and	r18, r18
    1e14:	01 f1       	breq	.+64     	; 0x1e56 <SCH_RunSystemTickTimer+0x68>
    1e16:	e2 e6       	ldi	r30, 0x62	; 98
    1e18:	f4 e0       	ldi	r31, 0x04	; 4
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	31 e0       	ldi	r19, 0x01	; 1
    1e1e:	a4 81       	ldd	r26, Z+4	; 0x04
    1e20:	b5 81       	ldd	r27, Z+5	; 0x05
    1e22:	9c 91       	ld	r25, X
    1e24:	91 30       	cpi	r25, 0x01	; 1
    1e26:	99 f4       	brne	.+38     	; 0x1e4e <SCH_RunSystemTickTimer+0x60>
    1e28:	90 81       	ld	r25, Z
    1e2a:	91 30       	cpi	r25, 0x01	; 1
    1e2c:	81 f4       	brne	.+32     	; 0x1e4e <SCH_RunSystemTickTimer+0x60>
    1e2e:	42 81       	ldd	r20, Z+2	; 0x02
    1e30:	53 81       	ldd	r21, Z+3	; 0x03
    1e32:	4f 5f       	subi	r20, 0xFF	; 255
    1e34:	5f 4f       	sbci	r21, 0xFF	; 255
    1e36:	53 83       	std	Z+3, r21	; 0x03
    1e38:	42 83       	std	Z+2, r20	; 0x02
    1e3a:	12 96       	adiw	r26, 0x02	; 2
    1e3c:	6d 91       	ld	r22, X+
    1e3e:	7c 91       	ld	r23, X
    1e40:	13 97       	sbiw	r26, 0x03	; 3
    1e42:	46 17       	cp	r20, r22
    1e44:	57 07       	cpc	r21, r23
    1e46:	18 f0       	brcs	.+6      	; 0x1e4e <SCH_RunSystemTickTimer+0x60>
    1e48:	13 82       	std	Z+3, r1	; 0x03
    1e4a:	12 82       	std	Z+2, r1	; 0x02
    1e4c:	31 83       	std	Z+1, r19	; 0x01
    1e4e:	8f 5f       	subi	r24, 0xFF	; 255
    1e50:	36 96       	adiw	r30, 0x06	; 6
    1e52:	82 13       	cpse	r24, r18
    1e54:	e4 cf       	rjmp	.-56     	; 0x1e1e <SCH_RunSystemTickTimer+0x30>
    1e56:	20 91 60 04 	lds	r18, 0x0460	; 0x800460 <s_NumOfTimers>
    1e5a:	22 23       	and	r18, r18
    1e5c:	a1 f1       	breq	.+104    	; 0x1ec6 <SCH_RunSystemTickTimer+0xd8>
    1e5e:	e1 e6       	ldi	r30, 0x61	; 97
    1e60:	f4 e0       	ldi	r31, 0x04	; 4
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	31 e0       	ldi	r19, 0x01	; 1
    1e66:	10 e0       	ldi	r17, 0x00	; 0
    1e68:	df 01       	movw	r26, r30
    1e6a:	90 81       	ld	r25, Z
    1e6c:	91 30       	cpi	r25, 0x01	; 1
    1e6e:	e1 f4       	brne	.+56     	; 0x1ea8 <SCH_RunSystemTickTimer+0xba>
    1e70:	42 81       	ldd	r20, Z+2	; 0x02
    1e72:	53 81       	ldd	r21, Z+3	; 0x03
    1e74:	4f 5f       	subi	r20, 0xFF	; 255
    1e76:	5f 4f       	sbci	r21, 0xFF	; 255
    1e78:	53 83       	std	Z+3, r21	; 0x03
    1e7a:	42 83       	std	Z+2, r20	; 0x02
    1e7c:	c4 81       	ldd	r28, Z+4	; 0x04
    1e7e:	d5 81       	ldd	r29, Z+5	; 0x05
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	70 e0       	ldi	r23, 0x00	; 0
    1e84:	c9 80       	ldd	r12, Y+1	; 0x01
    1e86:	da 80       	ldd	r13, Y+2	; 0x02
    1e88:	eb 80       	ldd	r14, Y+3	; 0x03
    1e8a:	fc 80       	ldd	r15, Y+4	; 0x04
    1e8c:	4c 15       	cp	r20, r12
    1e8e:	5d 05       	cpc	r21, r13
    1e90:	6e 05       	cpc	r22, r14
    1e92:	7f 05       	cpc	r23, r15
    1e94:	48 f0       	brcs	.+18     	; 0x1ea8 <SCH_RunSystemTickTimer+0xba>
    1e96:	31 83       	std	Z+1, r19	; 0x01
    1e98:	13 82       	std	Z+3, r1	; 0x03
    1e9a:	12 82       	std	Z+2, r1	; 0x02
    1e9c:	93 2f       	mov	r25, r19
    1e9e:	48 81       	ld	r20, Y
    1ea0:	42 30       	cpi	r20, 0x02	; 2
    1ea2:	09 f0       	breq	.+2      	; 0x1ea6 <SCH_RunSystemTickTimer+0xb8>
    1ea4:	91 2f       	mov	r25, r17
    1ea6:	9c 93       	st	X, r25
    1ea8:	8f 5f       	subi	r24, 0xFF	; 255
    1eaa:	36 96       	adiw	r30, 0x06	; 6
    1eac:	82 13       	cpse	r24, r18
    1eae:	dc cf       	rjmp	.-72     	; 0x1e68 <SCH_RunSystemTickTimer+0x7a>
    1eb0:	0a c0       	rjmp	.+20     	; 0x1ec6 <SCH_RunSystemTickTimer+0xd8>
    1eb2:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <s_SoftTimers>
    1eb6:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <s_SoftTimers+0x1>
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <s_SoftTimers+0x1>
    1ec0:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <s_SoftTimers>
    1ec4:	06 c0       	rjmp	.+12     	; 0x1ed2 <SCH_RunSystemTickTimer+0xe4>
    1ec6:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <s_SoftTimers>
    1eca:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <s_SoftTimers+0x1>
    1ece:	89 2b       	or	r24, r25
    1ed0:	81 f7       	brne	.-32     	; 0x1eb2 <SCH_RunSystemTickTimer+0xc4>
    1ed2:	df 91       	pop	r29
    1ed4:	cf 91       	pop	r28
    1ed6:	1f 91       	pop	r17
    1ed8:	ff 90       	pop	r15
    1eda:	ef 90       	pop	r14
    1edc:	df 90       	pop	r13
    1ede:	cf 90       	pop	r12
    1ee0:	08 95       	ret

00001ee2 <SCH_StartSchedular>:
    1ee2:	56 c9       	rjmp	.-3412   	; 0x1190 <timer_start_timer0>
    1ee4:	08 95       	ret

00001ee6 <SCH_HandleScheduledTask>:
    1ee6:	cf 93       	push	r28
    1ee8:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <s_NumOfTaskScheduled>
    1eec:	88 23       	and	r24, r24
    1eee:	b9 f1       	breq	.+110    	; 0x1f5e <SCH_HandleScheduledTask+0x78>
    1ef0:	c0 e0       	ldi	r28, 0x00	; 0
    1ef2:	8c 2f       	mov	r24, r28
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	ee 0f       	add	r30, r30
    1efa:	ff 1f       	adc	r31, r31
    1efc:	e8 0f       	add	r30, r24
    1efe:	f9 1f       	adc	r31, r25
    1f00:	ee 0f       	add	r30, r30
    1f02:	ff 1f       	adc	r31, r31
    1f04:	ee 59       	subi	r30, 0x9E	; 158
    1f06:	fb 4f       	sbci	r31, 0xFB	; 251
    1f08:	21 81       	ldd	r18, Z+1	; 0x01
    1f0a:	21 30       	cpi	r18, 0x01	; 1
    1f0c:	19 f5       	brne	.+70     	; 0x1f54 <SCH_HandleScheduledTask+0x6e>
    1f0e:	fc 01       	movw	r30, r24
    1f10:	ee 0f       	add	r30, r30
    1f12:	ff 1f       	adc	r31, r31
    1f14:	e8 0f       	add	r30, r24
    1f16:	f9 1f       	adc	r31, r25
    1f18:	ee 0f       	add	r30, r30
    1f1a:	ff 1f       	adc	r31, r31
    1f1c:	ee 59       	subi	r30, 0x9E	; 158
    1f1e:	fb 4f       	sbci	r31, 0xFB	; 251
    1f20:	20 81       	ld	r18, Z
    1f22:	21 30       	cpi	r18, 0x01	; 1
    1f24:	b9 f4       	brne	.+46     	; 0x1f54 <SCH_HandleScheduledTask+0x6e>
    1f26:	fc 01       	movw	r30, r24
    1f28:	ee 0f       	add	r30, r30
    1f2a:	ff 1f       	adc	r31, r31
    1f2c:	df 01       	movw	r26, r30
    1f2e:	a8 0f       	add	r26, r24
    1f30:	b9 1f       	adc	r27, r25
    1f32:	aa 0f       	add	r26, r26
    1f34:	bb 1f       	adc	r27, r27
    1f36:	ae 59       	subi	r26, 0x9E	; 158
    1f38:	bb 4f       	sbci	r27, 0xFB	; 251
    1f3a:	11 96       	adiw	r26, 0x01	; 1
    1f3c:	1c 92       	st	X, r1
    1f3e:	11 97       	sbiw	r26, 0x01	; 1
    1f40:	fd 01       	movw	r30, r26
    1f42:	04 80       	ldd	r0, Z+4	; 0x04
    1f44:	f5 81       	ldd	r31, Z+5	; 0x05
    1f46:	e0 2d       	mov	r30, r0
    1f48:	04 80       	ldd	r0, Z+4	; 0x04
    1f4a:	f5 81       	ldd	r31, Z+5	; 0x05
    1f4c:	e0 2d       	mov	r30, r0
    1f4e:	30 97       	sbiw	r30, 0x00	; 0
    1f50:	09 f0       	breq	.+2      	; 0x1f54 <SCH_HandleScheduledTask+0x6e>
    1f52:	19 95       	eicall
    1f54:	cf 5f       	subi	r28, 0xFF	; 255
    1f56:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <s_NumOfTaskScheduled>
    1f5a:	c8 17       	cp	r28, r24
    1f5c:	50 f2       	brcs	.-108    	; 0x1ef2 <SCH_HandleScheduledTask+0xc>
    1f5e:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <s_NumOfTimers>
    1f62:	88 23       	and	r24, r24
    1f64:	59 f1       	breq	.+86     	; 0x1fbc <SCH_HandleScheduledTask+0xd6>
    1f66:	c0 e0       	ldi	r28, 0x00	; 0
    1f68:	8c 2f       	mov	r24, r28
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	ee 0f       	add	r30, r30
    1f70:	ff 1f       	adc	r31, r31
    1f72:	e8 0f       	add	r30, r24
    1f74:	f9 1f       	adc	r31, r25
    1f76:	ee 0f       	add	r30, r30
    1f78:	ff 1f       	adc	r31, r31
    1f7a:	ef 59       	subi	r30, 0x9F	; 159
    1f7c:	fb 4f       	sbci	r31, 0xFB	; 251
    1f7e:	21 81       	ldd	r18, Z+1	; 0x01
    1f80:	21 30       	cpi	r18, 0x01	; 1
    1f82:	b9 f4       	brne	.+46     	; 0x1fb2 <SCH_HandleScheduledTask+0xcc>
    1f84:	fc 01       	movw	r30, r24
    1f86:	ee 0f       	add	r30, r30
    1f88:	ff 1f       	adc	r31, r31
    1f8a:	df 01       	movw	r26, r30
    1f8c:	a8 0f       	add	r26, r24
    1f8e:	b9 1f       	adc	r27, r25
    1f90:	aa 0f       	add	r26, r26
    1f92:	bb 1f       	adc	r27, r27
    1f94:	af 59       	subi	r26, 0x9F	; 159
    1f96:	bb 4f       	sbci	r27, 0xFB	; 251
    1f98:	11 96       	adiw	r26, 0x01	; 1
    1f9a:	1c 92       	st	X, r1
    1f9c:	11 97       	sbiw	r26, 0x01	; 1
    1f9e:	fd 01       	movw	r30, r26
    1fa0:	04 80       	ldd	r0, Z+4	; 0x04
    1fa2:	f5 81       	ldd	r31, Z+5	; 0x05
    1fa4:	e0 2d       	mov	r30, r0
    1fa6:	05 80       	ldd	r0, Z+5	; 0x05
    1fa8:	f6 81       	ldd	r31, Z+6	; 0x06
    1faa:	e0 2d       	mov	r30, r0
    1fac:	30 97       	sbiw	r30, 0x00	; 0
    1fae:	09 f0       	breq	.+2      	; 0x1fb2 <SCH_HandleScheduledTask+0xcc>
    1fb0:	19 95       	eicall
    1fb2:	cf 5f       	subi	r28, 0xFF	; 255
    1fb4:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <s_NumOfTimers>
    1fb8:	c8 17       	cp	r28, r24
    1fba:	b0 f2       	brcs	.-84     	; 0x1f68 <SCH_HandleScheduledTask+0x82>
    1fbc:	cf 91       	pop	r28
    1fbe:	08 95       	ret

00001fc0 <__vector_21>:

ISR (TIMER0_COMPA_vect)
{
    1fc0:	1f 92       	push	r1
    1fc2:	0f 92       	push	r0
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	0f 92       	push	r0
    1fc8:	11 24       	eor	r1, r1
    1fca:	0b b6       	in	r0, 0x3b	; 59
    1fcc:	0f 92       	push	r0
    1fce:	2f 93       	push	r18
    1fd0:	3f 93       	push	r19
    1fd2:	4f 93       	push	r20
    1fd4:	5f 93       	push	r21
    1fd6:	6f 93       	push	r22
    1fd8:	7f 93       	push	r23
    1fda:	8f 93       	push	r24
    1fdc:	9f 93       	push	r25
    1fde:	af 93       	push	r26
    1fe0:	bf 93       	push	r27
    1fe2:	ef 93       	push	r30
    1fe4:	ff 93       	push	r31
	SCH_RunSystemTickTimer();
    1fe6:	03 df       	rcall	.-506    	; 0x1dee <SCH_RunSystemTickTimer>
	
	/******************** ADC ********************/
	if(ADC_Data.Wait == 0)	ADCSRA |= 1<<ADSC;
    1fe8:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <ADC_Data+0x5>
    1fec:	81 11       	cpse	r24, r1
    1fee:	06 c0       	rjmp	.+12     	; 0x1ffc <__vector_21+0x3c>
    1ff0:	ea e7       	ldi	r30, 0x7A	; 122
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	80 64       	ori	r24, 0x40	; 64
    1ff8:	80 83       	st	Z, r24
    1ffa:	03 c0       	rjmp	.+6      	; 0x2002 <__DATA_REGION_LENGTH__+0x2>
	else	ADC_Data.Wait--;
    1ffc:	81 50       	subi	r24, 0x01	; 1
    1ffe:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <ADC_Data+0x5>
	
	/****************** TPL5010 ******************/
	if(TPL5010_timer != 0)
    2002:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <TPL5010_timer>
    2006:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <TPL5010_timer+0x1>
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	29 f1       	breq	.+74     	; 0x2058 <__DATA_REGION_LENGTH__+0x58>
	{
		TPL5010_timer--;
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <TPL5010_timer+0x1>
    2014:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <TPL5010_timer>
	}
	if((TPL5010_PORT&(1<<TPL5010_DONE_PIN))&&(TPL5010_timer == 0))
    2018:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
    201c:	23 ff       	sbrs	r18, 3
    201e:	0a c0       	rjmp	.+20     	; 0x2034 <__DATA_REGION_LENGTH__+0x34>
    2020:	89 2b       	or	r24, r25
    2022:	f9 f4       	brne	.+62     	; 0x2062 <__DATA_REGION_LENGTH__+0x62>
	{
		TPL5010_timer = TIME_TRIGGER;
    2024:	80 ed       	ldi	r24, 0xD0	; 208
    2026:	97 e0       	ldi	r25, 0x07	; 7
    2028:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <TPL5010_timer+0x1>
    202c:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <TPL5010_timer>
		TPL5010_trig_off();
    2030:	5b de       	rcall	.-842    	; 0x1ce8 <TPL5010_trig_off>
    2032:	1e c0       	rjmp	.+60     	; 0x2070 <__DATA_REGION_LENGTH__+0x70>
	}
	else if(((TPL5010_PORT&(1<<TPL5010_DONE_PIN)) == 0)&&(TPL5010_timer == 0))
    2034:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
    2038:	83 fd       	sbrc	r24, 3
    203a:	1a c0       	rjmp	.+52     	; 0x2070 <__DATA_REGION_LENGTH__+0x70>
    203c:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <TPL5010_timer>
    2040:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <TPL5010_timer+0x1>
    2044:	89 2b       	or	r24, r25
    2046:	a1 f4       	brne	.+40     	; 0x2070 <__DATA_REGION_LENGTH__+0x70>
	{
		TPL5010_timer = TIME_TRIGGER_ON;
    2048:	88 ec       	ldi	r24, 0xC8	; 200
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <TPL5010_timer+0x1>
    2050:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <TPL5010_timer>
		TPL5010_trig_on();
    2054:	43 de       	rcall	.-890    	; 0x1cdc <TPL5010_trig_on>
	}
	
	
    2056:	0c c0       	rjmp	.+24     	; 0x2070 <__DATA_REGION_LENGTH__+0x70>
	/****************** TPL5010 ******************/
	if(TPL5010_timer != 0)
	{
		TPL5010_timer--;
	}
	if((TPL5010_PORT&(1<<TPL5010_DONE_PIN))&&(TPL5010_timer == 0))
    2058:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
    205c:	83 ff       	sbrs	r24, 3
    205e:	04 c0       	rjmp	.+8      	; 0x2068 <__DATA_REGION_LENGTH__+0x68>
    2060:	e1 cf       	rjmp	.-62     	; 0x2024 <__DATA_REGION_LENGTH__+0x24>
	{
		TPL5010_timer = TIME_TRIGGER;
		TPL5010_trig_off();
	}
	else if(((TPL5010_PORT&(1<<TPL5010_DONE_PIN)) == 0)&&(TPL5010_timer == 0))
    2062:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
    2066:	04 c0       	rjmp	.+8      	; 0x2070 <__DATA_REGION_LENGTH__+0x70>
    2068:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
    206c:	83 ff       	sbrs	r24, 3
    206e:	ec cf       	rjmp	.-40     	; 0x2048 <__DATA_REGION_LENGTH__+0x48>
		TPL5010_timer = TIME_TRIGGER_ON;
		TPL5010_trig_on();
	}
	
	
    2070:	ff 91       	pop	r31
    2072:	ef 91       	pop	r30
    2074:	bf 91       	pop	r27
    2076:	af 91       	pop	r26
    2078:	9f 91       	pop	r25
    207a:	8f 91       	pop	r24
    207c:	7f 91       	pop	r23
    207e:	6f 91       	pop	r22
    2080:	5f 91       	pop	r21
    2082:	4f 91       	pop	r20
    2084:	3f 91       	pop	r19
    2086:	2f 91       	pop	r18
    2088:	0f 90       	pop	r0
    208a:	0b be       	out	0x3b, r0	; 59
    208c:	0f 90       	pop	r0
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	0f 90       	pop	r0
    2092:	1f 90       	pop	r1
    2094:	18 95       	reti

00002096 <__cmpsf2>:
    2096:	d4 d0       	rcall	.+424    	; 0x2240 <__fp_cmp>
    2098:	08 f4       	brcc	.+2      	; 0x209c <__cmpsf2+0x6>
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	08 95       	ret

0000209e <__divsf3>:
    209e:	0c d0       	rcall	.+24     	; 0x20b8 <__divsf3x>
    20a0:	0a c1       	rjmp	.+532    	; 0x22b6 <__fp_round>
    20a2:	02 d1       	rcall	.+516    	; 0x22a8 <__fp_pscB>
    20a4:	40 f0       	brcs	.+16     	; 0x20b6 <__divsf3+0x18>
    20a6:	f9 d0       	rcall	.+498    	; 0x229a <__fp_pscA>
    20a8:	30 f0       	brcs	.+12     	; 0x20b6 <__divsf3+0x18>
    20aa:	21 f4       	brne	.+8      	; 0x20b4 <__divsf3+0x16>
    20ac:	5f 3f       	cpi	r21, 0xFF	; 255
    20ae:	19 f0       	breq	.+6      	; 0x20b6 <__divsf3+0x18>
    20b0:	eb c0       	rjmp	.+470    	; 0x2288 <__fp_inf>
    20b2:	51 11       	cpse	r21, r1
    20b4:	34 c1       	rjmp	.+616    	; 0x231e <__fp_szero>
    20b6:	ee c0       	rjmp	.+476    	; 0x2294 <__fp_nan>

000020b8 <__divsf3x>:
    20b8:	0f d1       	rcall	.+542    	; 0x22d8 <__fp_split3>
    20ba:	98 f3       	brcs	.-26     	; 0x20a2 <__divsf3+0x4>

000020bc <__divsf3_pse>:
    20bc:	99 23       	and	r25, r25
    20be:	c9 f3       	breq	.-14     	; 0x20b2 <__divsf3+0x14>
    20c0:	55 23       	and	r21, r21
    20c2:	b1 f3       	breq	.-20     	; 0x20b0 <__divsf3+0x12>
    20c4:	95 1b       	sub	r25, r21
    20c6:	55 0b       	sbc	r21, r21
    20c8:	bb 27       	eor	r27, r27
    20ca:	aa 27       	eor	r26, r26
    20cc:	62 17       	cp	r22, r18
    20ce:	73 07       	cpc	r23, r19
    20d0:	84 07       	cpc	r24, r20
    20d2:	38 f0       	brcs	.+14     	; 0x20e2 <__divsf3_pse+0x26>
    20d4:	9f 5f       	subi	r25, 0xFF	; 255
    20d6:	5f 4f       	sbci	r21, 0xFF	; 255
    20d8:	22 0f       	add	r18, r18
    20da:	33 1f       	adc	r19, r19
    20dc:	44 1f       	adc	r20, r20
    20de:	aa 1f       	adc	r26, r26
    20e0:	a9 f3       	breq	.-22     	; 0x20cc <__divsf3_pse+0x10>
    20e2:	33 d0       	rcall	.+102    	; 0x214a <__divsf3_pse+0x8e>
    20e4:	0e 2e       	mov	r0, r30
    20e6:	3a f0       	brmi	.+14     	; 0x20f6 <__divsf3_pse+0x3a>
    20e8:	e0 e8       	ldi	r30, 0x80	; 128
    20ea:	30 d0       	rcall	.+96     	; 0x214c <__divsf3_pse+0x90>
    20ec:	91 50       	subi	r25, 0x01	; 1
    20ee:	50 40       	sbci	r21, 0x00	; 0
    20f0:	e6 95       	lsr	r30
    20f2:	00 1c       	adc	r0, r0
    20f4:	ca f7       	brpl	.-14     	; 0x20e8 <__divsf3_pse+0x2c>
    20f6:	29 d0       	rcall	.+82     	; 0x214a <__divsf3_pse+0x8e>
    20f8:	fe 2f       	mov	r31, r30
    20fa:	27 d0       	rcall	.+78     	; 0x214a <__divsf3_pse+0x8e>
    20fc:	66 0f       	add	r22, r22
    20fe:	77 1f       	adc	r23, r23
    2100:	88 1f       	adc	r24, r24
    2102:	bb 1f       	adc	r27, r27
    2104:	26 17       	cp	r18, r22
    2106:	37 07       	cpc	r19, r23
    2108:	48 07       	cpc	r20, r24
    210a:	ab 07       	cpc	r26, r27
    210c:	b0 e8       	ldi	r27, 0x80	; 128
    210e:	09 f0       	breq	.+2      	; 0x2112 <__divsf3_pse+0x56>
    2110:	bb 0b       	sbc	r27, r27
    2112:	80 2d       	mov	r24, r0
    2114:	bf 01       	movw	r22, r30
    2116:	ff 27       	eor	r31, r31
    2118:	93 58       	subi	r25, 0x83	; 131
    211a:	5f 4f       	sbci	r21, 0xFF	; 255
    211c:	2a f0       	brmi	.+10     	; 0x2128 <__divsf3_pse+0x6c>
    211e:	9e 3f       	cpi	r25, 0xFE	; 254
    2120:	51 05       	cpc	r21, r1
    2122:	68 f0       	brcs	.+26     	; 0x213e <__divsf3_pse+0x82>
    2124:	b1 c0       	rjmp	.+354    	; 0x2288 <__fp_inf>
    2126:	fb c0       	rjmp	.+502    	; 0x231e <__fp_szero>
    2128:	5f 3f       	cpi	r21, 0xFF	; 255
    212a:	ec f3       	brlt	.-6      	; 0x2126 <__divsf3_pse+0x6a>
    212c:	98 3e       	cpi	r25, 0xE8	; 232
    212e:	dc f3       	brlt	.-10     	; 0x2126 <__divsf3_pse+0x6a>
    2130:	86 95       	lsr	r24
    2132:	77 95       	ror	r23
    2134:	67 95       	ror	r22
    2136:	b7 95       	ror	r27
    2138:	f7 95       	ror	r31
    213a:	9f 5f       	subi	r25, 0xFF	; 255
    213c:	c9 f7       	brne	.-14     	; 0x2130 <__divsf3_pse+0x74>
    213e:	88 0f       	add	r24, r24
    2140:	91 1d       	adc	r25, r1
    2142:	96 95       	lsr	r25
    2144:	87 95       	ror	r24
    2146:	97 f9       	bld	r25, 7
    2148:	08 95       	ret
    214a:	e1 e0       	ldi	r30, 0x01	; 1
    214c:	66 0f       	add	r22, r22
    214e:	77 1f       	adc	r23, r23
    2150:	88 1f       	adc	r24, r24
    2152:	bb 1f       	adc	r27, r27
    2154:	62 17       	cp	r22, r18
    2156:	73 07       	cpc	r23, r19
    2158:	84 07       	cpc	r24, r20
    215a:	ba 07       	cpc	r27, r26
    215c:	20 f0       	brcs	.+8      	; 0x2166 <__divsf3_pse+0xaa>
    215e:	62 1b       	sub	r22, r18
    2160:	73 0b       	sbc	r23, r19
    2162:	84 0b       	sbc	r24, r20
    2164:	ba 0b       	sbc	r27, r26
    2166:	ee 1f       	adc	r30, r30
    2168:	88 f7       	brcc	.-30     	; 0x214c <__divsf3_pse+0x90>
    216a:	e0 95       	com	r30
    216c:	08 95       	ret

0000216e <__fixunssfsi>:
    216e:	bc d0       	rcall	.+376    	; 0x22e8 <__fp_splitA>
    2170:	88 f0       	brcs	.+34     	; 0x2194 <__fixunssfsi+0x26>
    2172:	9f 57       	subi	r25, 0x7F	; 127
    2174:	90 f0       	brcs	.+36     	; 0x219a <__fixunssfsi+0x2c>
    2176:	b9 2f       	mov	r27, r25
    2178:	99 27       	eor	r25, r25
    217a:	b7 51       	subi	r27, 0x17	; 23
    217c:	a0 f0       	brcs	.+40     	; 0x21a6 <__fixunssfsi+0x38>
    217e:	d1 f0       	breq	.+52     	; 0x21b4 <__fixunssfsi+0x46>
    2180:	66 0f       	add	r22, r22
    2182:	77 1f       	adc	r23, r23
    2184:	88 1f       	adc	r24, r24
    2186:	99 1f       	adc	r25, r25
    2188:	1a f0       	brmi	.+6      	; 0x2190 <__fixunssfsi+0x22>
    218a:	ba 95       	dec	r27
    218c:	c9 f7       	brne	.-14     	; 0x2180 <__fixunssfsi+0x12>
    218e:	12 c0       	rjmp	.+36     	; 0x21b4 <__fixunssfsi+0x46>
    2190:	b1 30       	cpi	r27, 0x01	; 1
    2192:	81 f0       	breq	.+32     	; 0x21b4 <__fixunssfsi+0x46>
    2194:	c3 d0       	rcall	.+390    	; 0x231c <__fp_zero>
    2196:	b1 e0       	ldi	r27, 0x01	; 1
    2198:	08 95       	ret
    219a:	c0 c0       	rjmp	.+384    	; 0x231c <__fp_zero>
    219c:	67 2f       	mov	r22, r23
    219e:	78 2f       	mov	r23, r24
    21a0:	88 27       	eor	r24, r24
    21a2:	b8 5f       	subi	r27, 0xF8	; 248
    21a4:	39 f0       	breq	.+14     	; 0x21b4 <__fixunssfsi+0x46>
    21a6:	b9 3f       	cpi	r27, 0xF9	; 249
    21a8:	cc f3       	brlt	.-14     	; 0x219c <__fixunssfsi+0x2e>
    21aa:	86 95       	lsr	r24
    21ac:	77 95       	ror	r23
    21ae:	67 95       	ror	r22
    21b0:	b3 95       	inc	r27
    21b2:	d9 f7       	brne	.-10     	; 0x21aa <__fixunssfsi+0x3c>
    21b4:	3e f4       	brtc	.+14     	; 0x21c4 <__fixunssfsi+0x56>
    21b6:	90 95       	com	r25
    21b8:	80 95       	com	r24
    21ba:	70 95       	com	r23
    21bc:	61 95       	neg	r22
    21be:	7f 4f       	sbci	r23, 0xFF	; 255
    21c0:	8f 4f       	sbci	r24, 0xFF	; 255
    21c2:	9f 4f       	sbci	r25, 0xFF	; 255
    21c4:	08 95       	ret

000021c6 <__floatunsisf>:
    21c6:	e8 94       	clt
    21c8:	09 c0       	rjmp	.+18     	; 0x21dc <__floatsisf+0x12>

000021ca <__floatsisf>:
    21ca:	97 fb       	bst	r25, 7
    21cc:	3e f4       	brtc	.+14     	; 0x21dc <__floatsisf+0x12>
    21ce:	90 95       	com	r25
    21d0:	80 95       	com	r24
    21d2:	70 95       	com	r23
    21d4:	61 95       	neg	r22
    21d6:	7f 4f       	sbci	r23, 0xFF	; 255
    21d8:	8f 4f       	sbci	r24, 0xFF	; 255
    21da:	9f 4f       	sbci	r25, 0xFF	; 255
    21dc:	99 23       	and	r25, r25
    21de:	a9 f0       	breq	.+42     	; 0x220a <__stack+0xb>
    21e0:	f9 2f       	mov	r31, r25
    21e2:	96 e9       	ldi	r25, 0x96	; 150
    21e4:	bb 27       	eor	r27, r27
    21e6:	93 95       	inc	r25
    21e8:	f6 95       	lsr	r31
    21ea:	87 95       	ror	r24
    21ec:	77 95       	ror	r23
    21ee:	67 95       	ror	r22
    21f0:	b7 95       	ror	r27
    21f2:	f1 11       	cpse	r31, r1
    21f4:	f8 cf       	rjmp	.-16     	; 0x21e6 <__floatsisf+0x1c>
    21f6:	fa f4       	brpl	.+62     	; 0x2236 <__stack+0x37>
    21f8:	bb 0f       	add	r27, r27
    21fa:	11 f4       	brne	.+4      	; 0x2200 <__stack+0x1>
    21fc:	60 ff       	sbrs	r22, 0
    21fe:	1b c0       	rjmp	.+54     	; 0x2236 <__stack+0x37>
    2200:	6f 5f       	subi	r22, 0xFF	; 255
    2202:	7f 4f       	sbci	r23, 0xFF	; 255
    2204:	8f 4f       	sbci	r24, 0xFF	; 255
    2206:	9f 4f       	sbci	r25, 0xFF	; 255
    2208:	16 c0       	rjmp	.+44     	; 0x2236 <__stack+0x37>
    220a:	88 23       	and	r24, r24
    220c:	11 f0       	breq	.+4      	; 0x2212 <__stack+0x13>
    220e:	96 e9       	ldi	r25, 0x96	; 150
    2210:	11 c0       	rjmp	.+34     	; 0x2234 <__stack+0x35>
    2212:	77 23       	and	r23, r23
    2214:	21 f0       	breq	.+8      	; 0x221e <__stack+0x1f>
    2216:	9e e8       	ldi	r25, 0x8E	; 142
    2218:	87 2f       	mov	r24, r23
    221a:	76 2f       	mov	r23, r22
    221c:	05 c0       	rjmp	.+10     	; 0x2228 <__stack+0x29>
    221e:	66 23       	and	r22, r22
    2220:	71 f0       	breq	.+28     	; 0x223e <__stack+0x3f>
    2222:	96 e8       	ldi	r25, 0x86	; 134
    2224:	86 2f       	mov	r24, r22
    2226:	70 e0       	ldi	r23, 0x00	; 0
    2228:	60 e0       	ldi	r22, 0x00	; 0
    222a:	2a f0       	brmi	.+10     	; 0x2236 <__stack+0x37>
    222c:	9a 95       	dec	r25
    222e:	66 0f       	add	r22, r22
    2230:	77 1f       	adc	r23, r23
    2232:	88 1f       	adc	r24, r24
    2234:	da f7       	brpl	.-10     	; 0x222c <__stack+0x2d>
    2236:	88 0f       	add	r24, r24
    2238:	96 95       	lsr	r25
    223a:	87 95       	ror	r24
    223c:	97 f9       	bld	r25, 7
    223e:	08 95       	ret

00002240 <__fp_cmp>:
    2240:	99 0f       	add	r25, r25
    2242:	00 08       	sbc	r0, r0
    2244:	55 0f       	add	r21, r21
    2246:	aa 0b       	sbc	r26, r26
    2248:	e0 e8       	ldi	r30, 0x80	; 128
    224a:	fe ef       	ldi	r31, 0xFE	; 254
    224c:	16 16       	cp	r1, r22
    224e:	17 06       	cpc	r1, r23
    2250:	e8 07       	cpc	r30, r24
    2252:	f9 07       	cpc	r31, r25
    2254:	c0 f0       	brcs	.+48     	; 0x2286 <__fp_cmp+0x46>
    2256:	12 16       	cp	r1, r18
    2258:	13 06       	cpc	r1, r19
    225a:	e4 07       	cpc	r30, r20
    225c:	f5 07       	cpc	r31, r21
    225e:	98 f0       	brcs	.+38     	; 0x2286 <__fp_cmp+0x46>
    2260:	62 1b       	sub	r22, r18
    2262:	73 0b       	sbc	r23, r19
    2264:	84 0b       	sbc	r24, r20
    2266:	95 0b       	sbc	r25, r21
    2268:	39 f4       	brne	.+14     	; 0x2278 <__fp_cmp+0x38>
    226a:	0a 26       	eor	r0, r26
    226c:	61 f0       	breq	.+24     	; 0x2286 <__fp_cmp+0x46>
    226e:	23 2b       	or	r18, r19
    2270:	24 2b       	or	r18, r20
    2272:	25 2b       	or	r18, r21
    2274:	21 f4       	brne	.+8      	; 0x227e <__fp_cmp+0x3e>
    2276:	08 95       	ret
    2278:	0a 26       	eor	r0, r26
    227a:	09 f4       	brne	.+2      	; 0x227e <__fp_cmp+0x3e>
    227c:	a1 40       	sbci	r26, 0x01	; 1
    227e:	a6 95       	lsr	r26
    2280:	8f ef       	ldi	r24, 0xFF	; 255
    2282:	81 1d       	adc	r24, r1
    2284:	81 1d       	adc	r24, r1
    2286:	08 95       	ret

00002288 <__fp_inf>:
    2288:	97 f9       	bld	r25, 7
    228a:	9f 67       	ori	r25, 0x7F	; 127
    228c:	80 e8       	ldi	r24, 0x80	; 128
    228e:	70 e0       	ldi	r23, 0x00	; 0
    2290:	60 e0       	ldi	r22, 0x00	; 0
    2292:	08 95       	ret

00002294 <__fp_nan>:
    2294:	9f ef       	ldi	r25, 0xFF	; 255
    2296:	80 ec       	ldi	r24, 0xC0	; 192
    2298:	08 95       	ret

0000229a <__fp_pscA>:
    229a:	00 24       	eor	r0, r0
    229c:	0a 94       	dec	r0
    229e:	16 16       	cp	r1, r22
    22a0:	17 06       	cpc	r1, r23
    22a2:	18 06       	cpc	r1, r24
    22a4:	09 06       	cpc	r0, r25
    22a6:	08 95       	ret

000022a8 <__fp_pscB>:
    22a8:	00 24       	eor	r0, r0
    22aa:	0a 94       	dec	r0
    22ac:	12 16       	cp	r1, r18
    22ae:	13 06       	cpc	r1, r19
    22b0:	14 06       	cpc	r1, r20
    22b2:	05 06       	cpc	r0, r21
    22b4:	08 95       	ret

000022b6 <__fp_round>:
    22b6:	09 2e       	mov	r0, r25
    22b8:	03 94       	inc	r0
    22ba:	00 0c       	add	r0, r0
    22bc:	11 f4       	brne	.+4      	; 0x22c2 <__fp_round+0xc>
    22be:	88 23       	and	r24, r24
    22c0:	52 f0       	brmi	.+20     	; 0x22d6 <__fp_round+0x20>
    22c2:	bb 0f       	add	r27, r27
    22c4:	40 f4       	brcc	.+16     	; 0x22d6 <__fp_round+0x20>
    22c6:	bf 2b       	or	r27, r31
    22c8:	11 f4       	brne	.+4      	; 0x22ce <__fp_round+0x18>
    22ca:	60 ff       	sbrs	r22, 0
    22cc:	04 c0       	rjmp	.+8      	; 0x22d6 <__fp_round+0x20>
    22ce:	6f 5f       	subi	r22, 0xFF	; 255
    22d0:	7f 4f       	sbci	r23, 0xFF	; 255
    22d2:	8f 4f       	sbci	r24, 0xFF	; 255
    22d4:	9f 4f       	sbci	r25, 0xFF	; 255
    22d6:	08 95       	ret

000022d8 <__fp_split3>:
    22d8:	57 fd       	sbrc	r21, 7
    22da:	90 58       	subi	r25, 0x80	; 128
    22dc:	44 0f       	add	r20, r20
    22de:	55 1f       	adc	r21, r21
    22e0:	59 f0       	breq	.+22     	; 0x22f8 <__fp_splitA+0x10>
    22e2:	5f 3f       	cpi	r21, 0xFF	; 255
    22e4:	71 f0       	breq	.+28     	; 0x2302 <__fp_splitA+0x1a>
    22e6:	47 95       	ror	r20

000022e8 <__fp_splitA>:
    22e8:	88 0f       	add	r24, r24
    22ea:	97 fb       	bst	r25, 7
    22ec:	99 1f       	adc	r25, r25
    22ee:	61 f0       	breq	.+24     	; 0x2308 <__fp_splitA+0x20>
    22f0:	9f 3f       	cpi	r25, 0xFF	; 255
    22f2:	79 f0       	breq	.+30     	; 0x2312 <__fp_splitA+0x2a>
    22f4:	87 95       	ror	r24
    22f6:	08 95       	ret
    22f8:	12 16       	cp	r1, r18
    22fa:	13 06       	cpc	r1, r19
    22fc:	14 06       	cpc	r1, r20
    22fe:	55 1f       	adc	r21, r21
    2300:	f2 cf       	rjmp	.-28     	; 0x22e6 <__fp_split3+0xe>
    2302:	46 95       	lsr	r20
    2304:	f1 df       	rcall	.-30     	; 0x22e8 <__fp_splitA>
    2306:	08 c0       	rjmp	.+16     	; 0x2318 <__fp_splitA+0x30>
    2308:	16 16       	cp	r1, r22
    230a:	17 06       	cpc	r1, r23
    230c:	18 06       	cpc	r1, r24
    230e:	99 1f       	adc	r25, r25
    2310:	f1 cf       	rjmp	.-30     	; 0x22f4 <__fp_splitA+0xc>
    2312:	86 95       	lsr	r24
    2314:	71 05       	cpc	r23, r1
    2316:	61 05       	cpc	r22, r1
    2318:	08 94       	sec
    231a:	08 95       	ret

0000231c <__fp_zero>:
    231c:	e8 94       	clt

0000231e <__fp_szero>:
    231e:	bb 27       	eor	r27, r27
    2320:	66 27       	eor	r22, r22
    2322:	77 27       	eor	r23, r23
    2324:	cb 01       	movw	r24, r22
    2326:	97 f9       	bld	r25, 7
    2328:	08 95       	ret

0000232a <__gesf2>:
    232a:	8a df       	rcall	.-236    	; 0x2240 <__fp_cmp>
    232c:	08 f4       	brcc	.+2      	; 0x2330 <__gesf2+0x6>
    232e:	8f ef       	ldi	r24, 0xFF	; 255
    2330:	08 95       	ret

00002332 <__mulsf3>:
    2332:	0b d0       	rcall	.+22     	; 0x234a <__mulsf3x>
    2334:	c0 cf       	rjmp	.-128    	; 0x22b6 <__fp_round>
    2336:	b1 df       	rcall	.-158    	; 0x229a <__fp_pscA>
    2338:	28 f0       	brcs	.+10     	; 0x2344 <__mulsf3+0x12>
    233a:	b6 df       	rcall	.-148    	; 0x22a8 <__fp_pscB>
    233c:	18 f0       	brcs	.+6      	; 0x2344 <__mulsf3+0x12>
    233e:	95 23       	and	r25, r21
    2340:	09 f0       	breq	.+2      	; 0x2344 <__mulsf3+0x12>
    2342:	a2 cf       	rjmp	.-188    	; 0x2288 <__fp_inf>
    2344:	a7 cf       	rjmp	.-178    	; 0x2294 <__fp_nan>
    2346:	11 24       	eor	r1, r1
    2348:	ea cf       	rjmp	.-44     	; 0x231e <__fp_szero>

0000234a <__mulsf3x>:
    234a:	c6 df       	rcall	.-116    	; 0x22d8 <__fp_split3>
    234c:	a0 f3       	brcs	.-24     	; 0x2336 <__mulsf3+0x4>

0000234e <__mulsf3_pse>:
    234e:	95 9f       	mul	r25, r21
    2350:	d1 f3       	breq	.-12     	; 0x2346 <__mulsf3+0x14>
    2352:	95 0f       	add	r25, r21
    2354:	50 e0       	ldi	r21, 0x00	; 0
    2356:	55 1f       	adc	r21, r21
    2358:	62 9f       	mul	r22, r18
    235a:	f0 01       	movw	r30, r0
    235c:	72 9f       	mul	r23, r18
    235e:	bb 27       	eor	r27, r27
    2360:	f0 0d       	add	r31, r0
    2362:	b1 1d       	adc	r27, r1
    2364:	63 9f       	mul	r22, r19
    2366:	aa 27       	eor	r26, r26
    2368:	f0 0d       	add	r31, r0
    236a:	b1 1d       	adc	r27, r1
    236c:	aa 1f       	adc	r26, r26
    236e:	64 9f       	mul	r22, r20
    2370:	66 27       	eor	r22, r22
    2372:	b0 0d       	add	r27, r0
    2374:	a1 1d       	adc	r26, r1
    2376:	66 1f       	adc	r22, r22
    2378:	82 9f       	mul	r24, r18
    237a:	22 27       	eor	r18, r18
    237c:	b0 0d       	add	r27, r0
    237e:	a1 1d       	adc	r26, r1
    2380:	62 1f       	adc	r22, r18
    2382:	73 9f       	mul	r23, r19
    2384:	b0 0d       	add	r27, r0
    2386:	a1 1d       	adc	r26, r1
    2388:	62 1f       	adc	r22, r18
    238a:	83 9f       	mul	r24, r19
    238c:	a0 0d       	add	r26, r0
    238e:	61 1d       	adc	r22, r1
    2390:	22 1f       	adc	r18, r18
    2392:	74 9f       	mul	r23, r20
    2394:	33 27       	eor	r19, r19
    2396:	a0 0d       	add	r26, r0
    2398:	61 1d       	adc	r22, r1
    239a:	23 1f       	adc	r18, r19
    239c:	84 9f       	mul	r24, r20
    239e:	60 0d       	add	r22, r0
    23a0:	21 1d       	adc	r18, r1
    23a2:	82 2f       	mov	r24, r18
    23a4:	76 2f       	mov	r23, r22
    23a6:	6a 2f       	mov	r22, r26
    23a8:	11 24       	eor	r1, r1
    23aa:	9f 57       	subi	r25, 0x7F	; 127
    23ac:	50 40       	sbci	r21, 0x00	; 0
    23ae:	8a f0       	brmi	.+34     	; 0x23d2 <__mulsf3_pse+0x84>
    23b0:	e1 f0       	breq	.+56     	; 0x23ea <__mulsf3_pse+0x9c>
    23b2:	88 23       	and	r24, r24
    23b4:	4a f0       	brmi	.+18     	; 0x23c8 <__mulsf3_pse+0x7a>
    23b6:	ee 0f       	add	r30, r30
    23b8:	ff 1f       	adc	r31, r31
    23ba:	bb 1f       	adc	r27, r27
    23bc:	66 1f       	adc	r22, r22
    23be:	77 1f       	adc	r23, r23
    23c0:	88 1f       	adc	r24, r24
    23c2:	91 50       	subi	r25, 0x01	; 1
    23c4:	50 40       	sbci	r21, 0x00	; 0
    23c6:	a9 f7       	brne	.-22     	; 0x23b2 <__mulsf3_pse+0x64>
    23c8:	9e 3f       	cpi	r25, 0xFE	; 254
    23ca:	51 05       	cpc	r21, r1
    23cc:	70 f0       	brcs	.+28     	; 0x23ea <__mulsf3_pse+0x9c>
    23ce:	5c cf       	rjmp	.-328    	; 0x2288 <__fp_inf>
    23d0:	a6 cf       	rjmp	.-180    	; 0x231e <__fp_szero>
    23d2:	5f 3f       	cpi	r21, 0xFF	; 255
    23d4:	ec f3       	brlt	.-6      	; 0x23d0 <__mulsf3_pse+0x82>
    23d6:	98 3e       	cpi	r25, 0xE8	; 232
    23d8:	dc f3       	brlt	.-10     	; 0x23d0 <__mulsf3_pse+0x82>
    23da:	86 95       	lsr	r24
    23dc:	77 95       	ror	r23
    23de:	67 95       	ror	r22
    23e0:	b7 95       	ror	r27
    23e2:	f7 95       	ror	r31
    23e4:	e7 95       	ror	r30
    23e6:	9f 5f       	subi	r25, 0xFF	; 255
    23e8:	c1 f7       	brne	.-16     	; 0x23da <__mulsf3_pse+0x8c>
    23ea:	fe 2b       	or	r31, r30
    23ec:	88 0f       	add	r24, r24
    23ee:	91 1d       	adc	r25, r1
    23f0:	96 95       	lsr	r25
    23f2:	87 95       	ror	r24
    23f4:	97 f9       	bld	r25, 7
    23f6:	08 95       	ret

000023f8 <__mulsi3>:
    23f8:	db 01       	movw	r26, r22
    23fa:	8f 93       	push	r24
    23fc:	9f 93       	push	r25
    23fe:	35 d0       	rcall	.+106    	; 0x246a <__muluhisi3>
    2400:	bf 91       	pop	r27
    2402:	af 91       	pop	r26
    2404:	a2 9f       	mul	r26, r18
    2406:	80 0d       	add	r24, r0
    2408:	91 1d       	adc	r25, r1
    240a:	a3 9f       	mul	r26, r19
    240c:	90 0d       	add	r25, r0
    240e:	b2 9f       	mul	r27, r18
    2410:	90 0d       	add	r25, r0
    2412:	11 24       	eor	r1, r1
    2414:	08 95       	ret

00002416 <__udivmodsi4>:
    2416:	a1 e2       	ldi	r26, 0x21	; 33
    2418:	1a 2e       	mov	r1, r26
    241a:	aa 1b       	sub	r26, r26
    241c:	bb 1b       	sub	r27, r27
    241e:	fd 01       	movw	r30, r26
    2420:	0d c0       	rjmp	.+26     	; 0x243c <__udivmodsi4_ep>

00002422 <__udivmodsi4_loop>:
    2422:	aa 1f       	adc	r26, r26
    2424:	bb 1f       	adc	r27, r27
    2426:	ee 1f       	adc	r30, r30
    2428:	ff 1f       	adc	r31, r31
    242a:	a2 17       	cp	r26, r18
    242c:	b3 07       	cpc	r27, r19
    242e:	e4 07       	cpc	r30, r20
    2430:	f5 07       	cpc	r31, r21
    2432:	20 f0       	brcs	.+8      	; 0x243c <__udivmodsi4_ep>
    2434:	a2 1b       	sub	r26, r18
    2436:	b3 0b       	sbc	r27, r19
    2438:	e4 0b       	sbc	r30, r20
    243a:	f5 0b       	sbc	r31, r21

0000243c <__udivmodsi4_ep>:
    243c:	66 1f       	adc	r22, r22
    243e:	77 1f       	adc	r23, r23
    2440:	88 1f       	adc	r24, r24
    2442:	99 1f       	adc	r25, r25
    2444:	1a 94       	dec	r1
    2446:	69 f7       	brne	.-38     	; 0x2422 <__udivmodsi4_loop>
    2448:	60 95       	com	r22
    244a:	70 95       	com	r23
    244c:	80 95       	com	r24
    244e:	90 95       	com	r25
    2450:	9b 01       	movw	r18, r22
    2452:	ac 01       	movw	r20, r24
    2454:	bd 01       	movw	r22, r26
    2456:	cf 01       	movw	r24, r30
    2458:	08 95       	ret

0000245a <__tablejump2__>:
    245a:	ee 0f       	add	r30, r30
    245c:	ff 1f       	adc	r31, r31
    245e:	88 1f       	adc	r24, r24
    2460:	8b bf       	out	0x3b, r24	; 59
    2462:	07 90       	elpm	r0, Z+
    2464:	f6 91       	elpm	r31, Z
    2466:	e0 2d       	mov	r30, r0
    2468:	19 94       	eijmp

0000246a <__muluhisi3>:
    246a:	09 d0       	rcall	.+18     	; 0x247e <__umulhisi3>
    246c:	a5 9f       	mul	r26, r21
    246e:	90 0d       	add	r25, r0
    2470:	b4 9f       	mul	r27, r20
    2472:	90 0d       	add	r25, r0
    2474:	a4 9f       	mul	r26, r20
    2476:	80 0d       	add	r24, r0
    2478:	91 1d       	adc	r25, r1
    247a:	11 24       	eor	r1, r1
    247c:	08 95       	ret

0000247e <__umulhisi3>:
    247e:	a2 9f       	mul	r26, r18
    2480:	b0 01       	movw	r22, r0
    2482:	b3 9f       	mul	r27, r19
    2484:	c0 01       	movw	r24, r0
    2486:	a3 9f       	mul	r26, r19
    2488:	70 0d       	add	r23, r0
    248a:	81 1d       	adc	r24, r1
    248c:	11 24       	eor	r1, r1
    248e:	91 1d       	adc	r25, r1
    2490:	b2 9f       	mul	r27, r18
    2492:	70 0d       	add	r23, r0
    2494:	81 1d       	adc	r24, r1
    2496:	11 24       	eor	r1, r1
    2498:	91 1d       	adc	r25, r1
    249a:	08 95       	ret

0000249c <atof>:
    249c:	66 27       	eor	r22, r22
    249e:	77 27       	eor	r23, r23
    24a0:	2e c0       	rjmp	.+92     	; 0x24fe <strtod>

000024a2 <atoi>:
    24a2:	fc 01       	movw	r30, r24
    24a4:	88 27       	eor	r24, r24
    24a6:	99 27       	eor	r25, r25
    24a8:	e8 94       	clt
    24aa:	21 91       	ld	r18, Z+
    24ac:	20 32       	cpi	r18, 0x20	; 32
    24ae:	e9 f3       	breq	.-6      	; 0x24aa <atoi+0x8>
    24b0:	29 30       	cpi	r18, 0x09	; 9
    24b2:	10 f0       	brcs	.+4      	; 0x24b8 <atoi+0x16>
    24b4:	2e 30       	cpi	r18, 0x0E	; 14
    24b6:	c8 f3       	brcs	.-14     	; 0x24aa <atoi+0x8>
    24b8:	2b 32       	cpi	r18, 0x2B	; 43
    24ba:	39 f0       	breq	.+14     	; 0x24ca <atoi+0x28>
    24bc:	2d 32       	cpi	r18, 0x2D	; 45
    24be:	31 f4       	brne	.+12     	; 0x24cc <atoi+0x2a>
    24c0:	68 94       	set
    24c2:	03 c0       	rjmp	.+6      	; 0x24ca <atoi+0x28>
    24c4:	14 d0       	rcall	.+40     	; 0x24ee <__mulhi_const_10>
    24c6:	82 0f       	add	r24, r18
    24c8:	91 1d       	adc	r25, r1
    24ca:	21 91       	ld	r18, Z+
    24cc:	20 53       	subi	r18, 0x30	; 48
    24ce:	2a 30       	cpi	r18, 0x0A	; 10
    24d0:	c8 f3       	brcs	.-14     	; 0x24c4 <atoi+0x22>
    24d2:	1e f4       	brtc	.+6      	; 0x24da <atoi+0x38>
    24d4:	90 95       	com	r25
    24d6:	81 95       	neg	r24
    24d8:	9f 4f       	sbci	r25, 0xFF	; 255
    24da:	08 95       	ret

000024dc <strcmp>:
    24dc:	fb 01       	movw	r30, r22
    24de:	dc 01       	movw	r26, r24
    24e0:	8d 91       	ld	r24, X+
    24e2:	01 90       	ld	r0, Z+
    24e4:	80 19       	sub	r24, r0
    24e6:	01 10       	cpse	r0, r1
    24e8:	d9 f3       	breq	.-10     	; 0x24e0 <strcmp+0x4>
    24ea:	99 0b       	sbc	r25, r25
    24ec:	08 95       	ret

000024ee <__mulhi_const_10>:
    24ee:	7a e0       	ldi	r23, 0x0A	; 10
    24f0:	97 9f       	mul	r25, r23
    24f2:	90 2d       	mov	r25, r0
    24f4:	87 9f       	mul	r24, r23
    24f6:	80 2d       	mov	r24, r0
    24f8:	91 0d       	add	r25, r1
    24fa:	11 24       	eor	r1, r1
    24fc:	08 95       	ret

000024fe <strtod>:
    24fe:	8f 92       	push	r8
    2500:	9f 92       	push	r9
    2502:	af 92       	push	r10
    2504:	bf 92       	push	r11
    2506:	cf 92       	push	r12
    2508:	df 92       	push	r13
    250a:	ef 92       	push	r14
    250c:	ff 92       	push	r15
    250e:	0f 93       	push	r16
    2510:	1f 93       	push	r17
    2512:	cf 93       	push	r28
    2514:	df 93       	push	r29
    2516:	ec 01       	movw	r28, r24
    2518:	6b 01       	movw	r12, r22
    251a:	61 15       	cp	r22, r1
    251c:	71 05       	cpc	r23, r1
    251e:	19 f0       	breq	.+6      	; 0x2526 <strtod+0x28>
    2520:	fb 01       	movw	r30, r22
    2522:	91 83       	std	Z+1, r25	; 0x01
    2524:	80 83       	st	Z, r24
    2526:	7e 01       	movw	r14, r28
    2528:	ff ef       	ldi	r31, 0xFF	; 255
    252a:	ef 1a       	sub	r14, r31
    252c:	ff 0a       	sbc	r15, r31
    252e:	08 81       	ld	r16, Y
    2530:	80 2f       	mov	r24, r16
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	37 d1       	rcall	.+622    	; 0x27a4 <isspace>
    2536:	89 2b       	or	r24, r25
    2538:	11 f0       	breq	.+4      	; 0x253e <strtod+0x40>
    253a:	e7 01       	movw	r28, r14
    253c:	f4 cf       	rjmp	.-24     	; 0x2526 <strtod+0x28>
    253e:	0d 32       	cpi	r16, 0x2D	; 45
    2540:	39 f4       	brne	.+14     	; 0x2550 <strtod+0x52>
    2542:	7e 01       	movw	r14, r28
    2544:	82 e0       	ldi	r24, 0x02	; 2
    2546:	e8 0e       	add	r14, r24
    2548:	f1 1c       	adc	r15, r1
    254a:	09 81       	ldd	r16, Y+1	; 0x01
    254c:	11 e0       	ldi	r17, 0x01	; 1
    254e:	08 c0       	rjmp	.+16     	; 0x2560 <strtod+0x62>
    2550:	0b 32       	cpi	r16, 0x2B	; 43
    2552:	29 f4       	brne	.+10     	; 0x255e <strtod+0x60>
    2554:	7e 01       	movw	r14, r28
    2556:	92 e0       	ldi	r25, 0x02	; 2
    2558:	e9 0e       	add	r14, r25
    255a:	f1 1c       	adc	r15, r1
    255c:	09 81       	ldd	r16, Y+1	; 0x01
    255e:	10 e0       	ldi	r17, 0x00	; 0
    2560:	e7 01       	movw	r28, r14
    2562:	21 97       	sbiw	r28, 0x01	; 1
    2564:	43 e0       	ldi	r20, 0x03	; 3
    2566:	50 e0       	ldi	r21, 0x00	; 0
    2568:	66 ea       	ldi	r22, 0xA6	; 166
    256a:	71 e0       	ldi	r23, 0x01	; 1
    256c:	ce 01       	movw	r24, r28
    256e:	22 d1       	rcall	.+580    	; 0x27b4 <strncasecmp_P>
    2570:	89 2b       	or	r24, r25
    2572:	b9 f4       	brne	.+46     	; 0x25a2 <strtod+0xa4>
    2574:	23 96       	adiw	r28, 0x03	; 3
    2576:	45 e0       	ldi	r20, 0x05	; 5
    2578:	50 e0       	ldi	r21, 0x00	; 0
    257a:	61 ea       	ldi	r22, 0xA1	; 161
    257c:	71 e0       	ldi	r23, 0x01	; 1
    257e:	ce 01       	movw	r24, r28
    2580:	19 d1       	rcall	.+562    	; 0x27b4 <strncasecmp_P>
    2582:	89 2b       	or	r24, r25
    2584:	09 f4       	brne	.+2      	; 0x2588 <strtod+0x8a>
    2586:	25 96       	adiw	r28, 0x05	; 5
    2588:	c1 14       	cp	r12, r1
    258a:	d1 04       	cpc	r13, r1
    258c:	19 f0       	breq	.+6      	; 0x2594 <strtod+0x96>
    258e:	f6 01       	movw	r30, r12
    2590:	d1 83       	std	Z+1, r29	; 0x01
    2592:	c0 83       	st	Z, r28
    2594:	11 11       	cpse	r17, r1
    2596:	f0 c0       	rjmp	.+480    	; 0x2778 <strtod+0x27a>
    2598:	60 e0       	ldi	r22, 0x00	; 0
    259a:	70 e0       	ldi	r23, 0x00	; 0
    259c:	80 e8       	ldi	r24, 0x80	; 128
    259e:	9f e7       	ldi	r25, 0x7F	; 127
    25a0:	f4 c0       	rjmp	.+488    	; 0x278a <strtod+0x28c>
    25a2:	43 e0       	ldi	r20, 0x03	; 3
    25a4:	50 e0       	ldi	r21, 0x00	; 0
    25a6:	6e e9       	ldi	r22, 0x9E	; 158
    25a8:	71 e0       	ldi	r23, 0x01	; 1
    25aa:	ce 01       	movw	r24, r28
    25ac:	03 d1       	rcall	.+518    	; 0x27b4 <strncasecmp_P>
    25ae:	89 2b       	or	r24, r25
    25b0:	59 f4       	brne	.+22     	; 0x25c8 <strtod+0xca>
    25b2:	c1 14       	cp	r12, r1
    25b4:	d1 04       	cpc	r13, r1
    25b6:	09 f4       	brne	.+2      	; 0x25ba <strtod+0xbc>
    25b8:	e4 c0       	rjmp	.+456    	; 0x2782 <strtod+0x284>
    25ba:	f2 e0       	ldi	r31, 0x02	; 2
    25bc:	ef 0e       	add	r14, r31
    25be:	f1 1c       	adc	r15, r1
    25c0:	f6 01       	movw	r30, r12
    25c2:	f1 82       	std	Z+1, r15	; 0x01
    25c4:	e0 82       	st	Z, r14
    25c6:	dd c0       	rjmp	.+442    	; 0x2782 <strtod+0x284>
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	a9 01       	movw	r20, r18
    25ce:	c0 e0       	ldi	r28, 0x00	; 0
    25d0:	d0 e0       	ldi	r29, 0x00	; 0
    25d2:	f7 01       	movw	r30, r14
    25d4:	60 ed       	ldi	r22, 0xD0	; 208
    25d6:	a6 2e       	mov	r10, r22
    25d8:	a0 0e       	add	r10, r16
    25da:	89 e0       	ldi	r24, 0x09	; 9
    25dc:	8a 15       	cp	r24, r10
    25de:	28 f1       	brcs	.+74     	; 0x262a <strtod+0x12c>
    25e0:	91 2f       	mov	r25, r17
    25e2:	92 60       	ori	r25, 0x02	; 2
    25e4:	b9 2e       	mov	r11, r25
    25e6:	81 2f       	mov	r24, r17
    25e8:	88 70       	andi	r24, 0x08	; 8
    25ea:	12 ff       	sbrs	r17, 2
    25ec:	04 c0       	rjmp	.+8      	; 0x25f6 <strtod+0xf8>
    25ee:	81 11       	cpse	r24, r1
    25f0:	23 c0       	rjmp	.+70     	; 0x2638 <strtod+0x13a>
    25f2:	21 96       	adiw	r28, 0x01	; 1
    25f4:	21 c0       	rjmp	.+66     	; 0x2638 <strtod+0x13a>
    25f6:	81 11       	cpse	r24, r1
    25f8:	21 97       	sbiw	r28, 0x01	; 1
    25fa:	a5 e0       	ldi	r26, 0x05	; 5
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	35 df       	rcall	.-406    	; 0x246a <__muluhisi3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	88 0f       	add	r24, r24
    2606:	99 1f       	adc	r25, r25
    2608:	aa 1f       	adc	r26, r26
    260a:	bb 1f       	adc	r27, r27
    260c:	9c 01       	movw	r18, r24
    260e:	ad 01       	movw	r20, r26
    2610:	2a 0d       	add	r18, r10
    2612:	31 1d       	adc	r19, r1
    2614:	41 1d       	adc	r20, r1
    2616:	51 1d       	adc	r21, r1
    2618:	28 39       	cpi	r18, 0x98	; 152
    261a:	89 e9       	ldi	r24, 0x99	; 153
    261c:	38 07       	cpc	r19, r24
    261e:	48 07       	cpc	r20, r24
    2620:	89 e1       	ldi	r24, 0x19	; 25
    2622:	58 07       	cpc	r21, r24
    2624:	48 f0       	brcs	.+18     	; 0x2638 <strtod+0x13a>
    2626:	16 60       	ori	r17, 0x06	; 6
    2628:	06 c0       	rjmp	.+12     	; 0x2636 <strtod+0x138>
    262a:	9e ef       	ldi	r25, 0xFE	; 254
    262c:	a9 12       	cpse	r10, r25
    262e:	0a c0       	rjmp	.+20     	; 0x2644 <strtod+0x146>
    2630:	13 fd       	sbrc	r17, 3
    2632:	40 c0       	rjmp	.+128    	; 0x26b4 <strtod+0x1b6>
    2634:	18 60       	ori	r17, 0x08	; 8
    2636:	b1 2e       	mov	r11, r17
    2638:	8f ef       	ldi	r24, 0xFF	; 255
    263a:	e8 1a       	sub	r14, r24
    263c:	f8 0a       	sbc	r15, r24
    263e:	00 81       	ld	r16, Z
    2640:	1b 2d       	mov	r17, r11
    2642:	c7 cf       	rjmp	.-114    	; 0x25d2 <strtod+0xd4>
    2644:	80 2f       	mov	r24, r16
    2646:	8f 7d       	andi	r24, 0xDF	; 223
    2648:	85 34       	cpi	r24, 0x45	; 69
    264a:	a1 f5       	brne	.+104    	; 0x26b4 <strtod+0x1b6>
    264c:	80 81       	ld	r24, Z
    264e:	8d 32       	cpi	r24, 0x2D	; 45
    2650:	11 f4       	brne	.+4      	; 0x2656 <strtod+0x158>
    2652:	10 61       	ori	r17, 0x10	; 16
    2654:	06 c0       	rjmp	.+12     	; 0x2662 <strtod+0x164>
    2656:	8b 32       	cpi	r24, 0x2B	; 43
    2658:	21 f0       	breq	.+8      	; 0x2662 <strtod+0x164>
    265a:	31 96       	adiw	r30, 0x01	; 1
    265c:	61 e0       	ldi	r22, 0x01	; 1
    265e:	70 e0       	ldi	r23, 0x00	; 0
    2660:	04 c0       	rjmp	.+8      	; 0x266a <strtod+0x16c>
    2662:	81 81       	ldd	r24, Z+1	; 0x01
    2664:	32 96       	adiw	r30, 0x02	; 2
    2666:	62 e0       	ldi	r22, 0x02	; 2
    2668:	70 e0       	ldi	r23, 0x00	; 0
    266a:	80 53       	subi	r24, 0x30	; 48
    266c:	8a 30       	cpi	r24, 0x0A	; 10
    266e:	18 f0       	brcs	.+6      	; 0x2676 <strtod+0x178>
    2670:	e6 1b       	sub	r30, r22
    2672:	f7 0b       	sbc	r31, r23
    2674:	1f c0       	rjmp	.+62     	; 0x26b4 <strtod+0x1b6>
    2676:	60 e0       	ldi	r22, 0x00	; 0
    2678:	70 e0       	ldi	r23, 0x00	; 0
    267a:	60 38       	cpi	r22, 0x80	; 128
    267c:	9c e0       	ldi	r25, 0x0C	; 12
    267e:	79 07       	cpc	r23, r25
    2680:	5c f4       	brge	.+22     	; 0x2698 <strtod+0x19a>
    2682:	db 01       	movw	r26, r22
    2684:	aa 0f       	add	r26, r26
    2686:	bb 1f       	adc	r27, r27
    2688:	aa 0f       	add	r26, r26
    268a:	bb 1f       	adc	r27, r27
    268c:	6a 0f       	add	r22, r26
    268e:	7b 1f       	adc	r23, r27
    2690:	66 0f       	add	r22, r22
    2692:	77 1f       	adc	r23, r23
    2694:	68 0f       	add	r22, r24
    2696:	71 1d       	adc	r23, r1
    2698:	31 96       	adiw	r30, 0x01	; 1
    269a:	df 01       	movw	r26, r30
    269c:	11 97       	sbiw	r26, 0x01	; 1
    269e:	8c 91       	ld	r24, X
    26a0:	80 53       	subi	r24, 0x30	; 48
    26a2:	8a 30       	cpi	r24, 0x0A	; 10
    26a4:	50 f3       	brcs	.-44     	; 0x267a <strtod+0x17c>
    26a6:	14 ff       	sbrs	r17, 4
    26a8:	03 c0       	rjmp	.+6      	; 0x26b0 <strtod+0x1b2>
    26aa:	71 95       	neg	r23
    26ac:	61 95       	neg	r22
    26ae:	71 09       	sbc	r23, r1
    26b0:	c6 0f       	add	r28, r22
    26b2:	d7 1f       	adc	r29, r23
    26b4:	11 ff       	sbrs	r17, 1
    26b6:	08 c0       	rjmp	.+16     	; 0x26c8 <strtod+0x1ca>
    26b8:	c1 14       	cp	r12, r1
    26ba:	d1 04       	cpc	r13, r1
    26bc:	29 f0       	breq	.+10     	; 0x26c8 <strtod+0x1ca>
    26be:	cf 01       	movw	r24, r30
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	f6 01       	movw	r30, r12
    26c4:	91 83       	std	Z+1, r25	; 0x01
    26c6:	80 83       	st	Z, r24
    26c8:	ca 01       	movw	r24, r20
    26ca:	b9 01       	movw	r22, r18
    26cc:	7c dd       	rcall	.-1288   	; 0x21c6 <__floatunsisf>
    26ce:	21 2f       	mov	r18, r17
    26d0:	23 70       	andi	r18, 0x03	; 3
    26d2:	23 30       	cpi	r18, 0x03	; 3
    26d4:	19 f0       	breq	.+6      	; 0x26dc <strtod+0x1de>
    26d6:	4b 01       	movw	r8, r22
    26d8:	5c 01       	movw	r10, r24
    26da:	06 c0       	rjmp	.+12     	; 0x26e8 <strtod+0x1ea>
    26dc:	4b 01       	movw	r8, r22
    26de:	5c 01       	movw	r10, r24
    26e0:	b7 fa       	bst	r11, 7
    26e2:	b0 94       	com	r11
    26e4:	b7 f8       	bld	r11, 7
    26e6:	b0 94       	com	r11
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	a9 01       	movw	r20, r18
    26ee:	c5 01       	movw	r24, r10
    26f0:	b4 01       	movw	r22, r8
    26f2:	d1 dc       	rcall	.-1630   	; 0x2096 <__cmpsf2>
    26f4:	88 23       	and	r24, r24
    26f6:	09 f4       	brne	.+2      	; 0x26fa <strtod+0x1fc>
    26f8:	3c c0       	rjmp	.+120    	; 0x2772 <strtod+0x274>
    26fa:	d7 ff       	sbrs	r29, 7
    26fc:	06 c0       	rjmp	.+12     	; 0x270a <strtod+0x20c>
    26fe:	d1 95       	neg	r29
    2700:	c1 95       	neg	r28
    2702:	d1 09       	sbc	r29, r1
    2704:	0d eb       	ldi	r16, 0xBD	; 189
    2706:	11 e0       	ldi	r17, 0x01	; 1
    2708:	02 c0       	rjmp	.+4      	; 0x270e <strtod+0x210>
    270a:	05 ed       	ldi	r16, 0xD5	; 213
    270c:	11 e0       	ldi	r17, 0x01	; 1
    270e:	68 01       	movw	r12, r16
    2710:	f8 e1       	ldi	r31, 0x18	; 24
    2712:	cf 1a       	sub	r12, r31
    2714:	d1 08       	sbc	r13, r1
    2716:	90 e2       	ldi	r25, 0x20	; 32
    2718:	e9 2e       	mov	r14, r25
    271a:	f1 2c       	mov	r15, r1
    271c:	ce 15       	cp	r28, r14
    271e:	df 05       	cpc	r29, r15
    2720:	6c f0       	brlt	.+26     	; 0x273c <strtod+0x23e>
    2722:	f8 01       	movw	r30, r16
    2724:	25 91       	lpm	r18, Z+
    2726:	35 91       	lpm	r19, Z+
    2728:	45 91       	lpm	r20, Z+
    272a:	54 91       	lpm	r21, Z
    272c:	c5 01       	movw	r24, r10
    272e:	b4 01       	movw	r22, r8
    2730:	00 de       	rcall	.-1024   	; 0x2332 <__mulsf3>
    2732:	4b 01       	movw	r8, r22
    2734:	5c 01       	movw	r10, r24
    2736:	ce 19       	sub	r28, r14
    2738:	df 09       	sbc	r29, r15
    273a:	f0 cf       	rjmp	.-32     	; 0x271c <strtod+0x21e>
    273c:	04 50       	subi	r16, 0x04	; 4
    273e:	11 09       	sbc	r17, r1
    2740:	f5 94       	asr	r15
    2742:	e7 94       	ror	r14
    2744:	0c 15       	cp	r16, r12
    2746:	1d 05       	cpc	r17, r13
    2748:	49 f7       	brne	.-46     	; 0x271c <strtod+0x21e>
    274a:	8a 2d       	mov	r24, r10
    274c:	88 0f       	add	r24, r24
    274e:	8b 2d       	mov	r24, r11
    2750:	88 1f       	adc	r24, r24
    2752:	8f 3f       	cpi	r24, 0xFF	; 255
    2754:	41 f0       	breq	.+16     	; 0x2766 <strtod+0x268>
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	a9 01       	movw	r20, r18
    275c:	c5 01       	movw	r24, r10
    275e:	b4 01       	movw	r22, r8
    2760:	9a dc       	rcall	.-1740   	; 0x2096 <__cmpsf2>
    2762:	81 11       	cpse	r24, r1
    2764:	06 c0       	rjmp	.+12     	; 0x2772 <strtod+0x274>
    2766:	82 e2       	ldi	r24, 0x22	; 34
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	90 93 7c 05 	sts	0x057C, r25	; 0x80057c <errno+0x1>
    276e:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <errno>
    2772:	c5 01       	movw	r24, r10
    2774:	b4 01       	movw	r22, r8
    2776:	09 c0       	rjmp	.+18     	; 0x278a <strtod+0x28c>
    2778:	60 e0       	ldi	r22, 0x00	; 0
    277a:	70 e0       	ldi	r23, 0x00	; 0
    277c:	80 e8       	ldi	r24, 0x80	; 128
    277e:	9f ef       	ldi	r25, 0xFF	; 255
    2780:	04 c0       	rjmp	.+8      	; 0x278a <strtod+0x28c>
    2782:	60 e0       	ldi	r22, 0x00	; 0
    2784:	70 e0       	ldi	r23, 0x00	; 0
    2786:	80 ec       	ldi	r24, 0xC0	; 192
    2788:	9f e7       	ldi	r25, 0x7F	; 127
    278a:	df 91       	pop	r29
    278c:	cf 91       	pop	r28
    278e:	1f 91       	pop	r17
    2790:	0f 91       	pop	r16
    2792:	ff 90       	pop	r15
    2794:	ef 90       	pop	r14
    2796:	df 90       	pop	r13
    2798:	cf 90       	pop	r12
    279a:	bf 90       	pop	r11
    279c:	af 90       	pop	r10
    279e:	9f 90       	pop	r9
    27a0:	8f 90       	pop	r8
    27a2:	08 95       	ret

000027a4 <isspace>:
    27a4:	91 11       	cpse	r25, r1
    27a6:	1e c0       	rjmp	.+60     	; 0x27e4 <__ctype_isfalse>
    27a8:	80 32       	cpi	r24, 0x20	; 32
    27aa:	19 f0       	breq	.+6      	; 0x27b2 <isspace+0xe>
    27ac:	89 50       	subi	r24, 0x09	; 9
    27ae:	85 50       	subi	r24, 0x05	; 5
    27b0:	d0 f7       	brcc	.-12     	; 0x27a6 <isspace+0x2>
    27b2:	08 95       	ret

000027b4 <strncasecmp_P>:
    27b4:	fb 01       	movw	r30, r22
    27b6:	dc 01       	movw	r26, r24
    27b8:	41 50       	subi	r20, 0x01	; 1
    27ba:	50 40       	sbci	r21, 0x00	; 0
    27bc:	88 f0       	brcs	.+34     	; 0x27e0 <strncasecmp_P+0x2c>
    27be:	8d 91       	ld	r24, X+
    27c0:	81 34       	cpi	r24, 0x41	; 65
    27c2:	1c f0       	brlt	.+6      	; 0x27ca <strncasecmp_P+0x16>
    27c4:	8b 35       	cpi	r24, 0x5B	; 91
    27c6:	0c f4       	brge	.+2      	; 0x27ca <strncasecmp_P+0x16>
    27c8:	80 5e       	subi	r24, 0xE0	; 224
    27ca:	65 91       	lpm	r22, Z+
    27cc:	61 34       	cpi	r22, 0x41	; 65
    27ce:	1c f0       	brlt	.+6      	; 0x27d6 <strncasecmp_P+0x22>
    27d0:	6b 35       	cpi	r22, 0x5B	; 91
    27d2:	0c f4       	brge	.+2      	; 0x27d6 <strncasecmp_P+0x22>
    27d4:	60 5e       	subi	r22, 0xE0	; 224
    27d6:	86 1b       	sub	r24, r22
    27d8:	61 11       	cpse	r22, r1
    27da:	71 f3       	breq	.-36     	; 0x27b8 <strncasecmp_P+0x4>
    27dc:	99 0b       	sbc	r25, r25
    27de:	08 95       	ret
    27e0:	88 1b       	sub	r24, r24
    27e2:	fc cf       	rjmp	.-8      	; 0x27dc <strncasecmp_P+0x28>

000027e4 <__ctype_isfalse>:
    27e4:	99 27       	eor	r25, r25
    27e6:	88 27       	eor	r24, r24

000027e8 <__ctype_istrue>:
    27e8:	08 95       	ret

000027ea <_exit>:
    27ea:	f8 94       	cli

000027ec <__stop_program>:
    27ec:	ff cf       	rjmp	.-2      	; 0x27ec <__stop_program>
